==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 1: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "‰∏ë", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (2-—è)" },
      { char: "Áà≠", meaning: "–ß–∂—ç–Ω (–∏–º—è —Å–æ–±—Å—Ç–≤.)" },
      { char: "Èõ®", meaning: "–î–æ–∂–¥—å / –î–æ–∂–¥—å –∏–¥–µ—Ç / –î–æ–∂–¥–∏—Ç—å" },
      { char: "ÂÖÅ", meaning: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ!" },
      { char: "‰∫•", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (12-—è)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").innerHTML = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "ÂØÖ", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (3-—è)" },
      { char: "Áô∏", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (10-–π)" },
      { char: "ÂçØ", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (4-—è)" },
      { char: "„±ø", meaning: "–¶–∑—é—ç (–ò–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ)" },
      { char: "Âçà", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (7-—è)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Âçà", meaning: "w«î" },
      { char: "ÂÖ∂", meaning: "q√≠" },
      { char: "„±ø", meaning: "ju√©" },
      { char: "‰∏ô", meaning: "b«êng" },
      { char: "‰∏ç", meaning: "b√π" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Âç†", meaning: "zhƒÅn" },
      { char: "‰∫•", meaning: "h√†i" },
      { char: "Â£¨", meaning: "r√©n" },
      { char: "Èõ®", meaning: "y«î" },
      { char: "ÂØÖ", meaning: "y√≠n" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Êõ∞", meaning: "yuƒì" },
      { char: "ÂÖÅ", meaning: "y«în" },
      { char: "Áô∏", meaning: "gu«ê" },
      { char: "Â∑±", meaning: "j«ê" },
      { char: "Ë≤û", meaning: "zhƒìn" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ö–∞–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –±–µ–∑–ª–∏—á–Ω—ã–µ?</title>
</head>
<body>

  <h2>–ö–∞–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –±–µ–∑–ª–∏—á–Ω—ã–µ?</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ ‚Äî –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–∞–º–∏ (–ø–æ–≥–æ–¥–∞, —Å—É–¥—å–±–∞ –∏ —Ç.–ø.)</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const items = [
      { id: "yu", text: "Èõ®", isImpersonal: true },
      { id: "qi-yu", text: "ÂÖ∂Èõ®", isImpersonal: true },
      { id: "wang-zhan-yue", text: "ÁéãÂç†Êõ∞", isImpersonal: false },
      { id: "bu-yu", text: "‰∏çÈõ®", isImpersonal: true },
      { id: "yun-yu", text: "ÂÖÅÈõ®", isImpersonal: true }
    ];

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    const userSelections = {};

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(items);

      shuffled.forEach(item => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.id = item.id;

        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.id = `chk-${item.id}`;
        checkbox.checked = false;

        checkbox.onchange = () => {
          userSelections[item.id] = checkbox.checked;
          label.classList.toggle("checked", checkbox.checked);
        };

        const textNode = document.createTextNode(item.text);

        label.appendChild(checkbox);
        label.appendChild(textNode);
        container.appendChild(label);

        userSelections[item.id] = false;
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      const allCorrect = items.every(item => {
        const expected = item.isImpersonal;
        const actual = !!userSelections[item.id];
        return expected === actual;
      });

      if (allCorrect) {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ!";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ú–µ–Ω—å—à–µ –¥–æ–∂–¥—è ‚Äî –Ω–µ –∑–Ω–∞—á–∏—Ç –Ω–µ –±–µ–∑–ª–∏—á–Ω–æ–µ.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±–µ–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –±–µ–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã" : "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±–µ–∑–ª–∏—á–Ω–æ—Å—Ç–∏")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂçúÁà≠?</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂçúÁà≠?</h2>
  <p class="instruction">–í –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö ÂçúÁà≠ ‚Äî —ç—Ç–æ –∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è. –ß—Ç–æ –æ–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { value: "wang", text: "–ì–∞–¥–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –í–∞–Ω", correct: false },
      { value: "zheng", text: "–ì–∞–¥–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –ß–∂—ç–Ω", correct: true },
      { value: "ruler-zheng", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ß–∂—ç–Ω", correct: false },
      { value: "repeat", text: "–°–ª–æ–≤–æ ¬´–≥–∞–¥–∞—Ç—å¬ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è", correct: false }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      if (selectedValue === "zheng") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! ÂçúÁà≠ ‚Äî –ß–∂—ç–Ω, –≥–∞–¥–∞—Ç–µ–ª—å.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ—Ç. Áà≠ –∑–¥–µ—Å—å ‚Äî –∏–º—è, –∞ –Ω–µ ¬´—Å–ø–æ—Ä¬ª.";
        resultEl.className = "error";
        sendResult(false);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ: ÂçúÁà≠ ‚Äî –∏–º—è –ß–∂—ç–Ω" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂçúÁà≠")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Áéã", meaning: "w√°ng" },
      { char: "ÂçØ", meaning: "m«éo" },
      { char: "Âçú", meaning: "b«î" },
      { char: "‰∏ë", meaning: "ch«íu" },
      { char: "Áà≠", meaning: "zhƒìng" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ì–∞–¥–∞—Ç–µ–ª—å –ß–∂—ç–Ω —Å–∫–∞–∑–∞–ª: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å–æ–≤¬ª.</em></p>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area">
    <!-- –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Âçú', 'Áà≠', 'Êõ∞', 'Áéã', 'ÂÖÅ', '‰∏ç', 'Ë≤û'];

    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      'Áà≠', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âçú', '‰∏ë', '„±ø', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    const isMobileDevice = 'ontouchstart' in window;

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      clone.ontouchstart = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºå') box.classList.add('punctuation');
        box.textContent = char;

        box.style.cursor = 'pointer';
        box.addEventListener('click', function() {
          moveToDropArea(this);
        });

        charPool.appendChild(box);
      });
    }

    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂçúÁà≠Êõ∞ÁéãÂÖÅ‰∏çË≤û';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –≤ –¥–µ–Ω—å Áô∏‰∏ë?</title>
</head>
<body>

  <h2>–ß—Ç–æ –≤ –¥–µ–Ω—å Áô∏‰∏ë?</h2>

  <div class="oracle-text">Áô∏‰∏ëÂÖÅÂÖ∂Èõ®</div>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
      –ü–∏–Ω—å–∏–Ω—å ‚ñº
    </button>
    <div class="pinyin-text">gu«ê ch«íu y«în q√≠ y«î</div>
  </div>

  <div class="options" id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { value: "rain-coming", text: "–ë—É–¥–µ—Ç –¥–æ–∂–¥—å", correct: false },
      { value: "no-rain", text: "–ù–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { value: "rained", text: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—à—ë–ª –¥–æ–∂–¥—å", correct: true },
      { value: "divined", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≥–∞–¥–∞–ª", correct: false }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);
        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      if (!selectedValue) {
        const resultEl = document.getElementById("result");
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      const isCorrect = selectedValue === "rained";
      const resultEl = document.getElementById("result");

      if (isCorrect) {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! ÂÖÅÂÖ∂Èõ® = ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ—à—ë–ª –¥–æ–∂–¥—å¬ª.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå ÂÖÅ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderOptions;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 3: ÂÖ∂</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖ∂?</h2>
  <p><strong>¬´ÂÖ∂Èõ®¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">q√≠ y«î</div>
  </div>

  <label><input type="radio" name="q" value="0"> –î–æ–∂–¥—å –∏–¥—ë—Ç</label>
  <label><input type="radio" name="q" value="1"> –ë—É–¥–µ—Ç –¥–æ–∂–¥—å</label>
  <label><input type="radio" name="q" value="2"> –î–æ–∂–¥—è –Ω–µ –±—É–¥–µ—Ç</label>
  <label><input type="radio" name="q" value="3"> –î–æ–∂–¥—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª</label>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.value === "1") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖ∂");
      }
    }
  </script>

</body>
</html>

<script>
  window.parent.postMessage({
    type: "TASK_EXISTS",
    valid: true
  }, "*");
</script>



=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å:</p>
    <p><em>"–ó–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: ¬´–ë—ã–ª –ª–∏ –¥–æ–∂–¥—å?¬ª"</em></p>
    <p class="hint">–ö–∞–∫ –±—É–¥–µ—Ç "–∑–∞–¥–∞–≤–∞–ª–∏ –≤–æ–ø—Ä–æ—Å?"</p>
    <p class="hint">–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–æ—Å–≤–µ–Ω–Ω–æ</p>

  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Ë≤û', 'Êõ∞', 'ÂÖÅ', 'Èõ®'];

    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      '‰∏ô', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âç†', '‰∏ë', '„±ø', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    const isMobileDevice = 'ontouchstart' in window;

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      clone.ontouchstart = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºå') box.classList.add('punctuation');
        box.textContent = char;

        box.style.cursor = 'pointer';
        box.addEventListener('click', () => moveToDropArea(box));

        charPool.appendChild(box);
      });
    }

    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ë≤ûÊõ∞ÂÖÅÈõ® = "–ó–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å ¬´–ë—ã–ª –ª–∏ –¥–æ–∂–¥—å?"¬ª';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å:</p>
    <p><em>¬´–ù–∞ —à–µ—Å—Ç–æ–π –¥–µ–Ω—å –ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤¬ª</em></p>
    <p class="hint">üî∏ 6-–π –¥–µ–Ω—å: Â∑± + Â∑≥</p>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Â∑±', 'Â∑≥', 'Áéã', '‰∏ç', 'Ë≤û'];

    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      '‰∏ô', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âç†', '‰∏ë', '„±ø', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    const isMobileDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      clone.ontouchstart = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.style.cursor = 'pointer';
        box.addEventListener('click', () => moveToDropArea(box));

        charPool.appendChild(box);
      });
    }

    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∑±Â∑≥Áéã‰∏çË≤û = ¬´–ù–∞ —à–µ—Å—Ç–æ–π –¥–µ–Ω—å...¬ª';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message error';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞</p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const wordBank = [
      { char: "‰∏ô", correct: "3-–π –Ω–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª" },
      { char: "Âçú", correct: "–≥–∞–¥–∞—Ç—å" },
      { char: "Èõ®", correct: "–¥–æ–∂–¥—å" },
      { char: "Áéã", correct: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å" },
      { char: "Ë≤û", correct: "–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–∞–∫—É–ª—É" },
      { char: "Êõ∞", correct: "—Å–∫–∞–∑–∞—Ç—å, –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏" },
      { char: "ÂÖÅ", correct: "–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ" },
      { char: "Âç†", correct: "–∏—Å—Ç–æ–ª–∫–æ–≤—ã–≤–∞—Ç—å" }
    ];

    const allValues = wordBank.map(item => item.correct);

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(wordBank);

      shuffled.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        const options = shuffleArray([...allValues]);

        let selectHTML = `<select id="char_${item.char}">
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      let allFilled = true;
      let correctCount = 0;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      const resultEl = document.getElementById("result");

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Âçú ‚Äî –≥–∞–¥–∞—Ç—å, Ë≤û ‚Äî –≤–æ–ø—Ä–æ—Å, ÂÖÅ ‚Äî –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderPairs;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ü–µ—Ä–µ–≤–æ–¥</title>
</head>
<body>

  <h2>–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</h2>

  <div id="questions-container">
    <!-- –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç–æ–º -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const questions = [
      {
        id: "t1",
        text: "‰∏ôÂØÖÂçú",
        pinyin: "b«êng y√≠n bo",
        options: [
          "–≥–∞–¥–∞–ª–∏ –≤ –¥–µ–Ω—å –±–∏–Ω-–∏–Ω—å",
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≥–∞–¥–∞–ª",
          "–≤ –¥–µ–Ω—å –±–∏–Ω—å-–º–∞–æ",
          "–∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ –≤ —Ö—Ä–∞–º–µ"
        ],
        correct: "–≥–∞–¥–∞–ª–∏ –≤ –¥–µ–Ω—å –±–∏–Ω-–∏–Ω—å"
      },
      {
        id: "t2",
        text: "ÁéãÂç†Êõ∞",
        pinyin: "w√°ng zh√†n yuƒì",
        options: [
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª",
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª",
          "—Ü–∞—Ä—å –ø—Ä–∏–∫–∞–∑–∞–ª",
          "–æ–Ω –∑–∞–ø–∏—Å–∞–ª"
        ],
        correct: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª"
      }
    ];

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function loadQuestions() {
      const container = document.getElementById("questions-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(questions);

      shuffled.forEach(q => {
        const questionDiv = document.createElement("div");
        questionDiv.className = "question";
        questionDiv.innerHTML = `
          <p><strong>${q.text}</strong></p>
          <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
              –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">${q.pinyin}</div>
          </div>
          <div class="options">
            ${q.options.map(option => `
              <label>
                <input type="radio" name="${q.id}" value="${option}">
                ${option}
              </label>
            `).join("")}
          </div>
        `;
        container.appendChild(questionDiv);
      });
    }

    function check() {
      const selectedT1 = document.querySelector('input[name="t1"]:checked');
      const selectedT2 = document.querySelector('input[name="t2"]:checked');
      const resultEl = document.getElementById("result");

      if (!selectedT1 || !selectedT2) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      const correctT1 = questions.find(q => q.id === "t1").correct;
      const correctT2 = questions.find(q => q.id === "t2").correct;

      const match1 = selectedT1.value === correctT1;
      const match2 = selectedT2.value === correctT2;

      if (match1 && match2) {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –û—à–∏–±–∫–∞. Êõ∞ ‚Äî –ø—Ä—è–º–∞—è —Ä–µ—á—å, Âç† ‚Äî –∏—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å.";
        sendResult(false, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    window.onload = loadQuestions;

    // –°–∏–≥–Ω–∞–ª –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ü—Ä—è–º–∞—è —Ä–µ—á—å</title>
</head>
<body>

  <h2>–ü—Ä—è–º–∞—è —Ä–µ—á—å –≤ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö</h2>
  <p class="intro">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.</p>

  <div class="oracle-text">Ë≤û‰∏ÅÂçØÂÖ∂Èõ®ÁéãÂç†Êõ∞ÂÖ∂Èõ®</div>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">zhƒìn dƒ´ng m«éo q√≠ y«î w√°ng zh√†n yuƒì q√≠ y«î</div>
  </div>

  <div class="question">–ö–∞–∫–∞—è —á–∞—Å—Ç—å ‚Äî –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –∫ –æ—Ä–∞–∫—É–ª—É?</div>

  <div id="options-container" class="options"></div>

  <button onclick="checkAnswer()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <div id="result"></div>
  <div id="explanation" style="display: none;">
    <p><strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong></p>
    <ol>
      <li><strong>Ë≤û</strong> –≤–≤–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å ‚Äî —ç—Ç–æ –ø—Ä—è–º–∞—è —Ä–µ—á—å.</li>
      <li><strong>ÁéãÂç†Êõ∞</strong> ‚Äî —Ü–∞—Ä—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª, —Ç–æ–∂–µ –ø—Ä—è–º–∞—è —Ä–µ—á—å, –Ω–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç.</li>
    </ol>
    <p><strong>„ÄåË≤û‰∏ÅÂçØÂÖ∂Èõ®„Äç</strong> ‚Äî –ø–æ–ª–Ω—ã–π –≤–æ–ø—Ä–æ—Å: "–ë—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å?"</p>
  </div>

  <script>
    const options = [
      { id: 1, text: "Ë≤û‰∏ÅÂçØÂÖ∂Èõ®", correct: true },
      { id: 2, text: "ÁéãÂç†Êõ∞ÂÖ∂Èõ®", correct: false },
      { id: 3, text: "‰∏ÅÂçØÂÖ∂Èõ®", correct: false },
      { id: 4, text: "Ë≤û‰∏ÅÂçØ", correct: false }
    ];

    let selectedOptionId = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const optionEl = document.createElement("div");
        optionEl.className = "option";
        optionEl.textContent = option.text;
        optionEl.dataset.id = option.id;
        optionEl.onclick = () => selectOption(option.id);
        container.appendChild(optionEl);
      });
    }

    function selectOption(id) {
      selectedOptionId = id;
      document.querySelectorAll('.option').forEach(el => {
        el.classList.remove('selected');
      });
      document.querySelector(`.option[data-id="${id}"]`).classList.add('selected');
    }

    function checkAnswer() {
      const resultEl = document.getElementById('result');
      const explanationEl = document.getElementById('explanation');

      if (!selectedOptionId) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç";
        resultEl.className = "error";
        return;
      }

      const correct = options.find(o => o.id === selectedOptionId).correct;

      if (correct) {
        resultEl.innerHTML = "‚úÖ <b>–í–µ—Ä–Ω–æ!</b>";
        resultEl.className = "success";
        explanationEl.style.display = "block";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        resultEl.className = "error";
        explanationEl.style.display = "block";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Ä–µ—á–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderOptions;

    window.parent.postMessage({
      type: "TASK_EXISTS",
      valid: true
    }, "*");
  </script>
</body>
</html>



=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–∫–∞–∑—É–µ–º–æ–µ</title>
</head>
<body>

  <h2>–ù–∞–π–¥–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç</h2>
  <p><strong>Â∑±ÂçØÂçúË≤ûÈõ®Ôºü</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">j«ê m«éo bu zhƒìn y«î?</div>
  </div>

  <p class="question">–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç?</p>

  <div class="buttons">
    <button onclick="answer('Èõ®')">Èõ®</button>
    <button onclick="answer('Ë≤û')">Ë≤û</button>
    <button onclick="answer('Âçú')">Âçú</button>
    <button onclick="answer('Â∑±ÂçØ')">Â∑±ÂçØ</button>
  </div>

  <p id="result"></p>

  <script>
    function answer(sel) {
      const resultEl = document.getElementById("result");
      if (sel === "Èõ®") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! Èõ® ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç: ¬´–±—É–¥–µ—Ç –¥–æ–∂–¥—å?¬ª";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ß—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ¬´—á—Ç–æ –±—É–¥–µ—Ç?¬ª";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–∫–∞–∑—É–µ–º–æ–≥–æ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –°–∏–≥–Ω–∞–ª –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>

</body>
</html>



=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥</title>
</head>
<body>

  <h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥</h2>

  <div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ö–ª–∏–∫ –ø–æ —Å–ª–æ–≤—É –≤ –ø–æ–ª–µ ‚Äî —É–¥–∞–ª–∏—Ç –µ–≥–æ.</p>
  </div>

  <div class="task-container">
    <div class="task-title">1. ‰∏çÂÖ∂Èõ®</div>
    <div class="oracle-text">‰∏çÂÖ∂Èõ®</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
  </div>

  <div class="task-container">
    <div class="task-title">2. Ë≤û‰∏çÈõ®</div>
    <div class="oracle-text">Ë≤û‰∏çÈõ®</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    const expected1 = [
      ['–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è'],
      ['–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['–¥–æ–∂–¥—è', '–Ω–µ', '–±—É–¥–µ—Ç'],
      ['–¥–æ–∂–¥—å', '–Ω–µ', '–ø–æ–π–¥—ë—Ç'],
      ['–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—å'],
      ['–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è']
    ];
    
    const expected2 = [
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è'],
      ['–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–¥–æ–∂–¥—è', '–Ω–µ', '–±—É–¥–µ—Ç'],
      ['–≥–∞–¥–∞–ª–∏', '–¥–æ–∂–¥—å', '–Ω–µ', '–ø–æ–π–¥—ë—Ç'],
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è']
    ];

    const words1 = ['–Ω–µ', '–±—É–¥–µ—Ç', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è', '–¥–æ–∂–¥—å', '–≤–æ–∑–º–æ–∂–Ω–æ', '–º–æ–∂–µ—Ç', '–ª–∏', '–¥–æ–∂–¥–ª–∏–≤–æ'];
    const words2 = ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è', '–¥–æ–∂–¥—å', '–∑–∞–¥–∞–≤–∞–ª–∏', '–ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–ª–∏'];

    const wordPool1 = document.getElementById('word-pool1');
    const wordPool2 = document.getElementById('word-pool2');
    const dropArea1 = document.getElementById('drop-area1');
    const dropArea2 = document.getElementById('drop-area2');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    function createWordBox(word, pool, dropArea) {
      const box = document.createElement('div');
      box.className = 'word-box';
      box.textContent = word;
      box.onclick = () => {
        box.remove();
        const clone = box.cloneNode(true);
        clone.onclick = () => { clone.remove(); updatePlaceholder(dropArea); };
        dropArea.appendChild(clone);
        updatePlaceholder(dropArea);
      };
      pool.appendChild(box);
    }

    function updatePlaceholder(dropArea) {
      const hasWords = dropArea.children.length > 0 && !Array.from(dropArea.children).some(el => el.textContent.includes('[–ø—É—Å—Ç–æ]'));
      if (!hasWords && dropArea.children.length === 0) {
        dropArea.innerHTML = '';
        const placeholder = document.createElement('span');
        placeholder.style.color = '#999';
        placeholder.style.fontStyle = 'italic';
        placeholder.textContent = '[–ø—É—Å—Ç–æ]';
        dropArea.appendChild(placeholder);
      }
    }

    function init() {
      wordPool1.innerHTML = '';
      wordPool2.innerHTML = '';
      dropArea1.innerHTML = '';
      dropArea2.innerHTML = '';
      resultEl.style.display = 'none';
      updatePlaceholder(dropArea1);
      updatePlaceholder(dropArea2);

      const shuffled1 = [...words1].sort(() => Math.random() - 0.5);
      const shuffled2 = [...words2].sort(() => Math.random() - 0.5);

      shuffled1.forEach(word => createWordBox(word, wordPool1, dropArea1));
      shuffled2.forEach(word => createWordBox(word, wordPool2, dropArea2));
    }

    function getWords(dropArea) {
      return Array.from(dropArea.children)
        .filter(el => !el.textContent.includes('[–ø—É—Å—Ç–æ]'))
        .map(el => el.textContent.trim());
    }

    checkBtn.addEventListener('click', () => {
      const current1 = getWords(dropArea1);
      const current2 = getWords(dropArea2);

      const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
      const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

      if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `‚úÖ <b>–í–µ—Ä–Ω–æ!</b>`;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
      } else {
        let message = '‚ùå –û—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ.';
        if (isCorrect1 && !isCorrect2) message = '‚ùå –í—Ç–æ—Ä–æ–π –Ω–µ–≤–µ—Ä–µ–Ω.';
        else if (!isCorrect1 && isCorrect2) message = '‚ùå –ü–µ—Ä–≤—ã–π –Ω–µ–≤–µ—Ä–µ–Ω.';
        resultEl.textContent = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, '–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–ª–æ–≤');
      }
    });

    resetBtn.addEventListener('click', init);

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = init;

    // –°–∏–≥–Ω–∞–ª –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖÅ?</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖÅ?</h2>

  <div class="oracle-text">Áô∏‰∏ëÂÖÅÂÖ∂Èõ®</div>
<div class="pinyin-container">
  <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å ‚ñº
  </button>
  <div class="pinyin-text">
    gu«ê ch«íu y«în q√≠ y«î
  </div>
</div>

  <div class="options" id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    const options = [
      { value: "correct", text: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—à—ë–ª –¥–æ–∂–¥—å", correct: true },
      { value: "rain", text: "–ë—É–¥–µ—Ç –¥–æ–∂–¥—å", correct: false },
      { value: "no-rain", text: "–ù–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { value: "said", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª", correct: false }
    ];

    let selectedValue = null;

    // –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
          label.classList.add('selected');
        };

        const text = document.createTextNode(option.text);
        label.appendChild(input);
        label.appendChild(text);
        container.appendChild(label);
      });
    }

    function check() {
      if (!selectedValue) {
        document.getElementById("result").textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.";
        document.getElementById("result").className = "error";
        return;
      }

      const isCorrect = selectedValue === "correct";

      const resultEl = document.getElementById("result");
      if (isCorrect) {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ÂÖÅ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ—à—ë–ª –¥–æ–∂–¥—å¬ª.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. ÂÖÅ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ¬ª, ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ¬ª ‚Äî —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage(
        {
          type: "TASK_RESULT",
          success,
          message: message || (success ? "–í–µ—Ä–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ ÂÖÅ" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ")
        },
        "*"
      );
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;

    // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ</p>

  <div class="column">
    <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
    <div id="words"></div>
  </div>

  <div class="column">
    <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
    <div id="defs"></div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Â£¨", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (9-–π);" },
      { char: "ÂÖ∂", meaning: "–°–ª—É–∂–µ–±–Ω–æ–µ –Ω–∞—Ä–µ—á–∏–µ: ¬´–±—É–¥–µ—Ç –ª–∏?¬ª" },
      { char: "Â∑±", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (6-–π);" },
      { char: "Âçú", meaning: "–ì–∞–¥–∞—Ç—å" },
      { char: "ÂÖÅ", meaning: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ; –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ</p>

  <div class="column">
    <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
    <div id="words"></div>
  </div>

  <div class="column">
    <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
    <div id="defs"></div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "‰∏ç", meaning: "–ù–µ; –∫–∞–∫ –≤ ¬´–Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è¬ª" },
      { char: "Áéã", meaning: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å / –¶–∞—Ä—å" },
      { char: "‰∏ô", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (3-–π)" },
      { char: "Âç†", meaning: "–ò—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ" },
      { char: "Êõ∞", meaning: "–ì–æ–≤–æ—Ä–∏—Ç—å; –≤–≤–æ–¥–∏—Ç —Ä–µ—á—å" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>





==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 2: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 2</title>
</head>
<body>

  <h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 2</h2>

  <div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤–æ–π –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –£—Ä–æ–∫–∞ 2.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–π!</em></p>
  </div>

  <div class="task-container">
    <div class="task-title">1. ÊàëÂèóÈªçÂπ¥Ôºü</div>
    <div class="oracle-text">ÊàëÂèóÈªçÂπ¥Ôºü</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
      <p>üí° –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç <strong>–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–∞–≥–æ–ª–∞ Âèó</strong> (–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π) –∏ <strong>–ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ÈªçÂπ¥</strong> (—É—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞)</p>
    </div>
  </div>

  <div class="task-container">
    <div class="task-title">2. ËÇÖÂºóÂÖ∂‰æÜÁâõÔºü</div>
    <div class="oracle-text">ËÇÖÂºóÂÖ∂‰æÜÁâõÔºü</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
      <p>üí° –ó–¥–µ—Å—å –≤–∞–∂–Ω–æ <strong>–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âºó</strong> –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –∏ <strong>–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‰æÜ</strong> (–ø—Ä–∏—Å–ª–∞—Ç—å), –ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Áâõ</p>
    </div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const expected1 = [
      ['–º—ã', '–ø–æ–ª—É—á–∏–º', '—É—Ä–æ–∂–∞–π', '–ø—Ä–æ—Å–∞'],
      ['–ø–æ–ª—É—á–∏–º', '–ª–∏', '–º—ã', '—É—Ä–æ–∂–∞–π', '–ø—Ä–æ—Å–∞'],
      ['—É—Ä–æ–∂–∞–π', '–ø—Ä–æ—Å–∞', '–º—ã', '–ø–æ–ª—É—á–∏–º'],
      ['–º—ã', '–ø–æ–ª—É—á–∏–º', '—É—Ä–æ–∂–∞–π', '–∏–∑', '–ø—Ä–æ—Å–∞']
    ];

    const expected2 = [
      ['—Å—É', '–Ω–µ', '–ø—Ä–∏—Å—ã–ª–∞–µ—Ç', '–ª–∏', '–±—ã–∫–æ–≤'],
      ['–Ω–µ', '–ø—Ä–∏—Å—ã–ª–∞–µ—Ç', '–ª–∏', '—Å—É', '–±—ã–∫–æ–≤'],
      ['—Å—É', '–Ω–µ', '–ø—Ä–∏—à–ª—ë—Ç', '–ª–∏', '–±—ã–∫–æ–≤'],
      ['–±—ã–∫–æ–≤', '—Å—É', '–Ω–µ', '–ø—Ä–∏—Å—ã–ª–∞–µ—Ç', '–ª–∏']
    ];

    const words1 = ['–º—ã', '–ø–æ–ª—É—á–∏–º', '—É—Ä–æ–∂–∞–π', '–ø—Ä–æ—Å–∞', '–∏–∑', '–ª–∏', '–ø–æ–ª—É—á–∏–ª–∏', '—É—Ä–æ–∂–∞—è', '–ø–ª–æ—Ö–æ–π', '–≤', '—ç—Ç–æ–º', '–≥–æ–¥—É'];
    const words2 = ['—Å—É', '–Ω–µ', '–ø—Ä–∏—Å—ã–ª–∞–µ—Ç', '–ª–∏', '–±—ã–∫–æ–≤', '–ø—Ä–∏—à–ª—ë—Ç', '–æ–Ω', '–±—ã–∫–∏', '–ø—Ä–∏—Å–ª–∞–ª', '–±—ã–∫–∞', '—Å–µ–π—á–∞—Å', '–≤–µ—Å–Ω–æ–π'];

    const wordPool1 = document.getElementById('word-pool1');
    const wordPool2 = document.getElementById('word-pool2');
    const dropArea1 = document.getElementById('drop-area1');
    const dropArea2 = document.getElementById('drop-area2');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –°–æ–∑–¥–∞—ë–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤
    function createWordElements(words, pool, dropArea) {
      const shuffledWords = shuffleArray(words); // üîÅ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
      return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ drop-area
          box.remove();
          dropArea.appendChild(box);
          updatePlaceholder(dropArea); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        };

        return box;
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å [–ø—É—Å—Ç–æ]
    function updatePlaceholder(dropArea) {
      const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
      dropArea.classList.toggle('has-words', hasWords);
    }

    let wordElements1 = [];
    let wordElements2 = [];

    function init() {
      // –û—á–∏—â–∞–µ–º
      wordPool1.innerHTML = '';
      wordPool2.innerHTML = '';
      dropArea1.innerHTML = '';
      dropArea2.innerHTML = '';
      resultEl.style.display = 'none';

      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
      wordElements1 = createWordElements(words1, wordPool1, dropArea1);
      wordElements2 = createWordElements(words2, wordPool2, dropArea2);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª—ã
      wordElements1.forEach(el => wordPool1.appendChild(el));
      wordElements2.forEach(el => wordPool2.appendChild(el));

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
      updatePlaceholder(dropArea1);
      updatePlaceholder(dropArea2);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤ drop-area: –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—É–ª
    dropArea1.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool1.appendChild(wordBox);
        updatePlaceholder(dropArea1);
      }
    });

    dropArea2.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool2.appendChild(wordBox);
        updatePlaceholder(dropArea2);
      }
    });

    function getWords(dropArea) {
      return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
    }

    checkBtn.addEventListener('click', () => {
      const current1 = getWords(dropArea1);
      const current2 = getWords(dropArea2);

      const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
      const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

      if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –£—Ä–æ–∫–∞ 2: –∫–∞—É–∑–∞—Ç–∏–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –∏ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âºó.`;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
      } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü:';
        if (!isCorrect1) message += '<br>‚Ä¢ –í –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏: –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Âèó (–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π)';
        if (!isCorrect2) message += '<br>‚Ä¢ –í–æ –≤—Ç–æ—Ä–æ–º: –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âºó –∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‰æÜ (–ø—Ä–∏—Å–ª–∞—Ç—å)';
        
        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
      }
    });

    resetBtn.addEventListener('click', init);

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ò–Ω–∫–æ–∑–∞—Ç–∏–≤ vs –ö–∞—É–∑–∞—Ç–∏–≤</title>
</head>
<body>

  <h2>–ò–Ω–∫–æ–∑–∞—Ç–∏–≤ vs –ö–∞—É–∑–∞—Ç–∏–≤</h2>

  <div class="instructions">
    <p><strong>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–∞</strong> –≤ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏:</p>
    <p>üî¥ <em>–∫—Ä–∞—Å–Ω—ã–π</em> ‚Äî –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</p>
    <p>üü¢ <em>–∑–µ–ª–µ–Ω—ã–π</em> ‚Äî –∏–Ω–∫–æ–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</p>
    <p><em>–í—Å–µ 4 –≥–ª–∞–≥–æ–ª–∞ (Èõ®, ‰æÜ, Âèó, Âá∫) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ–±–æ–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö</em></p>
  </div>

  <div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    const sentences = [
      { text: "ÂÖ∂Èõ®", type: "inc", explanation: "–¥–æ–∂–¥—å –∏–¥–µ—Ç (–±–µ–∑–ª–∏—á–Ω—ã–π –≥–ª–∞–≥–æ–ª)" },
      { text: "ËÇÖ‰æÜÁâõ", type: "caus", explanation: "–°—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –±—ã–∫–æ–≤ (–∫–∞—É–∑–∞—Ç–∏–≤ ‰æÜ)" },
      { text: "ÊàëÂèóÂπ¥", type: "inc", explanation: "–º—ã –ø–æ–ª—É—á–∞–µ–º —É—Ä–æ–∂–∞–π (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ Âèó)" },
      { text: "ÁéãÂá∫Êñπ", type: "caus", explanation: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Å—ã–ª–∞–µ—Ç –ø–ª–µ–º—è (–∫–∞—É–∑–∞—Ç–∏–≤ Âá∫)" },
      { text: "Êñπ‰æÜ", type: "inc", explanation: "–ø–ª–µ–º—è –ø—Ä–∏—Ö–æ–¥–∏—Ç (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ ‰æÜ)" },
      { text: "Á•ûÂèóÂπ¥", type: "caus", explanation: "–±–æ–≥ –¥–∞–µ—Ç —É—Ä–æ–∂–∞–π (–∫–∞—É–∑–∞—Ç–∏–≤ Âèó)" },
      { text: "ÊñπÂá∫", type: "inc", explanation: "–ø–ª–µ–º—è –≤—ã—Ö–æ–¥–∏—Ç (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ Âá∫)" },
      { text: "ÂçúÈõ®", type: "caus", explanation: "–≥–∞–¥–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∞–µ—Ç –¥–æ–∂–¥—å (–∫–∞—É–∑–∞—Ç–∏–≤ Èõ®)" },
      { text: "‰æÜÁâõ", type: "inc", explanation: "–±—ã–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ ‰æÜ)" },
      { text: "ÂÖÅÂèóÂπ¥", type: "inc", explanation: "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–∂–∞–π (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ Âèó)" }
    ];

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

    function createSentenceElement(sentence, index) {
      const item = document.createElement('div');
      item.className = 'sentence-item';
      item.dataset.index = index;
      
      item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
          <span class="toggle-text">–∫–∞—É–∑</span>
          <label class="toggle-switch">
            <input type="checkbox">
            <span class="slider"></span>
          </label>
          <span class="toggle-text">–∏–Ω–∫–æ</span>
        </div>
      `;
      
      return item;
    }

    function init() {
      const shuffled = shuffleArray([...sentences]);
      const column1 = document.getElementById('column1');
      const column2 = document.getElementById('column2');
      
      column1.innerHTML = '';
      column2.innerHTML = '';
      document.getElementById('result').style.display = 'none';
      
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π
      document.querySelectorAll('.sentence-item').forEach(el => {
        el.classList.remove('correct', 'incorrect');
      });

      shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
      });
      
      shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
      });
    }

    function checkAnswers() {
      const items = document.querySelectorAll('.sentence-item');
      let allCorrect = true;
      
      items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "inc") || 
                          (!input.checked && expectedType === "caus");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
          item.classList.add('correct');
        } else {
          item.classList.add('incorrect');
          allCorrect = false;
        }
      });
      
      const resultEl = document.getElementById('result');
      if (allCorrect) {
        resultEl.innerHTML = `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ.`;
        resultEl.className = 'success';
        sendResult(true);
      } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
      }
      resultEl.style.display = 'block';
    }

    function reset() {
      document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
      });
      document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
      });
      document.getElementById('result').style.display = 'none';
    }

    function sendResult(success) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

    document.getElementById('check-btn').addEventListener('click', checkAnswers);
    document.getElementById('reset-btn').addEventListener('click', reset);
  </script>
</body>
</html>



=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Âèó", meaning: "–ø–æ–ª—É—á–∞—Ç—å / –¥–∞–≤–∞—Ç—å (–∫–∞—É–∑–∞—Ç–∏–≤)" },
      { char: "‰æÜ", meaning: "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å / –ø—Ä–∏—Å—ã–ª–∞—Ç—å (–∫–∞—É–∑–∞—Ç–∏–≤)" },
      { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å / –ø–æ—Å—ã–ª–∞—Ç—å" },
      { char: "Èõ®", meaning: "–¥–æ–∂–¥—å / –ø–æ—Å—ã–ª–∞—Ç—å –¥–æ–∂–¥—å (–∫–∞—É–∑–∞—Ç–∏–≤)" },
      { char: "Âºó", meaning: "–Ω–µ (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, —Å –≥–ª–∞–≥–æ–ª–∞–º–∏)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script></body>
</html>



=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰ªä", meaning: "—Å–µ–π—á–∞—Å, –Ω—ã–Ω–µ—à–Ω–∏–π" },
      { char: "‰æÜ", meaning: "–±—É–¥—É—â–∏–π (–∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)" },
      { char: "Âπ¥", meaning: "—É—Ä–æ–∂–∞–π, –≥–æ–¥" },
      { char: "Ê≠≤", meaning: "–≥–æ–¥ (–µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏)" },
      { char: "Êò•", meaning: "–≤–µ—Å–Ω–∞ / –ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –≥–æ–¥–∞" }
    ];
    
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
  { char: "ËÇÖ", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è (–°—É)" },
  { char: "Áâõ", meaning: "–±—ã–∫, —Å–∫–æ—Ç" },
  { char: "ÂÜì", meaning: "–∏–º—è –ª–∏—Ü–∞ (–ß–∂—É–Ω)" },
  { char: "Áä¨", meaning: "—Å–æ–±–∞–∫–∞" },
  { char: "Â•ö", meaning: "—á—Ç–æ? –∫—Ç–æ? (–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script></body>
</html>



=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    const pairs = [
  { char: "Áî≤", meaning: "–Ω–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (1-–π)" },
  { char: "Ëæ∞", meaning: "–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (5-—è); –¥—Ä–∞–∫–æ–Ω" },
  { char: "ÁôΩ", meaning: "–±–µ–ª—ã–π" },
  { char: "È¶¨", meaning: "–ª–æ—à–∞–¥—å" },
  { char: "Ëá™", meaning: "—Å–∞–º, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ" }
    ];
    
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
  { char: "ÂïÜ", meaning: "–®–∞–Ω (–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ, –¥–∏–Ω–∞—Å—Ç–∏—è)" },
  { char: "ÂÜì", meaning: "–∏–º—è (–ì–æ—É), –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è" },
  { char: "‰∫ò", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è (–ì—ç–Ω—å)" },
  { char: "Êàë", meaning: "—è, –º—ã (1-–µ –ª–∏—Ü–æ)" },
  { char: "Èªç", meaning: "–ø—Ä–æ—Å–æ (–≤–∏–¥ –∑–µ—Ä–Ω–∞)" }

    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
  { char: "Èªç", meaning: "–ø—Ä–æ—Å–æ (–≤–∏–¥ –∑–µ—Ä–Ω–∞)" },
  { char: "Â∑≥", meaning: "–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (6-—è); –∑–º–µ—è" },
  { char: "Á®≤", meaning: "—Ä–∏—Å (—É—Ä–æ–∂–∞–π —Ä–∏—Å–∞)" },
  { char: "Êàî", meaning: "–∏–º—è (–¶–∑—è–Ω—å), –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è" },
  { char: "Áî´", meaning: "–∏–º—è (–§—É), –ª–∏—Ü–æ" }

    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Âèó", meaning: "sh√≤u" },
  { char: "‰æÜ", meaning: "l√°i" },
  { char: "Âá∫", meaning: "ch≈´" },
  { char: "Èõ®", meaning: "y«î" },
  { char: "Âºó", meaning: "f√∫" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "‰ªä", meaning: "jƒ´n" },
  { char: "‰æÜ", meaning: "l√°i" },
  { char: "Âπ¥", meaning: "ni√°n" },
  { char: "Ê≠≤", meaning: "su√¨" },
  { char: "Êò•", meaning: "ch≈´n" }
];


    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í —ç—Ç–æ–º –≥–æ–¥—É –º—ã –ø–æ–ª—É—á–∏–º —É—Ä–æ–∂–∞–π —Ä–∏—Å–∞.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰ªäÊ≠≥ ‚Äî –≤ —ç—Ç–æ–º –≥–æ–¥—É</li>
      <li>Êàë ‚Äî –º—ã</li>
      <li>Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å</li>
      <li>Á®ªÂπ¥ ‚Äî —É—Ä–æ–∂–∞–π —Ä–∏—Å–∞</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['‰ªä', 'Ê≠≥', 'Êàë', 'Âèó', 'Á®ª', 'Âπ¥'];

    const allChars = [
      '‰ªä', 'Ê≠≥', 'Êàë', 'Âèó', 'Á®ª', 'Âπ¥',
      'Êù•', '‰∏ç', 'Âºó', 'Êò•', 'ÁôΩ', 'È©¨',
      'Êñπ', 'Ëá™', 'Âêâ', 'Áéã', 'Âçú', 'Ë≤û',
      'Èõ®', 'ÂÖÅ', 'ÂÖ∂', '‰∫â', '„±ø', 'Áä¨'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰ªäÊ≠≥ÊàëÂèóÁ®ªÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "ËÇÖ", meaning: "s√π" },
  { char: "Áâõ", meaning: "ni√∫" },
  { char: "ÂÜì", meaning: "zh√≤ng" },  // –∏–ª–∏ "ch√≥ng" ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ "–ß–∂—É–Ω" ‚Äî —Å–∫–æ—Ä–µ–µ "ch√≥ng"
  { char: "Áä¨", meaning: "qu«én" },
  { char: "Â•ö", meaning: "xƒ´" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Áî≤", meaning: "ji«é" },
  { char: "Ëæ∞", meaning: "ch√©n" },
  { char: "ÁôΩ", meaning: "b√°i" },
  { char: "È¶¨", meaning: "m«é" },
  { char: "Ëá™", meaning: "z√¨" }
];


    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "ÂïÜ", meaning: "shƒÅng" },
  { char: "ÂÜì", meaning: "g√≤u" },
  { char: "‰∫ò", meaning: "g√®n" },
  { char: "Êàë", meaning: "w«í" },
  { char: "Èªç", meaning: "sh«î" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

<script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Èªç", meaning: "sh«î" },
  { char: "Â∑≥", meaning: "s√¨" },
  { char: "Á®≤", meaning: "d√†o" },
  { char: "Êàî", meaning: "jiƒÅn" },
  { char: "Áî´", meaning: "f«î" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (5 –≤–º–µ—Å—Ç–æ 10)
        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂèóÂπ¥Ôºü</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂèóÂπ¥Ôºü</h2>
  <p class="instruction">–í –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö —Ñ—Ä–∞–∑–∞ ÂèóÂπ¥ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ. –ß—Ç–æ –æ–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { value: "harvest", text: "–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π", correct: true },
      { value: "year", text: "–≤ —ç—Ç–æ–º –≥–æ–¥—É", correct: false },
      { value: "receive-year", text: "–ø–æ–ª—É—á–∏—Ç—å –≥–æ–¥ (–≤ —Å–º—ã—Å–ª–µ —Å—Ä–æ–∫–∞)", correct: false },
      { value: "celebrate", text: "–æ—Ç–º–µ—Ç–∏—Ç—å –≥–æ–¥ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ–º", correct: false }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      if (selectedValue === "harvest") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! ÂèóÂπ¥ ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π¬ª. –ì–ª–∞–≥–æ–ª Âèó –∑–¥–µ—Å—å –≤ –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ—Ç. Âπ¥ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–≥–æ–¥¬ª, –∞ ¬´—É—Ä–æ–∂–∞–π¬ª. ÂèóÂπ¥ ‚Äî –∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –≥–∞–¥–∞–Ω–∏–π –æ–± —É—Ä–æ–∂–∞–µ.";
        resultEl.className = "error";
        sendResult(false);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ: ÂèóÂπ¥ = –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂèóÂπ¥")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task25.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 2</p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –£—Ä–æ–∫–∞ 2 —Å –∫—Ä–∞—Ç–∫–∏–º–∏, —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const wordBank = [
      { char: "Âèó", correct: "–ø–æ–ª—É—á–∏—Ç—å / –¥–∞—Ç—å (–∫–∞—É–∑–∞—Ç–∏–≤)" },
      { char: "‰æÜ", correct: "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å / –ø—Ä–∏—Å—ã–ª–∞—Ç—å" },
      { char: "Âºó", correct: "–Ω–µ (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º)" },
      { char: "‰ªä", correct: "–Ω—ã–Ω–µ—à–Ω–∏–π, —Å–µ–π—á–∞—Å" },
      { char: "Ê≠≤", correct: "–≥–æ–¥ (–µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏)" },
      { char: "Âπ¥", correct: "—É—Ä–æ–∂–∞–π, –≥–æ–¥" },
      { char: "Êò•", correct: "–≤–µ—Å–Ω–∞ / –ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –≥–æ–¥–∞" },
      { char: "Êñπ", correct: "–ø–ª–µ–º—è, –Ω–∞—Ä–æ–¥" },
      { char: "Ëá™", correct: "—Å–∞–º, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ" },
      { char: "Âêâ", correct: "–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ö–æ—Ä–æ—à–æ" }
    ];

    const allValues = wordBank.map(item => item.correct);

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(wordBank);

      shuffled.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        const options = shuffleArray([...allValues]);

        let selectHTML = `<select id="char_${item.char}">
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      let allFilled = true;
      let correctCount = 0;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      const resultEl = document.getElementById("result");

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ! –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 2.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å/–¥–∞—Ç—å, ‰æÜ ‚Äî –ø—Ä–∏—Ö–æ–¥–∏—Ç—å/–ø—Ä–∏—Å—ã–ª–∞—Ç—å, Âπ¥ ‚Äî —É—Ä–æ–∂–∞–π.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderPairs;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task26.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ì–∞–¥–∞—Ç–µ–ª—å –¶–∑—é–π —Å–ø—Ä–æ—Å–∏–ª: –ü—Ä–∏–¥–µ—Ç –ª–∏ –≤ –Ω—ã–Ω–µ—à–Ω—é—é –≤–µ—Å–Ω—É –±—ã–∫</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â∑±ÂçØÂçú„±øË≤û ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å –¶–∑—é–π —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç (—Ñ–æ—Ä–º—É–ª–∞ –Ω–∞—á–∞–ª–∞)</li>
      <li>‰ªäÊò• ‚Äî –≤ –Ω—ã–Ω–µ—à–Ω—é—é –≤–µ—Å–Ω—É</li>
      <li>‰æÜÁâõ ‚Äî –ø—Ä–∏–¥–µ—Ç –±—ã–∫ (Êù• = –ø—Ä–∏–¥–µ—Ç)</li>
      <li>–§—Ä–∞–∑–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã, –¥–∞–ª–µ–µ ‚Äî –≤–æ–ø—Ä–æ—Å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –¶–µ–ª–µ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–ï–ó –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    const expected = ['Â∑±', 'ÂçØ', 'Âçú', '„±ø', 'Ë≤û', '‰ªä', 'Êò•', '‰æÜ', 'Áâõ'];

    // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (–±–µ–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)
    const allChars = [
      'Â∑±', 'ÂçØ', 'Âçú', '„±ø', 'Ë≤û', '‰ªä', 'Êò•', '‰æÜ', 'Áâõ',
      'Áéã', 'Âç†', 'Êõ∞', 'Âêâ', 'ÂÖ∂', 'Èõ®', '‰∏ç', 'ÂÖÅ', 'Êñπ', 'Ëá™',
      'ÁôΩ', 'È¶¨', 'Âèó', 'Âπ¥', 'Áä¨', 'Âºó', 'Êàë', 'Ê≠≤'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∑±ÂçØÂçú„±øË≤û‰ªäÊò•‰æÜÁâõ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task27.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–º –ø—Ä–æ—Å–∞ –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É.</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Êù•Â≤Å ‚Äî –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É</li>
      <li>Êàë ‚Äî –º—ã</li>
      <li>Âºó ‚Äî –Ω–µ (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º)</li>
      <li>ÂèóÈªçÂπ¥ ‚Äî –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞</li>
      <li>–í –∏–Ω—å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö: ¬´ÂºóÂèóÂπ¥¬ª ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Êù•', 'Â≤Å', 'Êàë', 'Âºó', 'Âèó', 'Èªç', 'Âπ¥'];

    const allChars = [
      'Êù•', 'Â≤Å', 'Êàë', 'Âºó', 'Âèó', 'Èªç', 'Âπ¥',
      '‰ªä', '‰∏ç', 'ÂÖ∂', 'ÂÖÅ', 'Èõ®', 'Áéã', 'Âç†',
      'Êñπ', 'Ëá™', 'Âêâ', 'Áâõ', 'Áä¨', 'ÁôΩ', 'È¶¨',
      'Á®ª', 'Êò•', 'Âçú', 'Ë≤û', 'Êõ∞', 'ÂÖ∂'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Êù•Â≤ÅÊàëÂºóÂèóÈªçÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task28.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π –ø—à–µ–Ω–∏—Ü—ã? –ù–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è –ø—à–µ–Ω–∏—Ü—ã?</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>ÂÜìÂèóÂπ¥Ôºü ‚Äî –ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π?</li>
      <li>ÂÜì‰∏çÂÖ∂ÂèóÂπ¥Ôºü ‚Äî –ù–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è?</li>
      <li>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞—Ä–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: ¬´–°–ª—É—á–∏—Ç—Å—è? –ù–µ —Å–ª—É—á–∏—Ç—Å—è?¬ª</li>
      <li>ÂÜì ‚Äî –∞—Ä—Ö–∞–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –±—É–¥—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏</li>
      <li>‰∏çÂÖ∂ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['ÂÜì', 'Âèó', 'Âπ¥', 'Ôºü', 'ÂÜì', '‰∏ç', 'ÂÖ∂', 'Âèó', 'Âπ¥', 'Ôºü'];

    const allChars = [
      'ÂÜì', 'Âèó', 'Âπ¥', 'Ôºü', 'ÂÜì', '‰∏ç', 'ÂÖ∂', 'Âèó', 'Âπ¥', 'Ôºü',
      'Êù•', 'Êàë', 'Âºó', '‰ªä', 'Â≤Å', 'Êñπ', 'ÁôΩ', 'È¶¨',
      'Èõ®', 'ÂÖÅ', 'Áéã', 'Ë¥û', 'Êõ∞', 'Êò•', 'Áä¨', 'Èªç',
      'Âêâ', 'Ëá™', 'Âçú', '„±ø', 'ÂÖ∂', 'Èõ®'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºü') box.classList.add('punctuation');
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂÜìÂèóÂπ¥ÔºüÂÜì‰∏çÂÖ∂ÂèóÂπ¥Ôºü';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É –ø–ª–µ–º—è –Ω–µ –ø–æ–ª—É—á–∏—Ç —É—Ä–æ–∂–∞—è.</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Êù•Â≤Å ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥</li>
      <li>Êñπ ‚Äî –ø–ª–µ–º—è</li>
      <li>Âºó ‚Äî –Ω–µ (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º)</li>
      <li>ÂèóÂπ¥ ‚Äî –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Êù•', 'Â≤Å', 'Êñπ', 'Âºó', 'Âèó', 'Âπ¥'];

    const allChars = [
      'Êù•', 'Â≤Å', 'Êñπ', 'Âºó', 'Âèó', 'Âπ¥',
      '‰ªä', 'Êàë', '‰∏ç', 'Èõ®', 'ÂÖ∂', 'ÂÖÅ',
      'Áéã', 'Âç†', 'Êõ∞', 'Ë¥û', 'Âçú', '‰∫â',
      'Á®ª', 'Êò•', 'Ëá™', 'Âêâ', 'ÁôΩ', 'È©¨'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Êù•Â≤ÅÊñπÂºóÂèóÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∏—Å–ª–∞–ª–∏ –ª–∏ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π? –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ª–∏ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π?</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰æÜÁôΩÈ¶¨Ôºü ‚Äî –ü—Ä–∏—Å–ª–∞–ª–∏ –ª–∏ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π?</li>
      <li>Ë≤û ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç (–≤–æ –≤—Ç–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–µ)</li>
      <li>‰∏çÂÖ∂ ‚Äî –Ω–µ –±—É–¥–µ—Ç –ª–∏? (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å)</li>
      <li>–°—Ç—Ä—É–∫—Ç—É—Ä–∞: [–≤–æ–ø—Ä–æ—Å]? Ë≤û[–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å]?</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['‰æÜ', 'ÁôΩ', 'È¶¨', 'Ôºü', '‰∏ç', 'ÂÖ∂', '‰æÜ', 'ÁôΩ', 'È¶¨', 'Ôºü'];

    const allChars = [
      '‰æÜ', 'ÁôΩ', 'È¶¨', 'Ôºü', 'Ë≤û', '‰∏ç', 'ÂÖ∂', '‰æÜ', 'ÁôΩ', 'È¶¨', 'Ôºü',
      '‰ªä', 'Â≤Å', 'Êàë', 'Âèó', 'Âπ¥', 'Êñπ', 'Âºó', 'Èõ®', 'ÂÖÅ', 'Áéã',
      'Âêâ', 'Ëá™', 'Êò•', 'Áä¨', 'Áâõ', 'Á®ª', 'ÂÖ∂', 'Êõ∞'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºü') box.classList.add('punctuation');
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰æÜÁôΩÈ¶¨ÔºüË≤û‰∏çÂÖ∂‰æÜÁôΩÈ¶¨Ôºü';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âºó</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Âºó –≤ ¬´ÂºóÂèóÂπ¥¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÊàëÂºóÂèóÂπ¥¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w«í f√∫ sh√≤u ni√°n</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
const options = [
  { text: "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —É—Ä–æ–∂–∞–π –±—É–¥–µ—Ç", correct: false },
  { text: "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∂–∞—è", correct: true },
  { text: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∂–∞—è", correct: false },
  { text: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —É—Ä–æ–∂–∞–π —É–∂–µ –µ—Å—Ç—å", correct: false }
];
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index; // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = "1"
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

if (selected.dataset.correct === "true") {
  resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âºó ‚Äî —ç—Ç–æ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–∞–∫ ‰∏ç.";
  sendResult(true);
} else {
  resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âºó –æ—Ç—Ä–∏—Ü–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.";
  sendResult(false);
}
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>

</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>



=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ‰ªä</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰ªä –≤ ¬´‰ªäÊ≠≤„Äç?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰ªäÊ≠≤ÂïÜÂèóÂπ¥¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">jƒ´n su√¨ shƒÅng sh√≤u ni√°n</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
const options = [
  { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ—à–ª–æ–µ", correct: false },
  { text: "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ ¬´–Ω—ã–Ω–µ—à–Ω–∏–π¬ª", correct: true },
  { text: "–û–∑–Ω–∞—á–∞–µ—Ç ¬´–±—É–¥—É—â–∏–π¬ª", correct: false },
  { text: "–í—ã—Ä–∞–∂–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å", correct: false }
];
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index; // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = "1"
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

if (selected.dataset.correct === "true") {
  resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‰ªä ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–µ: ¬´—Å–µ–π—á–∞—Å¬ª, ¬´–Ω—ã–Ω–µ—à–Ω–∏–π¬ª.";
  sendResult(true);
} else {
  resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. ‰ªä –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.";
  sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ‰ªä");
}
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>

</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>



=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ‰æÜ</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰æÜ –≤ ¬´‰æÜÊ≠≤„Äç?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰æÜÊ≠≤‰∏çÂÖ∂ÂèóÂπ¥¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">l√°i su√¨ b√π q√≠ sh√≤u ni√°n</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
const options = [
  { text: "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–≤ –±—É–¥—É—â–µ–º¬ª", correct: false },
  { text: "–í —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–±—É–¥—É—â–∏–π¬ª", correct: true },
  { text: "–û–∑–Ω–∞—á–∞–µ—Ç ¬´–ø—Ä–æ—à–ª—ã–π¬ª", correct: false },
  { text: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –ª—é–¥—å–º–∏", correct: false }
];
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index; // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = "1"
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

if (selected.dataset.correct === "true") {
  resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‰æÜ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‰æÜÊ≠≤) ‚Äî ¬´–±—É–¥—É—â–∏–π¬ª, –Ω–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è.";
  sendResult(true);
} else {
  resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. ‰æÜ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏, –Ω–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.";
  sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ‰æÜ");
}
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>

</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>



=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Ëá™</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Ëá™ –≤ ¬´Ëá™‰æÜ„Äç?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÊñπÂÖ∂Ëá™‰æÜ„Äç ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">fƒÅng q√≠ z√¨ l√°i</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
const options = [
  { text: "–û–∑–Ω–∞—á–∞–µ—Ç ¬´–¥—Ä—É–≥–æ–π¬ª", correct: false },
  { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –º–µ—Å—Ç–∞", correct: false },
  { text: "–í—ã—Ä–∞–∂–∞–µ—Ç —Å–∞–º–æ–¥–≤–∏–∂–µ–Ω–∏–µ: ¬´—Å–∞–º –ø—Ä–∏–π—Ç–∏¬ª", correct: true },
  { text: "–ß–∞—Å—Ç–∏—Ü–∞ –±—É–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", correct: false }
];
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index; // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = "1"
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

if (selected.dataset.correct === "true") {
  resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Ëá™ ‚Äî ¬´—Å–∞–º¬ª, –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ Ëá™‰æÜ ‚Äî ¬´–ø—Ä–∏–¥—ë—Ç —Å–∞–º¬ª.";
  sendResult(true);
} else {
  resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Ëá™ –≤—ã—Ä–∞–∂–∞–µ—Ç —Å–∞–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.";
  sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ Ëá™");
}
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>

</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>



=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–£—Ä–æ–∫ 2 ‚Äî –ß–∞—Å—Ç–∏—Ü—ã</title>
</head>
<body>

  <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>

  <div class="grid">
    <div class="cell" onclick="openModal('q1')">
      <strong>‰ªäÊ≠≤</strong>
      <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
      <strong>‰æÜÊ≠≤</strong>
      <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
      <strong>‰∏çÂÖ∂ÂèóÂπ¥</strong>
      <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
      <strong>Ëá™‰æÜ</strong>
      <span class="status" id="status-q4">?</span>
    </div>
  </div>

  <button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
  <div id="modal-q1" class="modal">
    <div class="modal-content">
      <div class="modal-header">‰ªäÊ≠≤</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">jƒ´n su√¨</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q1" value="–Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥"> –Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥</label>
        <label><input type="radio" name="q1" value="–±—É–¥—É—â–∏–π –≥–æ–¥"> –±—É–¥—É—â–∏–π –≥–æ–¥</label>
        <label><input type="radio" name="q1" value="–ø—Ä–æ—à–ª—ã–π –≥–æ–¥"> –ø—Ä–æ—à–ª—ã–π –≥–æ–¥</label>
        <label><input type="radio" name="q1" value="–µ–∂–µ–≥–æ–¥–Ω–æ"> –µ–∂–µ–≥–æ–¥–Ω–æ</label>
      </div>
      <button onclick="closeModal('q1')">OK</button>
    </div>
  </div>

  <div id="modal-q2" class="modal">
    <div class="modal-content">
      <div class="modal-header">‰æÜÊ≠≤</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">l√°i su√¨</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q2" value="–Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥"> –Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥</label>
        <label><input type="radio" name="q2" value="–±—É–¥—É—â–∏–π –≥–æ–¥"> –±—É–¥—É—â–∏–π –≥–æ–¥</label>
        <label><input type="radio" name="q2" value="–ø—Ä–æ—à–ª—ã–π –≥–æ–¥"> –ø—Ä–æ—à–ª—ã–π –≥–æ–¥</label>
        <label><input type="radio" name="q2" value="–≤ –¥–µ–Ω—å –ª–∞–π"> –≤ –¥–µ–Ω—å –ª–∞–π</label>
      </div>
      <button onclick="closeModal('q2')">OK</button>
    </div>
  </div>

  <div id="modal-q3" class="modal">
    <div class="modal-content">
      <div class="modal-header">‰∏çÂÖ∂ÂèóÂπ¥</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">b√π q√≠ sh√≤u ni√°n</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q3" value="—É–∂–µ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π"> —É–∂–µ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π</label>
        <label><input type="radio" name="q3" value="–Ω–µ –ø–æ–ª—É—á–∏–º —É—Ä–æ–∂–∞–π"> –Ω–µ –ø–æ–ª—É—á–∏–º —É—Ä–æ–∂–∞–π</label>
        <label><input type="radio" name="q3" value="–±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π?"> –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π?</label>
        <label><input type="radio" name="q3" value="–Ω–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è?"> –Ω–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è?</label>
      </div>
      <button onclick="closeModal('q3')">OK</button>
    </div>
  </div>

  <div id="modal-q4" class="modal">
    <div class="modal-content">
      <div class="modal-header">Ëá™‰æÜ</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">z√¨ l√°i</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q4" value="–ø—Ä–∏–¥—É—Ç –æ—Ç—Ç—É–¥–∞"> –ø—Ä–∏–¥—É—Ç –æ—Ç—Ç—É–¥–∞</label>
        <label><input type="radio" name="q4" value="–ø—Ä–∏–¥—É—Ç —Å–∞–º–∏"> –ø—Ä–∏–¥—É—Ç —Å–∞–º–∏</label>
        <label><input type="radio" name="q4" value="–Ω–µ –ø—Ä–∏–¥—É—Ç"> –Ω–µ –ø—Ä–∏–¥—É—Ç</label>
        <label><input type="radio" name="q4" value="–ø–æ—Å–ª–∞—Ç—å –Ω–∞–∑–∞–¥"> –ø–æ—Å–ª–∞—Ç—å –Ω–∞–∑–∞–¥</label>
      </div>
      <button onclick="closeModal('q4')">OK</button>
    </div>
  </div>

  <script>
    const correctAnswers = {
      q1: "–Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥",
      q2: "–±—É–¥—É—â–∏–π –≥–æ–¥",
      q3: "–Ω–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è?",
      q4: "–ø—Ä–∏–¥—É—Ç —Å–∞–º–∏"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
      document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
      const selected = document.querySelector(`input[name="${id}"]:checked`);
      if (selected) {
        userAnswers[id] = selected.value;
        document.getElementById(`status-${id}`).textContent = "‚úì";
        document.getElementById(`status-${id}`).style.color = "green";
      }
      document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
      const resultEl = document.getElementById("result");
      const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

      if (!allAnswered) {
        resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
        return;
      }

      let correctCount = 0;
      for (const id in correctAnswers) {
        if (userAnswers[id] === correctAnswers[id]) correctCount++;
      }

      if (correctCount === 4) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
        sendResult(true);
      } else {
        const wrong = 4 - correctCount;
        resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
        sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>





==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 3: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰∫é –≤ ¬´Âëä‰∫éÁéã¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Âëä‰∫éÁéã¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">g√†o y√∫ w√°ng</div>
  </div>


  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–û—Ç–∫—É–¥–∞: ¬´–≤—ã–π—Ç–∏ –∏–∑ –®–∞–Ω¬ª", correct: false },
    { text: "–ö–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç: ¬´–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω¬ª", correct: true },
    { text: "–ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –®–∞–Ω¬ª", correct: false },
    { text: "–°—Ä–µ–¥—Å—Ç–≤–æ: ¬´—Å –ø–æ–º–æ—â—å—é –®–∞–Ω¬ª", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰∫é –≤ ¬´ÂÖ•‰∫éÂïÜ¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂÖ•‰∫éÂïÜ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">r√π y√∫ shƒÅng</div>
  </div>


  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–û—Ç–∫—É–¥–∞: ¬´–≤—ã–π—Ç–∏ –∏–∑ –®–∞–Ω¬ª", correct: false },
    { text: "–ö–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç: ¬´–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω¬ª", correct: true },
    { text: "–ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –®–∞–Ω¬ª", correct: false },
    { text: "–°—Ä–µ–¥—Å—Ç–≤–æ: ¬´—Å –ø–æ–º–æ—â—å—é –®–∞–Ω¬ª", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Áøå –≤ ¬´ÁøåÂ∫öÂØÖ¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÁøåÂ∫öÂØÖ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">y√¨ gƒìng y√≠n</div>
  </div>


  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–ü—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å", correct: false },
    { text: "–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å", correct: true },
    { text: "–í–µ–ª–∏–∫–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å", correct: false },
    { text: "–ù–∞—Å—Ç—É–ø–∞—é—â–∏–π –º–µ—Å—è—Ü –≥—ç–Ω-–∏–Ω—å", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰∏ä –≤ ¬´‰∏äÁî≤¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰∏äÁî≤¬ª ‚Äî —ç—Ç–æ:</strong></p>



  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">sh√†ng ji«é</div>
  </div>


  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)", correct: true },
    { text: "–ú–ª–∞–¥—à–∏–π –¶–∑—è", correct: false },
    { text: "–¶–∑—è –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –®–∞–Ω", correct: false },
    { text: "–¶–∑—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª –≤–µ—Å–Ω–æ–π", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–£—Ä–æ–∫ 3 ‚Äî –ß–∞—Å—Ç–∏—Ü—ã –∏ –ø—Ä–µ–¥–ª–æ–≥–∏</title>
</head>
<body>

  <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>

  <div class="grid">
    <div class="cell" onclick="openModal('q1')">
      <strong>ÂÖ•‰∫éÂïÜ</strong>
      <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
      <strong>ÁéãÂãøÂÖ•‰∫éÂïÜ</strong>
      <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
      <strong>ÁøåÂ∫öÂØÖ</strong>
      <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
      <strong>‰∏äÁî≤</strong>
      <span class="status" id="status-q4">?</span>
    </div>
  </div>

  <button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
  <div id="modal-q1" class="modal">
    <div class="modal-content">
      <div class="modal-header">ÂÖ•‰∫éÂïÜ</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">r√π y√∫ shƒÅng</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q1" value="–≤—ã–π—Ç–∏ –∏–∑ –®–∞–Ω">–≤—ã–π—Ç–∏ –∏–∑ –®–∞–Ω</label>
        <label><input type="radio" name="q1" value="–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω">–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q1" value="–æ—Ö–æ—Ç–∏—Ç—å—Å—è –≤ –®–∞–Ω">–æ—Ö–æ—Ç–∏—Ç—å—Å—è –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q1" value="—Å–æ–æ–±—â–∏—Ç—å –≤ –®–∞–Ω">—Å–æ–æ–±—â–∏—Ç—å –≤ –®–∞–Ω</label>
      </div>
      <button onclick="closeModal('q1')">OK</button>
    </div>
  </div>

  <div id="modal-q2" class="modal">
    <div class="modal-content">
      <div class="modal-header">ÁéãÂãøÂÖ•‰∫éÂïÜ</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">w√°ng w√π r√π y√∫ shƒÅng</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω">–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏—Ç –Ω–µ –≤ –®–∞–Ω">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏—Ç –Ω–µ –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω</label>
      </div>
      <button onclick="closeModal('q2')">OK</button>
    </div>
  </div>

  <div id="modal-q3" class="modal">
    <div class="modal-content">
      <div class="modal-header">ÁøåÂ∫öÂØÖ</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">y√¨ gƒìng y√≠n</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q3" value="–ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å">–ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å</label>
        <label><input type="radio" name="q3" value="—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å">—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å</label>
        <label><input type="radio" name="q3" value="–≤–µ–ª–∏–∫–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å">–≤–µ–ª–∏–∫–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å</label>
        <label><input type="radio" name="q3" value="–Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π –º–µ—Å—è—Ü –≥—ç–Ω-–∏–Ω—å">–Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π –º–µ—Å—è—Ü –≥—ç–Ω-–∏–Ω—å</label>
      </div>
      <button onclick="closeModal('q3')">OK</button>
    </div>
  </div>

  <div id="modal-q4" class="modal">
    <div class="modal-content">
      <div class="modal-header">‰∏äÁî≤</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">sh√†ng ji«é</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q4" value="–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)">–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)</label>
        <label><input type="radio" name="q4" value="–ú–ª–∞–¥—à–∏–π –¶–∑—è">–ú–ª–∞–¥—à–∏–π –¶–∑—è</label>
        <label><input type="radio" name="q4" value="–¶–∑—è –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –®–∞–Ω">–¶–∑—è –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –®–∞–Ω</label>
        <label><input type="radio" name="q4" value="–¶–∑—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª –≤–µ—Å–Ω–æ–π">–¶–∑—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª –≤–µ—Å–Ω–æ–π</label>
      </div>
      <button onclick="closeModal('q4')">OK</button>
    </div>
  </div>

  <script>
    const correctAnswers = {
      q1: "–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω",
      q2: "–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω",
      q3: "—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å",
      q4: "–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
      document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
      const selected = document.querySelector(`input[name="${id}"]:checked`);
      if (selected) {
        userAnswers[id] = selected.value;
        document.getElementById(`status-${id}`).textContent = "‚úì";
        document.getElementById(`status-${id}`).style.color = "green";
      }
      document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
      const resultEl = document.getElementById("result");
      const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

      if (!allAnswered) {
        resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
        return;
      }

      let correctCount = 0;
      for (const id in correctAnswers) {
        if (userAnswers[id] === correctAnswers[id]) correctCount++;
      }

      if (correctCount === 4) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
        sendResult(true);
      } else {
        const wrong = 4 - correctCount;
        resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
        sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 3</title>
</head>
<body>

  <h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 3</h2>

  <div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –£—Ä–æ–∫–∞ 3.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–≥ ‰∫é –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âãø!</em></p>
  </div>

  <div class="task-container">
    <div class="task-title">1. ÂÖ•‰∫éÂïÜÔºü</div>
    <div class="oracle-text">ÂÖ•‰∫éÂïÜÔºü</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
      <p>üí° –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç <strong>–ø—Ä–µ–¥–ª–æ–≥ ‰∫é</strong> –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ <strong>–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è</strong> (3.1)</p>
    </div>
  </div>

  <div class="task-container">
    <div class="task-title">2. ÁéãÂãøÂÖ•‰∫éÂïÜ</div>
    <div class="oracle-text">ÁéãÂãøÂÖ•‰∫éÂïÜ</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
      <p>üí° –ó–¥–µ—Å—å –≤–∞–∂–Ω–æ <strong>–º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âãø</strong> (3.5) –∏ <strong>–ø—Ä–µ–¥–ª–æ–≥ ‰∫é</strong> –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞</p>
    </div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const expected1 = [
      ['–≤—Å—Ç—É–ø–∏—Ç—å', '–≤', '–®–∞–Ω'],
      ['–≤–æ–π—Ç–∏', '–≤', '–®–∞–Ω'],
      ['–≤—Å—Ç—É–ø–ª—é', '–ª–∏', '–≤', '–®–∞–Ω'],
      ['–≤', '–®–∞–Ω', '–≤—Å—Ç—É–ø–∏—Ç—å']
    ];

    const expected2 = [
      ['–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '—Å–ª–µ–¥—É–µ—Ç', '–≤—Å—Ç—É–ø–∞—Ç—å', '–≤', '–®–∞–Ω'],
      ['–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '–Ω–∞–¥–æ', '–≤—Å—Ç—É–ø–∞—Ç—å', '–≤', '–®–∞–Ω'],
      ['–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '—Å—Ç–æ–∏—Ç', '–≤—Å—Ç—É–ø–∞—Ç—å', '–≤', '–®–∞–Ω'],
      ['–≤', '–®–∞–Ω', '–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '—Å–ª–µ–¥—É–µ—Ç', '–≤—Å—Ç—É–ø–∞—Ç—å']
    ];

    const words1 = ['–≤', '–®–∞–Ω', '–≤—Å—Ç—É–ø–∏—Ç—å', '–ª–∏', '–≤–æ–π—Ç–∏', '–∏–∑', '—Å–µ–π—á–∞—Å', '–º—ã', '–≤—ã–π—Ç–∏', '–∏–∑', '–Ω–µ–≥–æ', '–Ω–∞', '–∑–∞–ø–∞–¥'];
    const words2 = ['–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '—Å–ª–µ–¥—É–µ—Ç', '–≤—Å—Ç—É–ø–∞—Ç—å', '–≤', '–®–∞–Ω', '–Ω–∞–¥–æ', '—Å—Ç–æ–∏—Ç', '–æ–Ω', '–≤–æ–π–¥–µ—Ç', '—Å–µ–π—á–∞—Å', '–≤–µ—Å–Ω–æ–π'];

    const wordPool1 = document.getElementById('word-pool1');
    const wordPool2 = document.getElementById('word-pool2');
    const dropArea1 = document.getElementById('drop-area1');
    const dropArea2 = document.getElementById('drop-area2');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –°–æ–∑–¥–∞—ë–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤
    function createWordElements(words, pool, dropArea) {
      const shuffledWords = shuffleArray(words); // üîÅ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
      return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ drop-area
          box.remove();
          dropArea.appendChild(box);
          updatePlaceholder(dropArea); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        };

        return box;
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å [–ø—É—Å—Ç–æ]
    function updatePlaceholder(dropArea) {
      const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
      dropArea.classList.toggle('has-words', hasWords);
    }

    let wordElements1 = [];
    let wordElements2 = [];

    function init() {
      // –û—á–∏—â–∞–µ–º
      wordPool1.innerHTML = '';
      wordPool2.innerHTML = '';
      dropArea1.innerHTML = '';
      dropArea2.innerHTML = '';
      resultEl.style.display = 'none';

      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
      wordElements1 = createWordElements(words1, wordPool1, dropArea1);
      wordElements2 = createWordElements(words2, wordPool2, dropArea2);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª—ã
      wordElements1.forEach(el => wordPool1.appendChild(el));
      wordElements2.forEach(el => wordPool2.appendChild(el));

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
      updatePlaceholder(dropArea1);
      updatePlaceholder(dropArea2);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤ drop-area: –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—É–ª
    dropArea1.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool1.appendChild(wordBox);
        updatePlaceholder(dropArea1);
      }
    });

    dropArea2.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool2.appendChild(wordBox);
        updatePlaceholder(dropArea2);
      }
    });

    function getWords(dropArea) {
      return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
    }

    checkBtn.addEventListener('click', () => {
      const current1 = getWords(dropArea1);
      const current2 = getWords(dropArea2);

      const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
      const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

      if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –£—Ä–æ–∫–∞ 3: –ø—Ä–µ–¥–ª–æ–≥ ‰∫é –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âãø.`;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
      } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü:';
        if (!isCorrect1) message += '<br>‚Ä¢ –í –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏: –ø—Ä–µ–¥–ª–æ–≥ ‰∫é –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è';
        if (!isCorrect2) message += '<br>‚Ä¢ –í–æ –≤—Ç–æ—Ä–æ–º: –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âãø ("–Ω–µ —Å–ª–µ–¥—É–µ—Ç")';
        
        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
      }
    });

    resetBtn.addEventListener('click', init);

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ vs –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</title>
</head>
<body>

  <h2>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ/–í—Ä–µ–º—è vs –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</h2>

<div class="instructions">
  <div class="instructions-header" onclick="toggleInstructions()">
    <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
    <span class="arrow">‚ñº</span>
  </div>
  <div class="instructions-content" style="display:none">
    <p><strong>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ/–í—Ä–µ–º—è vs –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</strong></p>
    <p>–í –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç—Å—è –≤–æ–∫—Ä—É–≥ –¥–≤—É—Ö –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤:</p>
    
    <p>üîµ <strong>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ/–í—Ä–µ–º—è</strong> (—Å–∏–Ω–∏–π):</p>
    <ul>
      <li>–ü—Ä–µ–¥–ª–æ–≥ ‰∫é (y√∫) —É–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—Ç–æ/–≤—Ä–µ–º—è: <em>"‰∫éÂïÜ"</em> = "–≤ –®–∞–Ω"</li>
      <li>–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã: <em>"Áî≤Â≠ê"</em> = "–¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã"</li>
      <li>–û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –î–û —Å–∫–∞–∑—É–µ–º–æ–≥–æ</li>
    </ul>
    
    <p>üü£ <strong>–ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</strong> (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π):</p>
    <ul>
      <li>Âãø (w√π)/ÊØã (w√∫) = –∑–∞–ø—Ä–µ—Ç: <em>"ÂãøÂÖ•"</em> = "–Ω–µ –≤—Ö–æ–¥–∏!"</li>
      <li>Áøå (y√¨)/Áîü (shƒìng) = –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è: <em>"ÁøåÂ∫öÂØÖ"</em> = "—Å–ª–µ–¥. –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å"</li>
      <li>–°—Ç–æ—è—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º</li>
    </ul>
    
    <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
      "‰∫éÂïÜÂÖ•" ‚Üí üîµ (–º–µ—Å—Ç–æ)<br>
      "ÂãøÂëä" ‚Üí üü£ (–∑–∞–ø—Ä–µ—Ç)</p>
  </div>
</div>


<script>
function toggleInstructions() {
  const header = document.querySelector('.instructions-header');
  const content = document.querySelector('.instructions-content');
  const isHidden = content.style.display === 'none';
  
  content.style.display = isHidden ? 'block' : 'none';
  header.classList.toggle('collapsed', !isHidden);
  
  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è iframe (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä)
  setTimeout(() => {
    window.parent.postMessage({
      type: "UPDATE_HEIGHT",
      height: document.body.scrollHeight
    }, "*");
  }, 100);
}
</script>

  <div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    const sentences = [
      { text: "‰∫éÂïÜÂÖ•", type: "space", explanation: "–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω (–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)" },
      { text: "ÂãøÂëäÁéã", type: "mod", explanation: "–Ω–µ —Å–æ–æ–±—â–∞–π –ø—Ä–∞–≤–∏—Ç–µ–ª—é (–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å)" },
      { text: "‰∫éÁî≤Â≠êÁî∞", type: "space", explanation: "–æ—Ö–æ—Ç–∏—Ç—å—Å—è –≤ –¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã (–≤—Ä–µ–º—è)" },
      { text: "ÁøåÂ∫öÂØÖ", type: "mod", explanation: "–≤ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å (–±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è)" },
      { text: "Âëä‰∫é‰∏äÁî≤", type: "space", explanation: "—Å–æ–æ–±—â–∏—Ç—å –í–µ—Ä—Ö–Ω–µ–º—É –¶–∑—è (–∞–¥—Ä–µ—Å–∞—Ç)" },
      { text: "ÁéãÊØãÂÖ•", type: "mod", explanation: "–ø—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Ö–æ–¥–∏—Ç—å (–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å)" },
      { text: "‰∫éÂ§ßÈÇëÂïÜ", type: "space", explanation: "–≤ –í–µ–ª–∏–∫–æ–º –≥–æ—Ä–æ–¥–µ –®–∞–Ω (–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)" },
      { text: "Áîü‰∏ÉÊúà", type: "mod", explanation: "–Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π —Å–µ–¥—å–º–æ–π –º–µ—Å—è—Ü (–±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è)" },
      { text: "‰∫éÊ≤≥Âëä", type: "space", explanation: "—Å–æ–æ–±—â–∏—Ç—å —É —Ä–µ–∫–∏ (–º–µ—Å—Ç–æ)" },
      { text: "ÂºóÂÖ∂‰æÜ", type: "mod", explanation: "–Ω–µ –ø—Ä–∏–¥–µ—Ç (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)" }
    ];

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

    function createSentenceElement(sentence, index) {
      const item = document.createElement('div');
      item.className = 'sentence-item';
      item.dataset.index = index;
      
      item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
          <span class="toggle-text">–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</span>
          <label class="toggle-switch">
            <input type="checkbox">
            <span class="slider"></span>
          </label>
          <span class="toggle-text">–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</span>
        </div>
      `;
      
      return item;
    }

    function init() {
      const shuffled = shuffleArray([...sentences]);
      const column1 = document.getElementById('column1');
      const column2 = document.getElementById('column2');
      
      column1.innerHTML = '';
      column2.innerHTML = '';
      document.getElementById('result').style.display = 'none';
      
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π
      document.querySelectorAll('.sentence-item').forEach(el => {
        el.classList.remove('correct', 'incorrect');
      });

      shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
      });
      
      shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
      });
    }

    function checkAnswers() {
      const items = document.querySelectorAll('.sentence-item');
      let allCorrect = true;
      
      items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "mod") || 
                          (!input.checked && expectedType === "space");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
          item.classList.add('correct');
        } else {
          item.classList.add('incorrect');
          allCorrect = false;
        }
      });
      
      const resultEl = document.getElementById('result');
      if (allCorrect) {
        resultEl.innerHTML = `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—Å–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ.`;
        resultEl.className = 'success';
        sendResult(true);
      } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
      }
      resultEl.style.display = 'block';
    }

    function reset() {
      document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
      });
      document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
      });
      document.getElementById('result').style.display = 'none';
    }

    function sendResult(success) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

    document.getElementById('check-btn').addEventListener('click', checkAnswers);
    document.getElementById('reset-btn').addEventListener('click', reset);
  </script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Â∫ö", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (7-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
  { char: "‰πô", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (2-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
  { char: "Âãø", meaning: "–°–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ: –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º" },
  { char: "ÂÖ•", meaning: "–í—Ö–æ–¥–∏—Ç—å, –≤—Å—Ç—É–ø–∞—Ç—å" },
  { char: "‰∫é", meaning: "–ü—Ä–µ–¥–ª–æ–≥: –≤, –Ω–∞, –∫ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥)" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Ëæõ", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (8-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
  { char: "Â§ß", meaning: "–ë–æ–ª—å—à–æ–π, –≤–µ–ª–∏–∫–∏–π" },
  { char: "ÈÇë", meaning: "–ì–æ—Ä–æ–¥, –ø–æ—Å–µ–ª–µ–Ω–∏–µ" },
  { char: "ÂÖ≠", meaning: "–®–µ—Å—Ç—å; —à–µ—Å—Ç–æ–π" },
  { char: "Êúà", meaning: "–ú–µ—Å—è—Ü; –ª—É–Ω–∞" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Áîü", meaning: "–†–æ–∂–¥–∞—Ç—å—Å—è; –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π (–æ –≤—Ä–µ–º–µ–Ω–∏)" },
  { char: "‰∏É", meaning: "–°–µ–º—å; —Å–µ–¥—å–º–æ–π" },
  { char: "‰πù", meaning: "–î–µ–≤—è—Ç—å; –¥–µ–≤—è—Ç—ã–π" },
  { char: "Ê±Ç", meaning: "–ü—Ä–æ—Å–∏—Ç—å, –º–æ–ª–∏—Ç—å" },
  { char: "Â¶£", meaning: "–£–º–µ—Ä—à–∞—è –º–∞—Ç—å, –ø—Ä–∞—Ä–æ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü–∞" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–°–µ–≥–æ–¥–Ω—è –ø–ª–µ–º—è –ì—É–Ω –ø—Ä–∏—Å–ª–∞–ª–æ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π –≤ –í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Â∑•Êñπ ‚Äî –ø–ª–µ–º—è –ì—É–Ω</li>
      <li>Êù• ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å</li>
      <li>ÁôΩÈ©¨ ‚Äî –±–µ–ª—ã–µ –ª–æ—à–∞–¥–∏</li>
      <li>‰∫é ‚Äî –≤ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)</li>
      <li>Â§ßÈÇëÂïÜ ‚Äî –í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['‰ªä', 'Â∑•', 'Êñπ', 'Êù•', 'ÁôΩ', 'È©¨', '‰∫é', 'Â§ß', 'ÈÇë', 'ÂïÜ'];

    const allChars = [
      '‰ªä', 'Â∑•', 'Êñπ', 'Êù•', 'ÁôΩ', 'È©¨', '‰∫é', 'Â§ß', 'ÈÇë', 'ÂïÜ',
      'Êàë', 'Âèó', 'Á®ª', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'Áéã', 'Âçú', 'Ë≤û',
      'Èõ®', 'ÂÖ∂', '‰∫â', 'Âêâ', 'Áä¨', 'Â≤Å', 'ÂÖ•', 'Âëä', 'Âãø', '‰∏ä'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰ªäÂ∑•ÊñπÊù•ÁôΩÈ©¨‰∫éÂ§ßÈÇëÂïÜ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Êó•", meaning: "–î–µ–Ω—å; —Å–æ–ª–Ω—Ü–µ" },
  { char: "Áøå", meaning: "–°–ª–µ–¥—É—é—â–∏–π, –±—É–¥—É—â–∏–π (–æ –≤—Ä–µ–º–µ–Ω–∏)" },
  { char: "Âëä", meaning: "–°–æ–æ–±—â–∞—Ç—å, –¥–æ–∫–ª–∞–¥—ã–≤–∞—Ç—å" },
  { char: "‰∏≠", meaning: "–°–µ—Ä–µ–¥–∏–Ω–∞; —Å—Ä–µ–¥–Ω–∏–π" },
  { char: "‰∏Å", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (4-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Êàä", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (5-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
  { char: "Â∑•", meaning: "–†–∞–±–æ—Ç–∞; –ø–ª–µ–º—è –ì—É–Ω" },
  { char: "‰∏ä", meaning: "–í–µ—Ä—Ö; –≤–µ—Ä—Ö–Ω–∏–π" },
  { char: "Ê≤≥", meaning: "–†–µ–∫–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –•—É–∞–Ω—Ö—ç)" },
  { char: "Âîê", meaning: "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è: –¢–∞–Ω (–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å)" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Ê±Ç", meaning: "qi√∫" },
  { char: "Â§ß", meaning: "d√†" },
  { char: "Êàä", meaning: "w√π" },
  { char: "‰∫é", meaning: "y√∫" },
  { char: "‰∏É", meaning: "qƒ´" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Áîü", meaning: "shƒìng" },
  { char: "Âîê", meaning: "t√°ng" },
  { char: "‰∏ä", meaning: "sh√†ng" },
  { char: "‰πô", meaning: "y«ê" },
  { char: "Âëä", meaning: "g√†o" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Â∑•", meaning: "g≈çng" },
  { char: "ÂÖ≠", meaning: "li√π" },
  { char: "Êó•", meaning: "r√¨" },
  { char: "Âãø", meaning: "w√π" },
  { char: "Â∫ö", meaning: "gƒìng" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task25.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "‰∏≠", meaning: "zh≈çng" },
  { char: "ÈÇë", meaning: "y√¨" },
  { char: "‰πù", meaning: "ji«î" },
  { char: "Ê≤≥", meaning: "h√©" },
  { char: "ÂÖ•", meaning: "r√π" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task26.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Áøå", meaning: "y√¨" },
  { char: "Êúà", meaning: "yu√®" },
  { char: "‰∏Å", meaning: "dƒ´ng" },
  { char: "Ëæõ", meaning: "xƒ´n" },
  { char: "Â¶£", meaning: "b«ê" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task27.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å –≥–∞–¥–∞—Ç–µ–ª—å –¶–∑—é–π —Å–ø—Ä–æ—Å–∏–ª: –í–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –®–∞–Ω?</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â∫öÂØÖÂçú„±øË≤û ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–∞—á–∞–ª–∞ –≥–∞–¥–∞–Ω–∏—è (–¥–∞—Ç–∞ + –≥–∞–¥–∞—Ç–µ–ª—å)</li>
      <li>ÂÖ•‰∫éÂïÜ ‚Äî ¬´–≤–æ–π—Ç–∏ –≤ –®–∞–Ω¬ª (ÂÖ• = –≤–æ–π—Ç–∏, ‰∫é = –≤)</li>
      <li>Áéã ‚Äî ¬´–ø—Ä–∞–≤–∏—Ç–µ–ª—å¬ª, –ø–æ–¥–ª–µ–∂–∞—â–µ–µ</li>
      <li>‰∫é ‚Äî –ø—Ä–µ–¥–ª–æ–≥, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤, –∫, –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –º–µ—Å—Ç–∞)</li>
      <li>–ü–æ—Ä—è–¥–æ–∫: –¥–∞—Ç–∞ ‚Üí –≥–∞–¥–∞–Ω–∏–µ ‚Üí –≤–æ–ø—Ä–æ—Å –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å –∫–æ—Å–≤–µ–Ω–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –º–µ—Å—Ç–∞</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –¶–µ–ª–µ–≤–∞—è —Ñ—Ä–∞–∑–∞: "–í –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å –≥–∞–¥–∞—Ç–µ–ª—å –¶–∑—é–π —Å–ø—Ä–æ—Å–∏–ª: –≤–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –®–∞–Ω?"
    // –ë–µ–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –∫–∞–∫ –≤ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö
    const expected = ['Â∫ö', 'ÂØÖ', 'Âçú', '„±ø', 'Ë≤û', 'Áéã', 'ÂÖ•', '‰∫é', 'ÂïÜ'];

    // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (–∏–∑ –£—Ä–æ–∫–∞ 3 –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–∫–æ–≤)
    const allChars = [
      'Â∫ö', 'ÂØÖ', 'Âçú', '„±ø', 'Ë≤û', 'Áéã', 'ÂÖ•', '‰∫é', 'ÂïÜ',
      'Ëæõ', '‰∏ë', 'Âãø', 'Â§ß', 'ÈÇë', 'ÂÖ≠', 'Êúà', 'Áîü', '‰∏É', '‰πù',
      'Ê±Ç', 'Â¶£', 'Êó•', 'Áøå', 'Âëä', '‰∏≠', '‰∏Å', 'Êàä', 'Â∑•', '‰∏ä',
      'Ê≤≥', 'Âîê', '‰πô', 'Â∑≥', 'ÂÖ∂', '‰ªä', 'Êù•', 'Áî≤', 'Âçà', 'Â§ß'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∫öÂØÖÂçú„±øË≤ûÁéãÂÖ•‰∫éÂïÜ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task28.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 2</p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –£—Ä–æ–∫–∞ 2 —Å –∫—Ä–∞—Ç–∫–∏–º–∏, —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const wordBank = [
  { char: "Ê±Ç", correct: "–∏—Å–∫–∞—Ç—å, –ø—Ä–æ—Å–∏—Ç—å (—á–∞—Å—Ç–æ —Å ‰∫é ‚Äî –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–æ–º—É-–ª–∏–±–æ)" },
  { char: "Âëä", correct: "—Å–æ–æ–±—â–∞—Ç—å, –¥–æ–∫–ª–∞–¥—ã–≤–∞—Ç—å (—á–∞—Å—Ç–æ —Å ‰∫é ‚Äî –∫–æ–º—É-–ª–∏–±–æ)" },
  { char: "Â§ß", correct: "–≤–µ–ª–∏–∫–∏–π, –±–æ–ª—å—à–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫ –∏–º–µ–Ω–∞–º –ø—Ä–µ–¥–∫–æ–≤, –Ω–∞–ø—Ä. Â§ßÂ∫ö)" },
  { char: "ÈÇë", correct: "–≥–æ—Ä–æ–¥, –ø–æ—Å–µ–ª–µ–Ω–∏–µ (–≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ Â§ßÈÇëÂïÜ ‚Äî –í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω)" },
  { char: "ÂïÜ", correct: "–®–∞–Ω (—Å—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, —Ü–µ–Ω—Ç—Ä —ç–π–∫—É–º–µ–Ω—ã)" },
  { char: "Áøå", correct: "—Å–ª–µ–¥—É—é—â–∏–π, –±—É–¥—É—â–∏–π (—É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è —Å –¥–∞—Ç–∞–º–∏, –Ω–∞–ø—Ä. ÁøåÂ∫öÂØÖ)" },
  { char: "Áîü", correct: "–Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π (–æ –º–µ—Å—è—Ü–µ: Áîü‰∏É ‚Äî –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π —Å–µ–¥—å–º–æ–π –º–µ—Å—è—Ü)" },
  { char: "Êúà", correct: "–º–µ—Å—è—Ü (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–ª–∏ –ø–æ—Ä—è–¥–∫–æ–≤—ã–º: ÂÖ≠Êúà ‚Äî —à–µ—Å—Ç–æ–π –º–µ—Å—è—Ü)" },
  { char: "Êó•", correct: "–¥–µ–Ω—å (–≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª –∏–ª–∏ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏—è—Ö —Å –¥–∞—Ç–∞–º–∏)" },
  { char: "Â¶£", correct: "–ø–æ–∫–æ–π–Ω–∞—è –º–∞—Ç—å, –ø—Ä–µ–¥–æ–∫ –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞" }

    ];

    const allValues = wordBank.map(item => item.correct);

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(wordBank);

      shuffled.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        const options = shuffleArray([...allValues]);

        let selectHTML = `<select id="char_${item.char}">
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      let allFilled = true;
      let correctCount = 0;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      const resultEl = document.getElementById("result");

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ! –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 2.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å/–¥–∞—Ç—å, ‰æÜ ‚Äî –ø—Ä–∏—Ö–æ–¥–∏—Ç—å/–ø—Ä–∏—Å—ã–ª–∞—Ç—å, Âπ¥ ‚Äî —É—Ä–æ–∂–∞–π.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderPairs;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task29.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖ•‰∫éÂïÜÔºü</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖ•‰∫éÂïÜÔºü</h2>
  <p class="instruction">–í –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º ‰∫é. –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ÂÖ•‰∫éÂïÜ?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { 
        value: "enter-shang", 
        text: "–≤–æ–π—Ç–∏ –≤ –®–∞–Ω", 
        correct: true,
        explanation: "ÂÖ•‰∫éÂïÜ ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∫–æ—Å–≤–µ–Ω–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Å—Ç–∞ —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º ‰∫é. –°–º. –£—Ä–æ–∫ 3, 3.1 –∏ 3.2."
      },
      { 
        value: "from-shang", 
        text: "–ø—Ä–∏–π—Ç–∏ –∏–∑ –®–∞–Ω", 
        correct: false,
        explanation: "‰∫é –Ω–µ –≤—ã—Ä–∞–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞. –î–ª—è ¬´–∏–∑¬ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä Ëá™ÂïÜ."
      },
      { 
        value: "about-shang", 
        text: "–≥–æ–≤–æ—Ä–∏—Ç—å –æ –®–∞–Ω–µ", 
        correct: false,
        explanation: "‰∫é –º–æ–∂–µ—Ç –≤—ã—Ä–∞–∂–∞—Ç—å –∞–¥—Ä–µ—Å–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –Ω–µ —Ç–µ–º—É —Ä–µ—á–∏. –≠—Ç–æ –Ω–µ ¬´–æ¬ª, –∞ ¬´–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫¬ª."
      },
      { 
        value: "ruler-enter", 
        text: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–æ–π–¥—ë—Ç", 
        correct: false,
        explanation: "Áéã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. ÂÖ•‰∫éÂïÜ ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ –∏ –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—â–µ–µ."
      }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      const selectedOption = options.find(opt => opt.value === selectedValue);

      if (selectedOption.correct) {
        resultEl.innerHTML = '‚úÖ –í–µ—Ä–Ω–æ!<br>ÂÖ•‰∫éÂïÜ ‚Äî ¬´–≤–æ–π—Ç–∏ –≤ –®–∞–Ω¬ª. –ü—Ä–µ–¥–ª–æ–≥ ‰∫é —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –∫–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç –¥–≤–∏–∂–µ–Ω–∏—è. –°–º. –£—Ä–æ–∫ 3: ‰∫é ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥ (3.1), –∫–æ—Å–≤–µ–Ω–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ (3.2).';
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = `‚ùå –ù–µ—Ç. ${selectedOption.explanation} –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ÂÖ•‰∫éÂïÜ = –≤–æ–π—Ç–∏ –≤ –®–∞–Ω.`;
        resultEl.className = "error";
        sendResult(false);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ: ÂÖ•‰∫éÂïÜ = –≤–æ–π—Ç–∏ –≤ –®–∞–Ω" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖ•‰∫éÂïÜ")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ú—ã –≤—Å—Ç—É–ø–∏–º –≤ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–º –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áîü‰∫åÊúà ‚Äî –≤ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–º –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ</li>
      <li>Êàë ‚Äî –º—ã</li>
      <li>ÂÖ• ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å</li>
      <li>‰∫é ‚Äî –≤ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)</li>
      <li>ÂïÜ ‚Äî –≥–æ—Ä–æ–¥ (–í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Áîü', '‰∫å', 'Êúà', 'Êàë', 'ÂÖ•', '‰∫é', 'ÂïÜ'];

    const allChars = [
      'Áîü', '‰∫å', 'Êúà', 'Êàë', 'ÂÖ•', '‰∫é', 'ÂïÜ',
      '‰ªä', 'Êù•', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë',
      'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'Èõ®', 'Áéã', 'Âç†', 'Êõ∞',
      'Âëä', 'Âãø', 'Ê±Ç', 'ÂÖ≠', '‰∏É', '‰πù', 'Â∫ö', 'ÂØÖ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áîü‰∫åÊúàÊàëÂÖ•‰∫éÂïÜ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task30.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å, –±—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å? –ó–∞—Ç–µ–º, –Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è —Ü–∑–∏-—Å—ã, –º—ã –±—É–¥–µ–º –º–æ–ª–∏—Ç—å –æ –¥–æ–∂–¥–µ.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å</li>
      <li>ÂÖ∂Èõ®Ôºü ‚Äî –±—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å?</li>
      <li>Ëá™‰∏ÅÂ∑≥ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è —Ü–∑–∏-—Å—ã</li>
      <li>ÊàëÊ±Ç ‚Äî –º—ã –±—É–¥–µ–º –º–æ–ª–∏—Ç—å</li>
      <li>ÂÖ∂ ‚Äî —á–∞—Å—Ç–∏—Ü–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –±—É–¥—É—â–µ–µ/–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å (–≤–æ–ø—Ä–æ—Å)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –ò–∑–º–µ–Ω–µ–Ω–æ: –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–æ–º—É, –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é.
    const expected = ['Ëá™', '‰ªä', 'Ëá≥', '‰∫é', 'Áî≤', 'Ëæ∞', 'ÂÖ∂', 'Èõ®', 'Ëá™', '‰∏Å', 'Â∑≥', 'Êàë', 'Ê±Ç'];

    // –ò–∑–º–µ–Ω–µ–Ω–æ: –ü—É–ª –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    const allChars = [
      'Ëá™', '‰ªä', 'Ëá≥', '‰∫é', 'Áî≤', 'Ëæ∞', 'ÂÖ∂', 'Èõ®', '‰∏Å', 'Â∑≥', 'Êàë', 'Ê±Ç',
      'Â£¨', 'ÂØÖ', 'Âçú', '„±ø', 'Ë≤û', 'Âºó', 'Â≠ê', 'ÂïÜ', 'ÁÉñ', 'Âü∫', 'Êñπ', 'Âºó',
      'Êàä', 'Áî≥', 'Áà≠', 'Â∏ù', 'Èôç', 'È¶¨', '‰Ωë', 'Â∑•', 'Ê¥π', '‰Ωú', 'ÈÇë', 'Âêà',
      '‰πô', '‰∫•', '‰æØ', 'Ëôé', 'Âæó', 'Ê±ù', '‰Ωø', '‰∏ç', 'Êúï', 'Áæå', '‰Ωô', 'Âºó'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');


    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ëá™‰ªäËá≥‰∫éÁô∏‰∫•ÁéãÊ±Ç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task31.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥</h2>
  <p class="instruction">–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º. –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ –£—Ä–æ–∫–∞ 4: <em>Ëá™...Ëá≥‰∫é...</em></p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –ö–ª—é—á–µ–≤—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –£—Ä–æ–∫–∞ 4 —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π Ëá™...Ëá≥‰∫é...
    const wordBank = [
      { 
        char: "Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞", 
        correct: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å" 
      },
      { 
        char: "Ëá™‰ªäËá≥‰∫é‰∏ÅÂ∑≥", 
        correct: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º –¥–∏–Ω-—Å—ã" 
      },
      { 
        char: "Ëá™‰∏äÁî≤Ëá≥‰∫é‰∏≠‰∏Å", 
        correct: "–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è –∏ –∫–æ–Ω—á–∞—è –°—Ä–µ–¥–Ω–∏–º –î–∏–Ω–æ–º" 
      },
      { 
        char: "Â£¨ÂØÖËá≥‰∫éÁî≤Ëæ∞", 
        correct: "–æ—Ç –¥–Ω—è –∂—ç–Ω—å-–∏–Ω—å –¥–æ –¥–Ω—è —Ü–∑—è-—á—ç–Ω—å" 
      },
      { 
        char: "Êù•Áî≤Â≠ê", 
        correct: "–≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É –≤ –¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã (—Å–º. Áøå)" 
      }
    ];

    const allValues = wordBank.map(item => item.correct);

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(wordBank);

      shuffled.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        const options = shuffleArray([...allValues]);

        let selectHTML = `<select id="char_${item.char}">
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      let allFilled = true;
      let correctCount = 0;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      const resultEl = document.getElementById("result");

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ! –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é Ëá™...Ëá≥‰∫é... –∏–∑ –£—Ä–æ–∫–∞ 4.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Ëá™ ‚Äî –æ—Ç, —Å; Ëá≥‰∫é ‚Äî –¥–æ; Áøå ‚Äî —Å–ª–µ–¥—É—é—â–∏–π, –±—É–¥—É—â–∏–π.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderPairs;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task32.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞Ôºü</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞Ôºü</h2>
  <p class="instruction">–£—Ä–æ–∫ 4 –ø–æ—Å–≤—è—â–µ–Ω –ø—Ä–µ–¥–ª–æ–≥—É Ëá™ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é... –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { 
        value: "from-now-to-jia-chen", 
        text: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å", 
        correct: true,
        explanation: "–≠—Ç–æ –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é... –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –°–º. –£—Ä–æ–∫ 4, 4.2."
      },
      { 
        value: "from-jia-chen-to-now", 
        text: "–Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è —Ü–∑—è-—á—ç–Ω—å –∏ –∫–æ–Ω—á–∞—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º", 
        correct: false,
        explanation: "–ü–æ—Ä—è–¥–æ–∫ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é... –≤—Å–µ–≥–¥–∞ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ (Ëá™) –∫ –∫–æ–Ω–µ—á–Ω–æ–π (Ëá≥‰∫é). –≠—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–∏."
      },
      { 
        value: "on-jia-chen", 
        text: "–≤ –¥–µ–Ω—å —Ü–∑—è-—á—ç–Ω—å", 
        correct: false,
        explanation: "–û–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞–∫–∞ (Áî≤Ëæ∞) –±—ã–ª–æ –±—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é... –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏."
      },
      { 
        value: "from-shang", 
        text: "–∏–∑ –≥–æ—Ä–æ–¥–∞ –®–∞–Ω", 
        correct: false,
        explanation: "‰∫é –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –º–µ—Å—Ç–æ, –Ω–æ Ëá™ –≤ —ç—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–µ–º—è. ÂÖ•‰∫éÂïÜ ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ, Ëá™‰ªä... ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è."
      }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      const selectedOption = options.find(opt => opt.value === selectedValue);

      if (selectedOption.correct) {
        resultEl.innerHTML = '‚úÖ –í–µ—Ä–Ω–æ!<br>Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞ ‚Äî ¬´–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å¬ª. –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –£—Ä–æ–∫–∞ 4 –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü—Ä–µ–¥–ª–æ–≥ Ëá™ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–∫—É –≤—Ä–µ–º–µ–Ω–∏.';
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = `‚ùå –ù–µ—Ç. ${selectedOption.explanation} –ü—Ä–∞–≤–∏–ª—å–Ω–æ: Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞ = –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ —Ü–∑—è-—á—ç–Ω—å.`;
        resultEl.className = "error";
        sendResult(false);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ: Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞ = –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é...")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–µ —Å–æ–æ–±—â–∞–π –ø—Ä–∞–≤–∏—Ç–µ–ª—é –æ –¥–æ–∂–¥–µ!</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Âãø ‚Äî –Ω–µ (–∑–∞–ø—Ä–µ—Ç)</li>
      <li>Âëä ‚Äî —Å–æ–æ–±—â–∞—Ç—å</li>
      <li>Èõ® ‚Äî –¥–æ–∂–¥—å</li>
      <li>‰∫é ‚Äî –æ, –ø—Ä–∞–≤–∏—Ç–µ–ª—é (–ø—Ä–µ–¥–ª–æ–≥ –¥–ª—è –∞–¥—Ä–µ—Å–∞—Ç–∞)</li>
      <li>Áéã ‚Äî –ø—Ä–∞–≤–∏—Ç–µ–ª—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Âãø', 'Âëä', 'Èõ®', '‰∫é', 'Áéã'];

    const allChars = [
      'Âãø', 'Âëä', 'Èõ®', '‰∫é', 'Áéã',
      '‰ªä', 'Êù•', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë', 'ÂïÜ',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'Ê±Ç', 'ÂÖ≠', 'Êúà', 'ÂÖ•',
      'Áîü', '‰∏É', '‰πù', 'Êó•', 'Áøå', '‰∏≠', '‰∏Å', 'Êàä', '‰∏ä'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂãøÂëäÈõ®‰∫éÁéã';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–Ø –ø–æ–ø—Ä–æ—Å–∏–ª —á—É–º–∏–∑—ã —É –≥–∞–¥–∞—Ç–µ–ª—è. –ì–∞–¥–∞—Ç–µ–ª—å –ø—Ä–∏—à–ª–µ—Ç —á—É–º–∏–∑—É –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Êàë ‚Äî —è</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏—Ç—å</li>
      <li>‰∫é ‚Äî —É (–∞–¥—Ä–µ—Å–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è)</li>
      <li>Âçú ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å</li>
      <li>Êù• ‚Äî –ø—Ä–∏—à–ª–µ—Ç (–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)</li>
      <li>Èªç ‚Äî —á—É–º–∏–∑–∞</li>
      <li>Êù•Â≤Å ‚Äî –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Êàë', 'Ê±Ç', 'Èªç', '‰∫é', 'Âçú', '‰æÜ', 'Ê≠≤', 'Âçú', '‰æÜ', 'Èªç'];

    const allChars = [
      'Êàë', 'Ê±Ç', 'Èªç', '‰∫é', 'Âçú', '‰æÜ', 'Ê≠≤', 'Âçú', '‰æÜ', 'Èªç',
      '‰ªä', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë', 'ÂïÜ', 'ÂÖ•', 'Áéã',
      'Âãø', 'Âëä', 'Èõ®', 'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'ÂÖ≠', 'Êúà', 'Áîü'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÊàëÊ±ÇÈªç‰∫éÂçú„ÄÇ‰æÜÊ≠≤Âçú‰æÜÈªç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ì–∞–¥–∞—Ç–µ–ª—å –ø—Ä–∏—à–ª–µ—Ç –ª–æ—à–∞–¥–µ–π.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>È©¨ ‚Äî –ª–æ—à–∞–¥—å</li>
      <li>Âçú ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å</li>
      <li>Êù• ‚Äî –ø—Ä–∏—à–ª–µ—Ç (–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Âçú', '‰æÜ', 'È©¨'];

    const allChars = [
      'Êàë', 'Ê±Ç', 'Èªç', '‰∫é', 'Âçú', '‰æÜ', 'Ê≠≤', 'Âçú', '‰æÜ', 'Èªç',
      '‰ªä', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë', 'ÂïÜ', 'ÂÖ•', 'Áéã',
      'Âãø', 'Âëä', 'Èõ®', 'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'ÂÖ≠', 'Êúà', 'Áîü'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÊàëÊ±ÇÈªç‰∫éÂçú„ÄÇ‰æÜÊ≠≤Âçú‰æÜÈªç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ÁéãÂãøÂÖ•‰∫éÂïÜ</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Âãø –≤ ¬´ÁéãÂãøÂÖ•‰∫éÂïÜ¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÁéãÂãøÂÖ•‰∫éÂïÜ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w√°ng w√π r√π y√∫ shƒÅng</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
    const options = [
      { text: "–ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω¬ª", correct: false },
      { text: "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω¬ª", correct: true },
      { text: "–ë–µ–∑–ª–∏—á–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–ù–µ –±—É–¥–µ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –®–∞–Ω¬ª", correct: false },
      { text: "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏—Ç –Ω–µ –≤ –®–∞–Ω¬ª", correct: false }
    ];

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ ‚Äî –∑–∞–ø—Ä–µ—Ç –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –∫–∞–∫ \"–Ω–µ —Å–ª–µ–¥—É–µ—Ç\".";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –∞ –º–æ–¥–∞–ª—å–Ω–æ–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(false);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>
</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Âãø –≤ ¬´ÁéãÂãøÂÖ•‰∫éÂïÜ¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÁéãÂãøÂÖ•‰∫éÂïÜ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w√°ng w√π r√π y√∫ shƒÅng</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω (–ø—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è/–∑–∞–ø—Ä–µ—Ç)", correct: true },
      { text: "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω", correct: false },
      { text: "–ù–µ –±—ã–ª–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –®–∞–Ω", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰∫é –≤ ¬´Âëä‰∫éÁéã¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Âëä‰∫éÁéã¬ª ‚Äî —ç—Ç–æ:</strong></p>

<div class="pinyin-container">
  <button class="pinyin-toggle" onclick="...">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
  <div class="pinyin-text">g√†o y√∫ w√°ng</div>
</div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´—Å–æ–æ–±—â–∏—Ç—å –≤ –º–µ—Å—Ç–µ –í–∞–Ω¬ª", correct: false },
    { text: "–ê–¥—Ä–µ—Å–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è: ¬´—Å–æ–æ–±—â–∏—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª—é¬ª", correct: true },
    { text: "–°—Ä–µ–¥—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´—Å –ø–æ–º–æ—â—å—é –í–∞–Ω¬ª", correct: false },
    { text: "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: ¬´–≤ –¥–µ–Ω—å –í–∞–Ω¬ª", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>



==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 4: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ß—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–≥ Ëá™ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π —Å–≤–µ—Ç–∞?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Êúâ‰æÜËâ±Ëá™Ë•ø¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">y«íu l√°i jiƒÅn z√¨ xƒ´</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  // ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è options
  const options = [
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç: ¬´–ë–µ–¥–∞ —É—à–ª–∞ –Ω–∞ –∑–∞–ø–∞–¥¬ª", correct: false },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´–ë–µ–¥–∞ –Ω–∞ –∑–∞–ø–∞–¥–µ¬ª", correct: false },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ¬´–ë–µ–¥–∞ –ø—Ä–∏—à–ª–∞ –° –∑–∞–ø–∞–¥–∞¬ª", correct: true },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–µ–º—è: ¬´–ë–µ–¥–∞ –ø—Ä–∏—à–ª–∞ —Å –∑–∞—Ö–æ–¥–æ–º —Å–æ–ª–Ω—Ü–∞¬ª", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º options
    const container = document.getElementById("answers"); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    if (!container) {
      console.error("–≠–ª–µ–º–µ–Ω—Ç #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct;

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º resultId
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ö–∞–∫–æ–π –æ—Ç—Ç–µ–Ω–æ–∫ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —É –≥–ª–∞–≥–æ–ª–∞ Âëä –≤ –≤–æ–µ–Ω–Ω—ã—Ö –¥–æ–Ω–µ—Å–µ–Ω–∏—è—Ö?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â≠êÂïÜÂëäÊõ∞: ÊòîÁî≤Ëæ∞ÊñπÂæÅ‰∫éËáø¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">Z«ê ShƒÅng g√†o yuƒì: xƒ´ ji«é ch√©n fƒÅng zhƒìng y√∫ ChƒÅ</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  // ‚úÖ –¢–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è options
  const options = [
    { text: "–ú–æ–ª–∏—Ç—å—Å—è, –ø—Ä–æ—Å–∏—Ç—å: ¬´—Ü–∑—ã –®–∞–Ω –º–æ–ª–∏–ª—Å—è¬ª", correct: false },
    { text: "–ü—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å: ¬´—Ü–∑—ã –®–∞–Ω –ø—Ä–∏–∫–∞–∑–∞–ª¬ª", correct: false },
    { text: "–°–ø—Ä–∞—à–∏–≤–∞—Ç—å, –≥–∞–¥–∞—Ç—å: ¬´—Ü–∑—ã –®–∞–Ω —Å–ø—Ä–æ—Å–∏–ª¬ª", correct: false },
    { text: "–î–æ–∫–ª–∞–¥—ã–≤–∞—Ç—å, –¥–æ–Ω–æ—Å–∏—Ç—å: ¬´—Ü–∑—ã –®–∞–Ω –¥–æ–ª–æ–∂–∏–ª¬ª", correct: true }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º options
    const container = document.getElementById("answers"); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    if (!container) {
      console.error("–≠–ª–µ–º–µ–Ω—Ç #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º resultId
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –¥—Ä–µ–≤–Ω—é—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å—á—ë—Ç–∞?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰øò‰∫∫ÂçÅÊúâ‰∫î‰∫∫¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">f√∫ r√©n sh√≠ y√≤u w«î r√©n</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  // ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ options5 ‚Üí options
  const options = [
    { text: "¬´–í–∑—è—Ç–æ –≤ –ø–ª–µ–Ω 15 —á–µ–ª–æ–≤–µ–∫¬ª (10 + 5)", correct: true },
    { text: "¬´–í–∑—è—Ç–æ –≤ –ø–ª–µ–Ω 50 —á–µ–ª–æ–≤–µ–∫¬ª (10 * 5)", correct: false },
    { text: "¬´–í–∑—è—Ç–æ –≤ –ø–ª–µ–Ω 10 –∏–ª–∏ 5 —á–µ–ª–æ–≤–µ–∫¬ª (10 –∏–ª–∏ 5)", correct: false },
    { text: "¬´–í–∑—è—Ç–æ –≤ –ø–ª–µ–Ω 105 —á–µ–ª–æ–≤–µ–∫¬ª (100 + 5)", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º options
    const container = document.getElementById("answers"); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–∞–∂–µ –µ—Å–ª–∏ containerId –∏ optionsArray –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ö–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç —á–∞—Å—Ç–∏—Ü–∞ ‰∫¶ –≤ —Ç–µ–∫—Å—Ç–µ?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â∑•Êñπ‰∫¶‰æµÊàëË•øÈÑôÁî∞¬ª ... ¬´ÂõõÊó•Â∫öÁî≥‰∫¶Êúâ‰æÜËâ±Ëá™Âåó¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">G≈çng fƒÅng y√¨ qƒ´n w«í xƒ´ b«ê ti√°n... s√¨ r√¨ gƒìng shƒìn y√¨ y«íu l√°i jiƒÅn z√¨ bƒõi</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  // ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ options6 ‚Üí options
  const options = [
    { text: "–£—Å–∏–ª–∏–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–ò –ø–ª–µ–º—è –ì—É–Ω —Å–æ–≤—Å–µ–º –Ω–µ –Ω–∞–ø–∞–ª–æ...¬ª", correct: false },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É: ¬´–ò–ª–∏ –ø–ª–µ–º—è –ì—É–Ω –Ω–∞–ø–∞–ª–æ...¬ª", correct: false },
    { text: "–í–≤–æ–¥–∏—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ: ¬´–ü–ª–µ–º—è –ì—É–Ω –∏ –Ω–∞–ø–∞–ª–æ...¬ª", correct: false },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: ¬´–ü–ª–µ–º—è –ì—É–Ω –¢–ê–ö–ñ–ï –Ω–∞–ø–∞–ª–æ...¬ª", correct: true }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º options
    const container = document.getElementById("answers"); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    if (!container) {
      console.error("–≠–ª–µ–º–µ–Ω—Ç #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º resultId
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<title>–£—Ä–æ–∫ 4 ‚Äî –ü—Ä–µ–¥–ª–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>

<div class="grid">
<div class="cell" onclick="openModal('q1')">
<strong>Ëá™‰ªä</strong>
<span class="status" id="status-q1">?</span>
</div>
<div class="cell" onclick="openModal('q2')">
<strong>Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</strong>
<span class="status" id="status-q2">?</span>
</div>
<div class="cell" onclick="openModal('q3')">
<strong>Ëá™‰∏äÁî≤</strong>
<span class="status" id="status-q3">?</span>
</div>
<div class="cell" onclick="openModal('q4')">
<strong>Êó¨Èõ®</strong>
<span class="status" id="status-q4">?</span>
</div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
<div class="modal-content">
<div class="modal-header">Ëá™‰ªä</div>
<div class="pinyin-container">
<button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
<div class="pinyin-text">z√¨ jƒ´n</div>
</div>
<div class="options">
<label><input type="radio" name="q1" value="–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è">–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è</label>
<label><input type="radio" name="q1" value="–¥–æ —Å–µ–≥–æ–¥–Ω—è">–¥–æ —Å–µ–≥–æ–¥–Ω—è</label>
<label><input type="radio" name="q1" value="–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è">–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è</label>
<label><input type="radio" name="q1" value="–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è">–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è</label>
</div>
<button onclick="closeModal('q1')">OK</button>
</div>
</div>

<div id="modal-q2" class="modal">
<div class="modal-content">
<div class="modal-header">Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
<div class="pinyin-container">
<button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
<div class="pinyin-text">z√¨ jƒ´n zh√¨ y√∫ ji«é ch√©n</div>
</div>
<div class="options">
<label><input type="radio" name="q2" value="–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω">–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω</label>
<label><input type="radio" name="q2" value="—Å–µ–≥–æ–¥–Ω—è –∏ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">—Å–µ–≥–æ–¥–Ω—è –∏ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
<label><input type="radio" name="q2" value="–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω">–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω</label>
<label><input type="radio" name="q2" value="—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
</div>
<button onclick="closeModal('q2')">OK</button>
</div>
</div>

<div id="modal-q3" class="modal">
<div class="modal-content">
<div class="modal-header">Ëá™‰∏äÁî≤</div>
<div class="pinyin-container">
<button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
<div class="pinyin-text">z√¨ sh√†ng ji«é</div>
</div>
<div class="options">
<label><input type="radio" name="q3" value="–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
<label><input type="radio" name="q3" value="–ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
<label><input type="radio" name="q3" value="–¥–æ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–¥–æ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
<label><input type="radio" name="q3" value="–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è">–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è</label>
</div>
<button onclick="closeModal('q3')">OK</button>
</div>
</div>

<div id="modal-q4" class="modal">
<div class="modal-content">
<div class="modal-header">Êó¨Èõ®</div>
<div class="pinyin-container">
<button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
<div class="pinyin-text">x√∫n y«î</div>
</div>
<div class="options">
<label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã">–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã</label>
<label><input type="radio" name="q4" value="–¥–æ–∂–¥—å —Å–µ–≥–æ–¥–Ω—è">–¥–æ–∂–¥—å —Å–µ–≥–æ–¥–Ω—è</label>
<label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –≤ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">–¥–æ–∂–¥—å –≤ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
<label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–¥–æ–∂–¥—å –ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
</div>
<button onclick="closeModal('q4')">OK</button>
</div>
</div>

<script>
const correctAnswers = {
q1: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è",
q2: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω",
q3: "–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è",
q4: "–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã"
};

let userAnswers = { q1: null, q2: null, q3: null, q4: null };

function openModal(id) {
document.getElementById(`modal-${id}`).style.display = "flex";
}

function closeModal(id) {
const selected = document.querySelector(`input[name="${id}"]:checked`);
if (selected) {
userAnswers[id] = selected.value;
document.getElementById(`status-${id}`).textContent = "‚úì";
document.getElementById(`status-${id}`).style.color = "green";
}
document.getElementById(`modal-${id}`).style.display = "none";
}

function checkAll() {
const resultEl = document.getElementById("result");
const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

if (!allAnswered) {
resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
return;
}

let correctCount = 0;
for (const id in correctAnswers) {
if (userAnswers[id] === correctAnswers[id]) correctCount++;
}

if (correctCount === 4) {
resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
sendResult(true);
} else {
const wrong = 4 - correctCount;
resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
}
}

function sendResult(success, message) {
window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
}

window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 4</title>

</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 4</h2>

<div class="instructions">
<p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
<p>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –£—Ä–æ–∫–∞ 4.</p>
<p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "Ëá™...Ëá≥‰∫é..." –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è!</em></p>
</div>

<div class="task-container">
<div class="task-title">1. Ëá™‰ªä</div>
<div class="oracle-text">Ëá™‰ªä</div>
<div id="word-pool1" class="word-pool"></div>
<div id="drop-area1" class="drop-area"></div>
<div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
<p>üí° –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç <strong>–ø—Ä–µ–¥–ª–æ–≥ Ëá™</strong> –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ <strong>"–Ω–∞—á–∏–Ω–∞—è —Å"</strong></p>
</div>
</div>

<div class="task-container">
<div class="task-title">2. Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
<div class="oracle-text">Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
<div id="word-pool2" class="word-pool"></div>
<div id="drop-area2" class="drop-area"></div>
<div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
<p>üí° –ó–¥–µ—Å—å –≤–∞–∂–Ω–æ <strong>–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é...</strong> –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫</p>
</div>
</div>

<div class="task-container">
<div class="task-title">3. Ëá™‰∏äÁî≤</div>
<div class="oracle-text">Ëá™‰∏äÁî≤</div>
<div id="word-pool3" class="word-pool"></div>
<div id="drop-area3" class="drop-area"></div>
<div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
<p>üí° –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ <strong>Ëá™</strong> –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å –∏–º–µ–Ω–∞–º–∏ –ø—Ä–µ–¥–∫–æ–≤</p>
</div>
</div>

<div class="task-container">
<div class="task-title">4. Êó¨Èõ®</div>
<div class="oracle-text">Êó¨Èõ®</div>
<div id="word-pool4" class="word-pool"></div>
<div id="drop-area4" class="drop-area"></div>
<div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
<p>üí° –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è <strong>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</strong></p>
</div>
</div>

<div class="controls">
<button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è'],
['–æ—Ç', '—Å–µ–≥–æ–¥–Ω—è', '–∏', '–¥–æ'],
['—Å', '—Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ', '–¥–Ω—è']
];

const expected2 = [
['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω'],
['—Å', '—Å–µ–≥–æ–¥–Ω—è', '–ø–æ', '–¥–µ–Ω—å', '—Ü–∑—è-—á–µ–Ω'],
['–æ—Ç', '—Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ', '–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω']
];

const expected3 = [
['–Ω–∞—á–∏–Ω–∞—è', '—Å', '–í–µ—Ä—Ö–Ω–µ–≥–æ', '–¶–∑—è'],
['—Å', '–í–µ—Ä—Ö–Ω–µ–≥–æ', '–¶–∑—è'],
['–æ—Ç', '–í–µ—Ä—Ö–Ω–µ–≥–æ', '–¶–∑—è', '–∏', '–¥–∞–ª–µ–µ']
];

const expected4 = [
['–¥–æ–∂–¥—å', '–±—É–¥–µ—Ç', '–∏–¥—Ç–∏', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ–∫–∞–¥—ã'],
['–¥–æ–∂–¥—å', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ—Å—è—Ç–∏', '–¥–Ω–µ–π'],
['–¥–æ–∂–¥—å', '–Ω–∞', '–ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏', '–¥–µ–∫–∞–¥—ã']
];

const words1 = ['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è', '–ø–æ—Å–ª–µ', '—Å–µ–π—á–∞—Å', '–≤', '—ç—Ç–æ—Ç', '–¥–µ–Ω—å', '–¥–æ', '–∏–∑', '–ø–æ—Å–ª–µ', '—ç—Ç–æ–≥–æ'];
const words2 = ['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω', '–ø–æ—Å–ª–µ', '—ç—Ç–æ–≥–æ', '–º–µ—Å—è—Ü–∞', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '—ç—Ç–æ–≥–æ', '–≤—Ä–µ–º–µ–Ω–∏'];
const words3 = ['–Ω–∞—á–∏–Ω–∞—è', '—Å', '–í–µ—Ä—Ö–Ω–µ–≥–æ', '–¶–∑—è', '–ø–æ—Å–ª–µ', '—ç—Ç–æ–≥–æ', '–ø—Ä–µ–¥–∫–∞', '–≤', '—ç–ø–æ—Ö—É', '—ç—Ç–æ–≥–æ', '–ø—Ä–∞–≤–∏—Ç–µ–ª—è'];
const words4 = ['–¥–æ–∂–¥—å', '–±—É–¥–µ—Ç', '–∏–¥—Ç–∏', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ–∫–∞–¥—ã', '—Å–µ–π—á–∞—Å', '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ', '—ç—Ç–æ–≥–æ', '–º–µ—Å—è—Ü–∞', '—É—Ç—Ä–æ–º', '–≤–µ—á–µ—Ä–æ–º'];

const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const wordPool3 = document.getElementById('word-pool3');
const wordPool4 = document.getElementById('word-pool4');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const dropArea3 = document.getElementById('drop-area3');
const dropArea4 = document.getElementById('drop-area4');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
function shuffleArray(array) {
const arr = [...array];
for (let i = arr.length - 1; i > 0; i--) {
const j = Math.floor(Math.random() * (i + 1));
[arr[i], arr[j]] = [arr[j], arr[i]];
}
return arr;
}

// –°–æ–∑–¥–∞—ë–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤
function createWordElements(words, pool, dropArea) {
const shuffledWords = shuffleArray(words); // üîÅ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
return shuffledWords.map(word => {
const box = document.createElement('div');
box.className = 'word-box';
box.textContent = word;

box.onclick = () => {
// –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ drop-area
box.remove();
dropArea.appendChild(box);
updatePlaceholder(dropArea); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
};

return box;
});
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å [–ø—É—Å—Ç–æ]
function updatePlaceholder(dropArea) {
const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];
let wordElements3 = [];
let wordElements4 = [];

function init() {
// –û—á–∏—â–∞–µ–º
wordPool1.innerHTML = '';
wordPool2.innerHTML = '';
wordPool3.innerHTML = '';
wordPool4.innerHTML = '';
dropArea1.innerHTML = '';
dropArea2.innerHTML = '';
dropArea3.innerHTML = '';
dropArea4.innerHTML = '';
resultEl.style.display = 'none';

// –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
wordElements1 = createWordElements(words1, wordPool1, dropArea1);
wordElements2 = createWordElements(words2, wordPool2, dropArea2);
wordElements3 = createWordElements(words3, wordPool3, dropArea3);
wordElements4 = createWordElements(words4, wordPool4, dropArea4);

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª—ã
wordElements1.forEach(el => wordPool1.appendChild(el));
wordElements2.forEach(el => wordPool2.appendChild(el));
wordElements3.forEach(el => wordPool3.appendChild(el));
wordElements4.forEach(el => wordPool4.appendChild(el));

// –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
updatePlaceholder(dropArea1);
updatePlaceholder(dropArea2);
updatePlaceholder(dropArea3);
updatePlaceholder(dropArea4);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤ drop-area: –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—É–ª
dropArea1.addEventListener('click', (e) => {
if (e.target.classList.contains('word-box')) {
const wordBox = e.target;
wordBox.remove();
wordPool1.appendChild(wordBox);
updatePlaceholder(dropArea1);
}
});

dropArea2.addEventListener('click', (e) => {
if (e.target.classList.contains('word-box')) {
const wordBox = e.target;
wordBox.remove();
wordPool2.appendChild(wordBox);
updatePlaceholder(dropArea2);
}
});

dropArea3.addEventListener('click', (e) => {
if (e.target.classList.contains('word-box')) {
const wordBox = e.target;
wordBox.remove();
wordPool3.appendChild(wordBox);
updatePlaceholder(dropArea3);
}
});

dropArea4.addEventListener('click', (e) => {
if (e.target.classList.contains('word-box')) {
const wordBox = e.target;
wordBox.remove();
wordPool4.appendChild(wordBox);
updatePlaceholder(dropArea4);
}
});

function getWords(dropArea) {
return Array.from(dropArea.children)
.filter(el => el.classList.contains('word-box'))
.map(el => el.textContent.trim());
}

checkBtn.addEventListener('click', () => {
const current1 = getWords(dropArea1);
const current2 = getWords(dropArea2);
const current3 = getWords(dropArea3);
const current4 = getWords(dropArea4);

const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
const isCorrect2 = expected2.some(option => arraysEqual(current2, option));
const isCorrect3 = expected3.some(option => arraysEqual(current3, option));
const isCorrect4 = expected4.some(option => arraysEqual(current4, option));

if (isCorrect1 && isCorrect2 && isCorrect3 && isCorrect4) {
resultEl.innerHTML = `‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –£—Ä–æ–∫–∞ 4: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "Ëá™...Ëá≥‰∫é..." –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è.`;
resultEl.className = 'message success';
resultEl.style.display = 'block';
sendResult(true);
} else {
let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:';
if (!isCorrect1) message += '<br>‚Ä¢ –í –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏: –ø—Ä–µ–¥–ª–æ–≥ Ëá™ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ "–Ω–∞—á–∏–Ω–∞—è —Å"';
if (!isCorrect2) message += '<br>‚Ä¢ –í–æ –≤—Ç–æ—Ä–æ–º: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é... –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫';
if (!isCorrect3) message += '<br>‚Ä¢ –í —Ç—Ä–µ—Ç—å–µ–º: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Ëá™ —Å –∏–º–µ–Ω–∞–º–∏ –ø—Ä–µ–¥–∫–æ–≤';
if (!isCorrect4) message += '<br>‚Ä¢ –í —á–µ—Ç–≤–µ—Ä—Ç–æ–º: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è (Êó¨)';

resultEl.innerHTML = message;
resultEl.className = 'message error';
resultEl.style.display = 'block';
sendResult(false, message);
}
});

resetBtn.addEventListener('click', init);

function arraysEqual(a, b) {
if (a.length !== b.length) return false;
for (let i = 0; i < a.length; i++) {
if (a[i] !== b[i]) return false;
}
return true;
}

function sendResult(success, message) {
window.parent.postMessage({
type: "TASK_RESULT",
success: !!success,
message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
}, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<title>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ vs –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</title>

</head>
<body>

<h2>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ vs –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</h2>

<div class="instructions">
<div class="instructions-header" onclick="toggleInstructions()">
<strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
<span class="arrow">‚ñº</span>
</div>
<div class="instructions-content" style="display:none">
<p><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ vs –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</strong></p>
<p>–í –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ –¥–≤–∞ —Ç–∏–ø–∞:</p>

<p>üü¢ <strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏</strong> (–∑–µ–ª–µ–Ω—ã–π):</p>
<ul>
<li>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é... (z√¨... zh√¨ y√∫) = "–Ω–∞—á–∏–Ω–∞—è —Å... –∏ –¥–æ..."</li>
<li>–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å <em>"—Å –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?"</em></li>
<li>–í —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</li>
</ul>

<p>üî¥ <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</strong> (–∫—Ä–∞—Å–Ω—ã–π):</p>
<ul>
<li>–û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞–∑—É–µ–º—ã–º</li>
<li>–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å <em>"–∫–∞–∫ –¥–æ–ª–≥–æ?"</em></li>
<li>–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</li>
</ul>

<p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
"Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞" ‚Üí üü¢ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)<br>
"Êó¨Èõ®" ‚Üí üî¥ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)</p>

<p><strong>–í–∞–∂–Ω–æ!</strong><br>
–í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤–µ—Å—å —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä, "Ëá™‰ªäËá≥Â∑±ÈÖâÈõ®" –æ–∑–Ω–∞—á–∞–µ—Ç "–î–æ–∂–¥—å –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –ø–æ –¥–µ–Ω—å —Ü–∑–∏-—é", –∞ –Ω–µ "–î–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤–µ—Å—å —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥".</p>

<p>–í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, "Êó¨Èõ®" –æ–∑–Ω–∞—á–∞–µ—Ç "–î–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã".</p> </div>
</div>


<script>
function toggleInstructions() {
const header = document.querySelector('.instructions-header');
const content = document.querySelector('.instructions-content');
const isHidden = content.style.display === 'none';

content.style.display = isHidden ? 'block' : 'none';
header.classList.toggle('collapsed', !isHidden);

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è iframe (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä)
setTimeout(() => {
window.parent.postMessage({
type: "UPDATE_HEIGHT",
height: document.body.scrollHeight
}, "*");
}, 100);
}
</script>

<div class="columns">
<div id="column1" class="column"></div>
<div id="column2" class="column"></div>
</div>

<div class="controls">
<button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
{ text: "Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "Êó¨Èõ®", type: "duration", explanation: "–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" },
{ text: "Ëá™‰ªäËá≥‰∫éÁô∏‰∫•", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è –≥—É–π-—Ö–∞–π (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "Êó¨‰∫°Á¶ç", type: "duration", explanation: "–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" },
{ text: "Ëá™Â£¨ÂØÖËá≥‰∫éÁî≤Ëæ∞", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è –∂—ç–Ω—å-–∏–Ω—å –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "‰æÜÁî≤Â≠ê", type: "duration", explanation: "–Ω–∞—Å—Ç—É–ø–∞—é—â–∞—è –¥–µ–∫–∞–¥–∞ –¥–æ –¥–Ω—è —Ü–∑—è-—Ü–∑—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" },
{ text: "Ëá™‰∏äÁî≤Ëá≥‰∫é‰∏≠‰∏Å", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è –∏ –¥–æ –°—Ä–µ–¥–Ω–µ–≥–æ –î–∏–Ω (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "‰ªäÂÖ≠Êúà", type: "duration", explanation: "–≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —à–µ—Å—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" },
{ text: "Ëá™‰ªäËá≥‰∫é‰∏ÅÂ∑≥", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è –¥–∏–Ω-—Å—ã (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "Áîü‰∏ÉÊúà", type: "duration", explanation: "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–≥–æ —Å–µ–¥—å–º–æ–≥–æ –º–µ—Å—è—Ü–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" }
];

function shuffleArray(array) {
for (let i = array.length - 1; i > 0; i--) {
const j = Math.floor(Math.random() * (i + 1));
[array[i], array[j]] = [array[j], array[i]];
}
return array;
}

function createSentenceElement(sentence, index) {
const item = document.createElement('div');
item.className = 'sentence-item';
item.dataset.index = index;

item.innerHTML = `
<div class="oracle-text">${sentence.text}</div>
<div class="toggle-container">
<span class="toggle-text">—Ä–∞–º–∫–∏</span>
<label class="toggle-switch">
<input type="checkbox">
<span class="slider"></span>
</label>
<span class="toggle-text">–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</span>
</div>
`;

return item;
}

function init() {
const shuffled = shuffleArray([...sentences]);
const column1 = document.getElementById('column1');
const column2 = document.getElementById('column2');

column1.innerHTML = '';
column2.innerHTML = '';
document.getElementById('result').style.display = 'none';

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π
document.querySelectorAll('.sentence-item').forEach(el => {
el.classList.remove('correct', 'incorrect');
});

shuffled.slice(0, 5).forEach((s, i) => {
const el = createSentenceElement(s, i);
column1.appendChild(el);
});

shuffled.slice(5).forEach((s, i) => {
const el = createSentenceElement(s, i + 5);
column2.appendChild(el);
});
}

function checkAnswers() {
const items = document.querySelectorAll('.sentence-item');
let allCorrect = true;

items.forEach(item => {
const index = item.dataset.index;
const input = item.querySelector('input');
const expectedType = sentences[index].type;
const isCorrect = (input.checked && expectedType === "duration") ||
(!input.checked && expectedType === "time-frame");

item.classList.remove('correct', 'incorrect');
if (isCorrect) {
item.classList.add('correct');
} else {
item.classList.add('incorrect');
allCorrect = false;
}
});

const resultEl = document.getElementById('result');
if (allCorrect) {
resultEl.innerHTML = `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`;
resultEl.className = 'success';
sendResult(true);
} else {
resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
resultEl.className = 'error';
sendResult(false);
}
resultEl.style.display = 'block';
}

function reset() {
document.querySelectorAll('.toggle-switch input').forEach(input => {
input.checked = false;
});
document.querySelectorAll('.sentence-item').forEach(item => {
item.classList.remove('correct', 'incorrect');
});
document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
window.parent.postMessage({
type: "TASK_RESULT",
success: success,
message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
}, "*");
}

window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Ëá™", meaning: "–ü—Ä–µ–¥–ª–æ–≥: –Ω–∞—á–∏–Ω–∞—è —Å, –æ—Ç (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞)" },
      { char: "Ëá≥", meaning: "–î–æ, –ø–æ (–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é...)" },
      { char: "‰ªä", meaning: "–°–µ–≥–æ–¥–Ω—è, –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è" },
      { char: "Áî≤", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (1-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
      { char: "Ëæ∞", meaning: "–ó–µ–º–Ω–æ–π –≤–µ—Ç–≤—å (5-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰∫é", meaning: "–ü—Ä–µ–¥–ª–æ–≥: –≤, –Ω–∞, –∫ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥)" },
      { char: "Â≠ê", meaning: "–¢–∏—Ç—É–ª –≤–æ–∂–¥—è; —Å—ã–Ω" },
      { char: "ÂïÜ", meaning: "–î–∏–Ω–∞—Å—Ç–∏—è –®–∞–Ω" },
      { char: "ÁÉñ", meaning: "–ë–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ" },
      { char: "Âü∫", meaning: "–ü–ª–µ–º—è –¶–∑–∏" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Âºó", meaning: "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ: –Ω–µ (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)" },
      { char: "ÂÖ∂", meaning: "–ß–∞—Å—Ç–∏—Ü–∞ –±—É–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞" },
      { char: "ÁÉñ", meaning: "–ë–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ" },
      { char: "Ë≥Ω", meaning: "–ñ–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ –≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å" },
      { char: "Áéã", meaning: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å, –≤–∞–Ω" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í–∞–Ω –±—É–¥–µ—Ç –º–æ–ª–∏—Ç—å [–æ –¥–æ–∂–¥–µ], –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º –≥—É–π-—Ö–∞–π.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å</li>
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Ëá≥ ‚Äî –¥–æ—Å—Ç–∏–≥–∞—Ç—å, –ø—Ä–∏–±—ã–≤–∞—Ç—å</li>
      <li>‰∫é ‚Äî –¥–æ (—á–∞—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá≥‰∫é)</li>
      <li>Áô∏‰∫• ‚Äî –¥–µ–Ω—å –≥—É–π-—Ö–∞–π (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏)</li>
      <li>Áéã ‚Äî –ø—Ä–∞–≤–∏—Ç–µ–ª—å, –í–∞–Ω</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏—Ç—å, –º–æ–ª–∏—Ç—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Ëá™', '‰ªä', 'Ëá≥', '‰∫é', 'Áô∏', '‰∫•', 'Áéã', 'Ê±Ç'];
    const allChars = [
      'Ëá™', '‰ªä', 'Ëá≥', '‰∫é', 'Áô∏', '‰∫•', 'Áéã', 'Ê±Ç',
      'Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Áî≤', 'Ëæ∞', 'Â≠ê', 'ÂïÜ', 'ÁÉñ', 'Âü∫', 'Êñπ',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'ÂÖ∂', 'Èõ®', 'Áä¨', 'Â≤Å', 'ÂÖ•'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ëá™‰ªäËá≥‰∫éÁô∏‰∫•ÁéãÊ±Ç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰∏ä", meaning: "–í–µ—Ä—Ö–Ω–∏–π (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)" },
      { char: "‰∏Å", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (4-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
      { char: "Êó¨", meaning: "–î–µ–∫–∞–¥–∞ (10-–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥)" },
      { char: "Ê±Ç", meaning: "–ü—Ä–æ—Å–∏—Ç—å, –º–æ–ª–∏—Ç—å (–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏)" },
      { char: "Âç†", meaning: "–ì–∞–¥–∞—Ç—å, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Ëá™", meaning: "z√¨" },
      { char: "Ëá≥", meaning: "zh√¨" },
      { char: "‰ªä", meaning: "jƒ´n" },
      { char: "Áî≤", meaning: "ji«é" },
      { char: "Ëæ∞", meaning: "ch√©n" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰∫é", meaning: "y√∫" },
      { char: "ÂïÜ", meaning: "shƒÅng" },
      { char: "ÁÉñ", meaning: "zƒÅi" },
      { char: "Âü∫", meaning: "jƒ´" },
      { char: "Âºó", meaning: "f√∫" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "ÂÖ∂", meaning: "q√≠" },
      { char: "Ë≥Ω", meaning: "s√†i" },
      { char: "Áéã", meaning: "w√°ng" },
      { char: "‰∏ä", meaning: "sh√†ng" },
      { char: "‰∏Å", meaning: "dƒ´ng" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Êó¨", meaning: "x√∫n" },
      { char: "Ê±Ç", meaning: "qi√∫" },
      { char: "Âç†", meaning: "zhƒÅn" },
      { char: "Â£¨", meaning: "r√©n" },
      { char: "ÂØÖ", meaning: "y√≠n" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ú–æ–ª–∏—Ç—å [–ø—Ä–µ–¥–∫–æ–≤], –Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è –∏ –∫–æ–Ω—á–∞—è –°—Ä–µ–¥–Ω–∏–º –î–∏–Ω–æ–º.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ê±Ç ‚Äî –º–æ–ª–∏—Ç—å, –ø—Ä–æ—Å–∏—Ç—å</li>
      <li>Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å</li>
      <li>‰∏äÁî≤ ‚Äî –í–µ—Ä—Ö–Ω–∏–π –¶–∑—è</li>
      <li>Ëá≥‰∫é ‚Äî –∏ –∫–æ–Ω—á–∞—è</li>
      <li>‰∏≠‰∏Å ‚Äî –°—Ä–µ–¥–Ω–∏–π –î–∏–Ω</li>
      <li>‰∏ä ‚Äî –≤–µ—Ä—Ö–Ω–∏–π</li>
      <li>Áî≤ ‚Äî –¶–∑—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫)</li>
      <li>‰∏≠ ‚Äî —Å—Ä–µ–¥–Ω–∏–π</li>
      <li>‰∏Å ‚Äî –î–∏–Ω (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫)</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Ê±Ç', 'Ëá™', '‰∏ä', 'Áî≤', 'Ëá≥', '‰∫é', '‰∏≠', '‰∏Å'];
    const allChars = [
      'Ê±Ç', 'Ëá™', '‰∏ä', 'Áî≤', 'Ëá≥', '‰∫é', '‰∏≠', '‰∏Å',
      'Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Â≠ê', 'ÂïÜ', 'ÁÉñ', 'Âü∫', 'Êñπ', '‰ªä', '‰∫•',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'ÂÖ∂', 'Èõ®', 'Áä¨', 'Â≤Å', 'ÂÖ•'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ê±ÇËá™‰∏äÁî≤Ëá≥‰∫é‰∏≠‰∏Å';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ë—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑–∏-—é?</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å</li>
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Ëá≥ ‚Äî –¥–æ</li>
      <li>Â∑±ÈÖâ ‚Äî –¥–µ–Ω—å —Ü–∑–∏-—é (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏)</li>
      <li>Èõ® ‚Äî –¥–æ–∂–¥—å</li>
      <li>Ê≥®ÊÑè: ‰∫é –º–æ–∂–µ—Ç –æ–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Ëá™', '‰ªä', 'Ëá≥', 'Â∑±', 'ÈÖâ', 'Èõ®'];
    const allChars = [
      'Ëá™', '‰ªä', 'Ëá≥', 'Â∑±', 'ÈÖâ', 'Èõ®',
      'Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Áî≤', 'Ëæ∞', 'Â≠ê', 'ÂïÜ', 'ÁÉñ', 'Âü∫', 'Êñπ',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'ÂÖ∂', 'Áä¨', 'Â≤Å', 'ÂÖ•', 'Áéã'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ëá™‰ªäËá≥Â∑±ÈÖâÈõ®';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í–∞–Ω –≥–∞–¥–∞–µ—Ç: –±—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—Ü–∑—ã?</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â£¨ÂØÖ ‚Äî –¥–µ–Ω—å –∂—ç–Ω—å-–∏–Ω—å (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏)</li>
      <li>Âçú ‚Äî –≥–∞–¥–∞—Ç—å</li>
      <li>Ë≤û ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞</li>
      <li>Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å</li>
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Ëá≥ ‚Äî –¥–æ</li>
      <li>‰∫é ‚Äî –º–æ–∂–µ—Ç –æ–ø—É—Å–∫–∞—Ç—å—Å—è</li>
      <li>Áî≤Â≠ê ‚Äî –¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏)</li>
      <li>Èõ® ‚Äî –¥–æ–∂–¥—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Ëá™', '‰ªä', 'Ëá≥', 'Áî≤', 'Â≠ê', 'Èõ®'];
    const allChars = [
      'Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Ëá™', '‰ªä', 'Ëá≥', 'Áî≤', 'Â≠ê', 'Èõ®',
      '‰∫é', '‰∏Å', 'Â∑≥', 'Êàë', 'ÁÉñ', 'Ë≥Ω', 'Áéã', 'Âç†', 'Êõ∞', '‰æÜ',
      'Êñπ', 'Ë•ø', 'Êù±', 'Âçó', 'Âåó', '‰∫î', 'ÊØã', 'Â§ö', 'Á§∫', 'Âæå'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â£¨ÂØÖÂçúË≤ûËá™‰ªäËá≥Áî≤Â≠êÈõ®';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ÁéãÂãøÂÖ•‰∫éÂïÜ</title>
</head>
<body>

<h2>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é...?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞Â≠êÂïÜÁÉñÂü∫Êñπ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">z√¨ jƒ´n zh√¨ y√∫ ji«é ch√©n z«ê shƒÅng zƒÅi jƒ´ fƒÅng</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
    const options = [
      { text: "–£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ¬´–°–µ–π—á–∞—Å, –≤ –¥–µ–Ω—å —Ü–∑—è-—á—ç–Ω—å, —Ü–∑—ã –®–∞–Ω –Ω–∞–Ω–µ—Å—ë—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...¬ª", correct: false },
      { text: "–£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ãÃÅ–µ —Ä–∞–º–∫–∏: ¬´–ù–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á—ç–Ω—å, —Ü–∑—ã –®–∞–Ω –Ω–∞–Ω–µ—Å—ë—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...¬ª", correct: true },
      { text: "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Å—Ç: ¬´–ò–∑ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –¶–∑–∏–Ω—å –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç—å –¶–∑—è—á—ç–Ω—å —Ü–∑—ã –®–∞–Ω –Ω–∞–Ω–µ—Å—ë—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...¬ª", correct: false },
      { text: "–£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω—É: ¬´–ò–∑-–∑–∞ –¶–∑–∏–Ω—å –∏ –∏–∑-–∑–∞ –¶–∑—è—á—ç–Ω—å —Ü–∑—ã –®–∞–Ω –Ω–∞–Ω–µ—Å—ë—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...¬ª", correct: false }
    ];

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™ A Ëá≥‰∫é B –∑–∞–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ ¬´–æ—Ç –ê –¥–æ –ë¬ª, ¬´–Ω–∞—á–∏–Ω–∞—è —Å –ê –∏ –∫–æ–Ω—á–∞—è –ë¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è Ëá™...Ëá≥‰∫é... ‚Äî –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (–≤—Ä–µ–º—è –∏–ª–∏ –º–µ—Å—Ç–æ), –∞ –Ω–µ –º–æ–º–µ–Ω—Ç, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É.";
        sendResult(false);
      }
    }


    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>
</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ÁéãÂãøÂÖ•‰∫éÂïÜ</title>
</head>
<body>

<h2>–ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø—Ä–µ–¥–ª–æ–≥ Ëá™ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Ëá™‰ªäÂ£¨ÂØÖËá≥‰∫éÁî≤Ëæ∞Â≠êÂïÜÁÉñÂü∫Êñπ¬ª ‚Äî —á—Ç–æ –¥–µ–ª–∞–µ—Ç Ëá™?</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">z√¨ jƒ´n r√©n y√≠n zh√¨ y√∫ ji«é ch√©n z«ê shƒÅng zƒÅi jƒ´ fƒÅng</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
    const options = [
      { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è ¬´–∏–∑¬ª –∏–ª–∏ ¬´–æ—Ç¬ª", correct: false },
      { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ ¬´—Å¬ª, ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª", correct: true },
      { text: "–£—Å–∏–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ –Ω–∏–º —Å–ª–æ–≤–∞ (¬´—Å–∞–º¬ª, ¬´–ª–∏—á–Ω–æ¬ª)", correct: false },
      { text: "–Ø–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä–º–æ–π –≥–ª–∞–≥–æ–ª–∞ ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å¬ª", correct: false }
    ];
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! –í —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ãÃÅ–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (‰ªä, Â£¨ÂØÖ) Ëá™ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–≥ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º ¬´—Å¬ª, ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –•–æ—Ç—è Ëá™ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å ¬´—Å–∞–º¬ª –∏–ª–∏ ¬´–∏–∑¬ª, –∑–¥–µ—Å—å, –ø–µ—Ä–µ–¥ —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–≥, –∑–∞–¥–∞—é—â–∏–π –Ω–∞—á–∞–ª–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.";
        sendResult(false);
      }
    }


    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>
</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á–∞—Å—Ç–∏—Ü–∞ ÂÖÅ –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂÖÅÊúâ‰æÜËâ±Ëá™Ë•ø¬ª</strong></p>
<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">y«în y«íu l√°i jiƒÅn z√¨ xƒ´</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { text: "–£—Å–ª–æ–≤–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞: ¬´–ï—Å–ª–∏ –±—ã –ø—Ä–∏—à–ª–∞ –±–µ–¥–∞ —Å –∑–∞–ø–∞–¥–∞...¬ª", correct: false },
    { text: "–ß–∞—Å—Ç–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ¬´–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∞ –±–µ–¥–∞ —Å –∑–∞–ø–∞–¥–∞¬ª", correct: true },
    { text: "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞: ¬´–ù–µ –ø—Ä–∏—à–ª–∞ –±–µ–¥–∞ —Å –∑–∞–ø–∞–¥–∞¬ª", correct: false },
    { text: "–í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞: ¬´–ü—Ä–∏—à–ª–∞ –ª–∏ –±–µ–¥–∞ —Å –∑–∞–ø–∞–¥–∞?¬ª", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    const container = document.getElementById("answers"); // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct;

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ Êúâ‰æÜËâ±?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Ê¥óÈúáÂëäÊõ∞: ...Â∑•Êñπ‰∫¶‰æµÊàëË•øÈÑôÁî∞„ÄÇÂõõÊó•Â∫öÁî≥‰∫¶Êúâ‰æÜËâ±Ëá™Âåó¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">X«ê Zh√®n g√†o yuƒì: ... G≈çng fƒÅng y√¨ qƒ´n w«í xƒ´ b«ê ti√°n. s√¨ r√¨ gƒìng shƒìn y√¨ y«íu l√°i jiƒÅn z√¨ bƒõi</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { text: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ: ¬´–ü—Ä–∏—à–ª–∞ –≤–µ—Å—Ç—å –æ –ø–æ–±–µ–¥–µ¬ª", correct: false },
    { text: "–§–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–æ–Ω–µ—Å–µ–Ω–∏–µ: ¬´–ü–æ—Å—Ç—É–ø–∏–ª –¥–æ–∫–ª–∞–¥¬ª", correct: false },
    { text: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–µ–¥–µ: ¬´(–ö–æ –º–Ω–µ) –ø—Ä–∏—à–ª–∞ –±–µ–¥–∞¬ª", correct: true },
    { text: "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–¥—ã: ¬´–ë—É–¥–µ—Ç –±–µ–¥–∞¬ª", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers"); // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: answers
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct;

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: containerId –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ resultId ‚Äî –Ω—É–∂–µ–Ω
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>



==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 5: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ‰æØËôé‰ΩôÂÖ∂ÂæóÊ±ù</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´‰æØËôé‰ΩôÂÖ∂ÂæóÊ±ù¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">H√≥u H«î y√∫ q√≠ d√© r«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "–•–æ—É –•—É, —è –ø–æ–ª—É—á—É —Ç–µ–±—è (–≤ –∂—ë–Ω—ã)", correct: true },
      { text: "–•–æ—É –•—É, —Ç—ã –ø–æ–ª—É—á–∏—à—å –º–µ–Ω—è", correct: false },
      { text: "–Ø –æ—Ç–¥–∞–º —Ç–µ–±—è –•–æ—É –•—É", correct: false },
      { text: "–•–æ—É –•—É, —è –Ω–µ –ø–æ–ª—É—á—É —Ç–µ–±—è", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Â∏ùÂÖ∂‰ΩúÁéãÁ•∏</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –≥–ª–∞–≥–æ–ª —Ç—Ä–µ–±—É–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â∏ùÂÖ∂‰ΩúÁéãÁ•∏¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">D√¨ q√≠ zu√≤ w√°ng hu√≤</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "‰Ωú (zu√≤) ‚Äî –ø—Ä–∏—á–∏–Ω—è—Ç—å, —Å–æ–∑–¥–∞–≤–∞—Ç—å", correct: true },
      { text: "Ê±Ç (qi√∫) ‚Äî –ø—Ä–æ—Å–∏—Ç—å", correct: false },
      { text: "Ëá≥ (zh√¨) ‚Äî –¥–æ—Å—Ç–∏–≥–∞—Ç—å", correct: false },
      { text: "Âçú (b«î) ‚Äî –≥–∞–¥–∞—Ç—å", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 5: –ì–∞–¥–∞–Ω–∏—è –æ –ø–æ–º–æ—â–∏ –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –∏–Ω–≤–µ—Ä—Å–∏—é –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â∏ù‰∏çÊàëÈôçÁÜØ¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">d√¨ b√π w«í ji√†ng h√†n</div>
</div>

<p>–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É¬ª ‚Äî –≤–µ—Ä–Ω–æ: –∏–Ω–≤–µ—Ä—Å–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´Êàë¬ª –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏", correct: true },
    { text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É –∏–º¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ¬´Êàë¬ª –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ ¬´–Ω–∏–º¬ª, –∞ –Ω–µ –∫ ¬´–Ω–∞–º¬ª", correct: false },
    { text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –º—ã –ø–æ—à–ª—ë–º –∑–∞—Å—É—Ö—É¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: —ç—Ç–æ –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞, –Ω–∞—Ä—É—à–µ–Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞", correct: false },
    { text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É¬ª ‚Äî –≤–µ—Ä–Ω–æ, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–æ–ª—å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´Êàë¬ª", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω–≤–µ—Ä—Å–∏–∏ –±–µ—Å–ø—Ä–µ–¥–ª–æ–∂–Ω–æ–≥–æ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´Êàë¬ª –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: ¬´Â∏ù‰∏çÊàëÈôçÁÜØ¬ª = ¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É¬ª.";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ: –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º, —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 5: –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–ª–∞</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´Â∏ù‰∏çÊàëÂÖ∂Âèó‰Ωë¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´Â∏ù‰∏çÊàëÂÖ∂Âèó‰Ωë¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">d√¨ b√π w«í q√≠ sh√≤u y√≤u</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –£—Ä–æ–∫–∞ 5. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å¬ª ‚Äî –≤–µ—Ä–Ω–æ: –∑–¥–µ—Å—å –∏–Ω–≤–µ—Ä—Å–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è ¬´Êàë¬ª –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏, –∞ ¬´Âèó‰Ωë¬ª ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ —Å –¥–≤–æ–π–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º (–∫–æ–º—É? —á—Ç–æ?)", 
      correct: true 
    },
    { 
      text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â—å –∏–º¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Êàë¬ª –Ω–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å ¬´–∏—Ö¬ª, —ç—Ç–æ 1-–µ –ª–∏—Ü–æ", 
      correct: false 
    },
    { 
      text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –º—ã –ø–æ–ª—É—á–∏–º –ø–æ–º–æ—â—å¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –Ω–∞—Ä—É—à–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", 
      correct: false 
    },
    { 
      text: "¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â—å¬ª ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫—É: ¬´Êàë¬ª –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –ø–æ—Å–ª–µ ¬´‰∏ç¬ª –±–µ–∑ –∏–Ω–≤–µ—Ä—Å–∏–∏", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º –£—Ä–æ–∫–∞ 5:<br>
        ‚Ä¢ <strong>–ü—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ ¬´Âèó‰Ωë¬ª</strong> —Ç—Ä–µ–±—É–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å –∫–æ–º—É?¬ª (–∫–æ—Å–≤–µ–Ω–Ω–æ–µ) –∏ ¬´—á—Ç–æ?¬ª (–ø—Ä—è–º–æ–µ).<br>
        ‚Ä¢ <strong>–ò–Ω–≤–µ—Ä—Å–∏—è ¬´‰∏çÊàëÂèó‰Ωë¬ª</strong> ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º.<br>
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ <strong>„ÄåÊàë„Äç</strong> –∫–∞–∫ –∫–æ—Å–≤–µ–Ω–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ä–µ—Ü–∏–ø–∏–µ–Ω—Ç) –±–µ–∑ –ø—Ä–µ–¥–ª–æ–≥–∞ ‚Äî –Ω–æ—Ä–º–∞ –¥–ª—è —Ç–∞–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.<br><br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –í—Å–ø–æ–º–Ω–∏—Ç–µ: –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≥–ª–∞–≥–æ–ª—É ¬´–¥–∞—Ç—å/–ø–æ—Å–ª–∞—Ç—å¬ª —Å—Ç–∞–≤–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 5 ‚Äî –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —Å—É–¥—å–±—ã</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>Â∏ù‰∏çÊàëÈôçÁÜØ</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>‰ΩôÂÖ∂ÂæóÊ±ù</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>Êúï‰Ωø</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>Â∏ùÂèóÊàë‰Ωë</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">Â∏ù‰∏çÊàëÈôçÁÜØ</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">d√¨ b√π w«í ji√†ng h√†n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É</label>
            <label><input type="radio" name="q1" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –º—ã –ø–æ—à–ª—ë–º –∑–∞—Å—É—Ö—É">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –º—ã –ø–æ—à–ª—ë–º –∑–∞—Å—É—Ö—É</label>
            <label><input type="radio" name="q1" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É –∏–º">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É –∏–º</label>
            <label><input type="radio" name="q1" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –∑–∞—Å—É—Ö—É</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰ΩôÂÖ∂ÂæóÊ±ù</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y√∫ q√≠ d√© r«î</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–Ø –ø–æ–ª—É—á—É —Ç–µ–±—è (—Ç–≤–æ—é –ø–æ–º–æ—â—å)">–Ø –ø–æ–ª—É—á—É —Ç–µ–±—è (—Ç–≤–æ—é –ø–æ–º–æ—â—å)</label>
            <label><input type="radio" name="q2" value="–Ø –ø–æ–ª—É—á—É –µ–≥–æ">–Ø –ø–æ–ª—É—á—É –µ–≥–æ</label>
            <label><input type="radio" name="q2" value="–ú—ã –ø–æ–ª—É—á–∏–º –≤–∞—Å">–ú—ã –ø–æ–ª—É—á–∏–º –≤–∞—Å</label>
            <label><input type="radio" name="q2" value="–Ø –¥–∞–º —Ç–µ–±–µ">–Ø –¥–∞–º —Ç–µ–±–µ</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">Êúï‰Ωø</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">zh√®n sh«ê</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫">–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫</label>
            <label><input type="radio" name="q3" value="—è –ø–æ—à–ª—é">—è –ø–æ—à–ª—é</label>
            <label><input type="radio" name="q3" value="—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫">—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫</label>
            <label><input type="radio" name="q3" value="–º—ã –ø–æ—à–ª—ë–º">–º—ã –ø–æ—à–ª—ë–º</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">Â∏ùÂèóÊàë‰Ωë</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">d√¨ sh√≤u w«í y√≤u</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å</label>
            <label><input type="radio" name="q4" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–ª—É—á–∏—Ç –Ω–∞—à—É –ø–æ–º–æ—â—å">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–ª—É—á–∏—Ç –Ω–∞—à—É –ø–æ–º–æ—â—å</label>
            <label><input type="radio" name="q4" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â–∏">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â–∏</label>
            <label><input type="radio" name="q4" value="–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ">–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É",
        q2: "–Ø –ø–æ–ª—É—á—É —Ç–µ–±—è (—Ç–≤–æ—é –ø–æ–º–æ—â—å)",
        q3: "–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫",
        q4: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 5:<br>
                ‚Ä¢ –ò–Ω–≤–µ—Ä—Å–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏ (‰∏çÊàëÈôçÁÜØ)<br>
                ‚Ä¢ –î–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (Âèó‰Ωë)<br>
                ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π (‰Ωô ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ, Êúï ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)<br>
                ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (Â∏ù)
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 5</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 5</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –£—Ä–æ–∫–∞ 5.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–Ω–≤–µ—Ä—Å–∏—é, –¥–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. Â∏ù‰∏çÊàëÈôçÁÜØ</div>
    <div class="oracle-text">Â∏ù‰∏çÊàëÈôçÁÜØ</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° –ó–¥–µ—Å—å –≤–∞–∂–Ω–æ: <strong>–∏–Ω–≤–µ—Ä—Å–∏—è ¬´Êàë¬ª</strong> –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. Â∏ùÂèóÊàë‰Ωë</div>
    <div class="oracle-text">Â∏ùÂèóÊàë‰Ωë</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: <strong>–¥–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</strong> ‚Äî –∫–æ–º—É? —á—Ç–æ?</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">3. ‰ΩôÂÖ∂ÂæóÊ±ù</div>
    <div class="oracle-text">‰ΩôÂÖ∂ÂæóÊ±ù</div>
    <div id="word-pool3" class="word-pool"></div>
    <div id="drop-area3" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° –ü–æ–º–Ω–∏—Ç–µ: <strong>„Äå‰Ωô„Äç</strong> ‚Äî 1-–µ –ª–∏—Ü–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">4. Êúï‰Ωø</div>
    <div class="oracle-text">Êúï‰Ωø</div>
    <div id="word-pool4" class="word-pool"></div>
    <div id="drop-area4" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° –í–∞–∂–Ω–æ: <strong>„ÄåÊúï„Äç</strong> —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–Ω–µ', '–ø–æ—Å–ª–∞–ª', '–Ω–∞–º', '–∑–∞—Å—É—Ö—É'],
    ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–Ω–µ', '–ø–æ—Å–ª–∞–ª', '–∑–∞—Å—É—Ö—É', '–Ω–∞–º'],
    ['–Ω–µ', '–ø–æ—Å–ª–∞–ª', '–Ω–∞–º', '–∑–∞—Å—É—Ö—É', '–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞']
];

const expected2 = [
    ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–ø–æ—à–ª—ë—Ç', '–Ω–∞–º', '–ø–æ–º–æ—â—å'],
    ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–Ω–∏—Å–ø–æ—à–ª—ë—Ç', '–Ω–∞–º', '–ø–æ–º–æ—â—å'],
    ['–Ω–∞–º', '–ø–æ–º–æ—â—å', '–ø–æ—à–ª—ë—Ç', '–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞']
];

const expected3 = [
    ['–Ø', '–ø–æ–ª—É—á—É', '—Ç–µ–±—è'],
    ['—Ç—ã', '–±—É–¥–µ—à—å', '–ø–æ–ª—É—á–µ–Ω', '–º–Ω–æ–π'],
    ['–Ø', '–ø–æ–ª—É—á—É', '—Ç–≤–æ—é', '–ø–æ–º–æ—â—å']
];

const expected4 = [
    ['–º–æ–π', '–ø–æ—Å–ª–∞–Ω–Ω–∏–∫'],
    ['–º–æ–π', '–µ–º–∏—Å—Å–∞—Ä'],
    ['–ø–æ—Å–ª–∞–Ω–Ω–∏–∫', '–º–æ–π']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–Ω–µ', '–ø–æ—Å–ª–∞–ª', '–Ω–∞–º', '–∑–∞—Å—É—Ö—É', '–∏—Ö', '–µ–º—É', '–æ–Ω', '–ø–æ—Å–ª–∞–ª', '–¥–æ–∂–¥—å', '–≤—á–µ—Ä–∞'];
const words2 = ['–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞', '–ø–æ—à–ª—ë—Ç', '–Ω–∞–º', '–ø–æ–º–æ—â—å', '–∏–º', '—É—Ä–æ–∂–∞–π', '–≤–ª–∞—Å—Ç—å', '–º–∏—Ä', '–ø–æ–º–æ—â—å', '–ø–æ—Å–ª–∞–ª', '–≤—á–µ—Ä–∞'];
const words3 = ['–Ø', '–ø–æ–ª—É—á—É', '—Ç–µ–±—è', '–µ–≥–æ', '–≤–∞—Å', '–≤–ª–∞—Å—Ç—å', '–ø–æ–º–æ—â—å', '–º—ã', '—Ç—ã', '–æ–Ω', '–ø–æ–ª—É—á–∏–ª', '–º–µ–Ω—è'];
const words4 = ['–º–æ–π', '–ø–æ—Å–ª–∞–Ω–Ω–∏–∫', '—Ç–≤–æ–π', '–µ–º–∏—Å—Å–∞—Ä', '–æ–Ω', '–µ–º—É', '–Ω–∞—à', '–æ–Ω–∏', '–≥–æ—Å—Ç—å', '–≤–æ–∏–Ω', '—Å–ª—É–≥–∞'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const wordPool3 = document.getElementById('word-pool3');
const wordPool4 = document.getElementById('word-pool4');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const dropArea3 = document.getElementById('drop-area3');
const dropArea4 = document.getElementById('drop-area4');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];
let wordElements3 = [];
let wordElements4 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2, wordPool3, wordPool4].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2, dropArea3, dropArea4].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);
    wordElements3 = createWordElements(words3, wordPool3, dropArea3);
    wordElements4 = createWordElements(words4, wordPool4, dropArea4);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));
    wordElements3.forEach(el => wordPool3.appendChild(el));
    wordElements4.forEach(el => wordPool4.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2, dropArea3, dropArea4].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2, dropArea3, dropArea4].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2, wordPool3, wordPool4][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);
    const current3 = getWords(dropArea3);
    const current4 = getWords(dropArea4);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option));
    const isCorrect3 = expected3.some(option => arraysEqual(current3, option));
    const isCorrect4 = expected4.some(option => arraysEqual(current4, option));

    if (isCorrect1 && isCorrect2 && isCorrect3 && isCorrect4) {
        resultEl.innerHTML = `
            ‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ <strong>–ò–Ω–≤–µ—Ä—Å–∏—è –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏</strong> (‰∏çÊàëÈôçÁÜØ)<br>
            ‚Ä¢ <strong>–î–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</strong> (ÂèóÊàë‰Ωë)<br>
            ‚Ä¢ <strong>–§—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π</strong> (‰Ωô, Êúï)<br>
            ‚Ä¢ <strong>–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ</strong> (Â∏ù)
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:';
        if (!isCorrect1) message += '<br>‚Ä¢ –ò–Ω–≤–µ—Ä—Å–∏—è ¬´Êàë¬ª –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏: ¬´–Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º¬ª';
        if (!isCorrect2) message += '<br>‚Ä¢ –î–≤–æ–π–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ¬´–Ω–∞–º –ø–æ–º–æ—â—å¬ª';
        if (!isCorrect3) message += '<br>‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ¬´‰Ωô¬ª ‚Äî 1-–µ –ª–∏—Ü–æ, –ø–æ–¥–ª–µ–∂–∞—â–µ–µ';
        if (!isCorrect4) message += '<br>‚Ä¢ ¬´Êúï¬ª ‚Äî —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω–µ –ø–æ–¥–ª–µ–∂–∞—â–µ–µ';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–ò–Ω–≤–µ—Ä—Å–∏—è vs –ü—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫: –£—Ä–æ–∫ 5</title>
</head>
<body>

<h2>–ò–Ω–≤–µ—Ä—Å–∏—è vs –ü—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>–ò–Ω–≤–µ—Ä—Å–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –∫–∏—Ç–∞–π—Å–∫–æ–º</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ—Å–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Å–æ–±–µ–Ω–Ω–æ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è) –º–æ–≥—É—Ç —Å—Ç–æ—è—Ç—å –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º ‚Äî —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <strong>–∏–Ω–≤–µ—Ä—Å–∏–µ–π</strong>.</p>

        <p>üü¢ <strong>–ü—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫</strong> (–∑–µ–ª–µ–Ω—ã–π):</p>
        <ul>
            <li>–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ –≥–ª–∞–≥–æ–ª–∞: ¬´ÂèóÊàë‰Ωë¬ª ‚Äî ¬´–ø–æ—Å–ª–∞—Ç—å –Ω–∞–º –ø–æ–º–æ—â—å¬ª</li>
            <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö</li>
        </ul>

        <p>üî¥ <strong>–ò–Ω–≤–µ—Ä—Å–∏—è</strong> (–∫—Ä–∞—Å–Ω—ã–π):</p>
        <ul>
            <li>–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (—á–∞—â–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ) —Å—Ç–æ–∏—Ç <strong>–ø–µ—Ä–µ–¥</strong> –≥–ª–∞–≥–æ–ª–æ–º: ¬´‰∏çÊàëÂèó‰Ωë¬ª ‚Äî ¬´–Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â–∏¬ª</li>
            <li>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ <strong>–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö</strong> —Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º</li>
            <li>–¢–æ–ª—å–∫–æ —Å –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ–º <strong>‰∏ç</strong>, –∞ –Ω–µ Âºó</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "Â∏ùÂèóÊàë‰Ωë" ‚Üí üü¢ (–ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫)<br>
        "Â∏ù‰∏çÊàëÂèó‰Ωë" ‚Üí üî¥ (–∏–Ω–≤–µ—Ä—Å–∏—è)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –ò–Ω–≤–µ—Ä—Å–∏—è <strong>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞</strong>, –µ—Å–ª–∏:
        <ol>
            <li>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ</li>
            <li>–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ</li>
            <li>–ì–ª–∞–≥–æ–ª —Ç—Ä–µ–±—É–µ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (Âèó, Èôç, ‰Ωú –∏ –¥—Ä.)</li>
        </ol>
        –ù–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Â∏ùÂèóÊàë‰Ωë", type: "direct", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å ‚Äî –ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" },
    { text: "Â∏ù‰∏çÊàëÂèó‰Ωë", type: "inversion", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â–∏ ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏ —Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º" },
    { text: "Â∏ùÈôçÊàëÁÜØ", type: "direct", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" },
    { text: "Â∏ù‰∏çÊàëÈôçÁÜØ", type: "inversion", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –∑–∞—Å—É—Ö—É ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" },
    { text: "Ê¥π‰ΩúÂÖπÈÇëÁ•∏", type: "direct", explanation: "–†–µ–∫–∞ –•—É–∞–Ω—å –Ω–∞–Ω–µ—Å—ë—Ç –Ω–µ—Å—á–∞—Å—Ç—å–µ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É ‚Äî –ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫" },
    { text: "Ê¥πÂºó‰ΩúÂÖπÈÇëÁ•∏", type: "direct", explanation: "–†–µ–∫–∞ –•—É–∞–Ω—å –Ω–µ –Ω–∞–Ω–µ—Å—ë—Ç –Ω–µ—Å—á–∞—Å—Ç—å–µ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É ‚Äî –∑–¥–µ—Å—å Âºó, –Ω–æ –Ω–µ—Ç –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è, –∏–Ω–≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" },
    { text: "Â∏ù‰∏çÊàëÂÖ∂Âèó‰Ωë", type: "inversion", explanation: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ª–∏ –Ω–∞–º –ø–æ–º–æ—â–∏? ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–∞–∂–µ —Å —á–∞—Å—Ç–∏—Ü–µ–π ÂÖ∂" },
    { text: "‰ΩôÂÖ∂ÂæóÊ±ù", type: "direct", explanation: "–Ø –ø–æ–ª—É—á—É —Ç–µ–±—è ‚Äî –ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è" },
    { text: "‰Ωô‰∏çÂÖ∂ÂæóÊ±ù", type: "inversion", explanation: "–Ø –Ω–µ –ø–æ–ª—É—á—É –ª–∏ —Ç–µ–±—è? ‚Äî –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ + –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ‚Üí –∏–Ω–≤–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞" },
    { text: "Êúï‰Ωø", type: "direct", explanation: "–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫ ‚Äî –∑–¥–µ—Å—å Êúï –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">–ø—Ä—è–º–æ–π</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">–∏–Ω–≤–µ—Ä—Å–∏—è</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "inversion") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –∏–Ω–≤–µ—Ä—Å–∏–∏.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: –∏–Ω–≤–µ—Ä—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è—Ö —Å –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º, –¥–∞–∂–µ —Å —á–∞—Å—Ç–∏—Ü–µ–π ÂÖ∂, –∏ —Ç–æ–ª—å–∫–æ —Å ‰∏ç.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 5</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 5 ‚Äî –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Â∏ù", meaning: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ ‚Äî –≤—ã—Å—à–µ–µ –±–æ–∂–µ—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç —É—Ä–æ–∂–∞–π, –ø–æ–±–µ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è" },
  { char: "ÁÜØ", meaning: "–∏—Å—Å—É—à–∏—Ç—å, –≤—ã–∑–≤–∞—Ç—å –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∂–¥—é" },
  { char: "Áî≥", meaning: "–∑–∞—è—Ü (–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å); —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–∑–∞—è–≤–ª—è—Ç—å, –æ–±—ä—è–≤–ª—è—Ç—å'" },
  { char: "Èôç", meaning: "–ø–æ—Å–ª–∞—Ç—å (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–∞—Ç—å –∑–∞—Å—É—Ö—É¬ª" },
  { char: "‰ºê", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä, –Ω–∞–ø–∞—Å—Ç—å ‚Äî –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "‰Ωë", meaning: "–ø–æ–º–æ—â—å, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏; –≤ –≥–ª–∞–≥–æ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ¬´Âèó‰Ωë¬ª ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å¬ª" },
  { char: "Ê¥π", meaning: "—Ä–µ–∫–∞ –•—É–∞–Ω—å ‚Äî –ø—Ä–∏—Ç–æ–∫ –•—É–∞–Ω—Ö—ç, —É–≥—Ä–æ–∂–∞–≤—à–∞—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–æ–ª–∏—Ü–µ –®–∞–Ω" },
  { char: "‰Ωú", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω–∏—Ç—å (–≤—Ä–µ–¥) ‚Äî —á–∞—Å—Ç–æ —Å ¬´Á•∏¬ª: ¬´‰ΩúÁ•∏¬ª = ¬´–Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª" },
  { char: "Ëå≤", meaning: "—ç—Ç–æ—Ç, –∑–¥–µ—Å—å ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Å–∏–Ω–æ–Ω–∏–º ¬´‰ªä¬ª" },
  { char: "Á¶ç", meaning: "–±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–µ–∫–æ–π, –ø–ª–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –±–æ–∂–µ—Å—Ç–≤–æ–º" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰Ωô", meaning: "—è (1-–µ –ª–∏—Ü–æ) ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ; –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∏ '–º—ã'" },
  { char: "Âæó", meaning: "–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–µ—Å—Ç–∏ ‚Äî —á–∞—Å—Ç–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ '—É–¥–∞—Å—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∏—Ç—å'" },
  { char: "Ê±ù", meaning: "—Ç—ã (2-–µ –ª–∏—Ü–æ) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º" },
  { char: "‰Ωø", meaning: "–ø–æ—Å–ª–∞–Ω–Ω–∏–∫, –ø–æ—Å–æ–ª ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ '–ø–æ—Å—ã–ª–∞—Ç—å'" },
  { char: "Âêà", meaning: "—Å–æ–±—Ä–∞—Ç—å, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å (–≤–æ–∏–Ω–æ–≤) ‚Äî –≤–æ–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "‰πÉ", meaning: "—Ç–≤–æ–π (2-–µ –ª–∏—Ü–æ, —Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª" },
  { char: "‰ª•", meaning: "–ø—Ä–∏–≤–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤) ‚Äî –≥–ª–∞–≥–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
  { char: "Áæå", meaning: "–ø–ª–µ–º—è –¶—è–Ω—å ‚Äî –æ–¥–Ω–æ –∏–∑ –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –ø–ª–µ–º—ë–Ω –Ω–∞ –∑–∞–ø–∞–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö –®–∞–Ω" },
  { char: "Êúï", meaning: "–º–æ–π (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º, —Ç–æ–ª—å–∫–æ ¬´–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª, ¬´–º–æ—è –ø–æ–º–æ—â—å¬ª –∏ —Ç.–¥." }
];

pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 5</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 5 ‚Äî –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Â∏ù", meaning: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ ‚Äî –≤—ã—Å—à–µ–µ –±–æ–∂–µ—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç —É—Ä–æ–∂–∞–π, –ø–æ–±–µ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è" },
  { char: "ÁÜØ", meaning: "–∏—Å—Å—É—à–∏—Ç—å, –≤—ã–∑–≤–∞—Ç—å –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∂–¥—é" },
  { char: "Áî≥", meaning: "–∑–∞—è—Ü (–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å); —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–∑–∞—è–≤–ª—è—Ç—å, –æ–±—ä—è–≤–ª—è—Ç—å'" },
  { char: "Èôç", meaning: "–ø–æ—Å–ª–∞—Ç—å (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–∞—Ç—å –∑–∞—Å—É—Ö—É¬ª" },
  { char: "‰ºê", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä, –Ω–∞–ø–∞—Å—Ç—å ‚Äî –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "‰Ωë", meaning: "–ø–æ–º–æ—â—å, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏; –≤ –≥–ª–∞–≥–æ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ¬´Âèó‰Ωë¬ª ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å¬ª" },
  { char: "Ê¥π", meaning: "—Ä–µ–∫–∞ –•—É–∞–Ω—å ‚Äî –ø—Ä–∏—Ç–æ–∫ –•—É–∞–Ω—Ö—ç, —É–≥—Ä–æ–∂–∞–≤—à–∞—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–æ–ª–∏—Ü–µ –®–∞–Ω" },
  { char: "‰Ωú", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω–∏—Ç—å (–≤—Ä–µ–¥) ‚Äî —á–∞—Å—Ç–æ —Å ¬´Á•∏¬ª: ¬´‰ΩúÁ•∏¬ª = ¬´–Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª" },
  { char: "Ëå≤", meaning: "—ç—Ç–æ—Ç, –∑–¥–µ—Å—å ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Å–∏–Ω–æ–Ω–∏–º ¬´‰ªä¬ª" },
  { char: "Á¶ç", meaning: "–±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–µ–∫–æ–π, –ø–ª–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –±–æ–∂–µ—Å—Ç–≤–æ–º" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰Ωô", meaning: "—è (1-–µ –ª–∏—Ü–æ) ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ; –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∏ '–º—ã'" },
  { char: "Âæó", meaning: "–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–µ—Å—Ç–∏ ‚Äî —á–∞—Å—Ç–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ '—É–¥–∞—Å—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∏—Ç—å'" },
  { char: "Ê±ù", meaning: "—Ç—ã (2-–µ –ª–∏—Ü–æ) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º" },
  { char: "‰Ωø", meaning: "–ø–æ—Å–ª–∞–Ω–Ω–∏–∫, –ø–æ—Å–æ–ª ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ '–ø–æ—Å—ã–ª–∞—Ç—å'" },
  { char: "Âêà", meaning: "—Å–æ–±—Ä–∞—Ç—å, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å (–≤–æ–∏–Ω–æ–≤) ‚Äî –≤–æ–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "‰πÉ", meaning: "—Ç–≤–æ–π (2-–µ –ª–∏—Ü–æ, —Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª" },
  { char: "‰ª•", meaning: "–ø—Ä–∏–≤–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤) ‚Äî –≥–ª–∞–≥–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
  { char: "Áæå", meaning: "–ø–ª–µ–º—è –¶—è–Ω—å ‚Äî –æ–¥–Ω–æ –∏–∑ –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –ø–ª–µ–º—ë–Ω –Ω–∞ –∑–∞–ø–∞–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö –®–∞–Ω" },
  { char: "Êúï", meaning: "–º–æ–π (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º, —Ç–æ–ª—å–∫–æ ¬´–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª, ¬´–º–æ—è –ø–æ–º–æ—â—å¬ª –∏ —Ç.–¥." }
];

pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 5</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 5 ‚Äî –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Â∏ù", meaning: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ ‚Äî –≤—ã—Å—à–µ–µ –±–æ–∂–µ—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç —É—Ä–æ–∂–∞–π, –ø–æ–±–µ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è" },
  { char: "ÁÜØ", meaning: "–∏—Å—Å—É—à–∏—Ç—å, –≤—ã–∑–≤–∞—Ç—å –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∂–¥—é" },
  { char: "Áî≥", meaning: "–∑–∞—è—Ü (–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å); —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–∑–∞—è–≤–ª—è—Ç—å, –æ–±—ä—è–≤–ª—è—Ç—å'" },
  { char: "Èôç", meaning: "–ø–æ—Å–ª–∞—Ç—å (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–∞—Ç—å –∑–∞—Å—É—Ö—É¬ª" },
  { char: "‰ºê", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä, –Ω–∞–ø–∞—Å—Ç—å ‚Äî –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "‰Ωë", meaning: "–ø–æ–º–æ—â—å, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏; –≤ –≥–ª–∞–≥–æ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ¬´Âèó‰Ωë¬ª ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å¬ª" },
  { char: "Ê¥π", meaning: "—Ä–µ–∫–∞ –•—É–∞–Ω—å ‚Äî –ø—Ä–∏—Ç–æ–∫ –•—É–∞–Ω—Ö—ç, —É–≥—Ä–æ–∂–∞–≤—à–∞—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–æ–ª–∏—Ü–µ –®–∞–Ω" },
  { char: "‰Ωú", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω–∏—Ç—å (–≤—Ä–µ–¥) ‚Äî —á–∞—Å—Ç–æ —Å ¬´Á•∏¬ª: ¬´‰ΩúÁ•∏¬ª = ¬´–Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª" },
  { char: "Ëå≤", meaning: "—ç—Ç–æ—Ç, –∑–¥–µ—Å—å ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Å–∏–Ω–æ–Ω–∏–º ¬´‰ªä¬ª" },
  { char: "Á¶ç", meaning: "–±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–µ–∫–æ–π, –ø–ª–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –±–æ–∂–µ—Å—Ç–≤–æ–º" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰Ωô", meaning: "—è (1-–µ –ª–∏—Ü–æ) ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ; –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∏ '–º—ã'" },
  { char: "Âæó", meaning: "–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–µ—Å—Ç–∏ ‚Äî —á–∞—Å—Ç–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ '—É–¥–∞—Å—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∏—Ç—å'" },
  { char: "Ê±ù", meaning: "—Ç—ã (2-–µ –ª–∏—Ü–æ) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º" },
  { char: "‰Ωø", meaning: "–ø–æ—Å–ª–∞–Ω–Ω–∏–∫, –ø–æ—Å–æ–ª ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ '–ø–æ—Å—ã–ª–∞—Ç—å'" },
  { char: "Âêà", meaning: "—Å–æ–±—Ä–∞—Ç—å, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å (–≤–æ–∏–Ω–æ–≤) ‚Äî –≤–æ–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "‰πÉ", meaning: "—Ç–≤–æ–π (2-–µ –ª–∏—Ü–æ, —Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª" },
  { char: "‰ª•", meaning: "–ø—Ä–∏–≤–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤) ‚Äî –≥–ª–∞–≥–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
  { char: "Áæå", meaning: "–ø–ª–µ–º—è –¶—è–Ω—å ‚Äî –æ–¥–Ω–æ –∏–∑ –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –ø–ª–µ–º—ë–Ω –Ω–∞ –∑–∞–ø–∞–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö –®–∞–Ω" },
  { char: "Êúï", meaning: "–º–æ–π (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º, —Ç–æ–ª—å–∫–æ ¬´–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª, ¬´–º–æ—è –ø–æ–º–æ—â—å¬ª –∏ —Ç.–¥." }
];

pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª–µ—Ç –Ω–∞–º –ø–æ–º–æ—â—å.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â∏ù ‚Äî –ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞</li>
      <li>Âèó ‚Äî –¥–∞—Ä–æ–≤–∞—Ç—å, –ø–æ—à–ª—ë—Ç</li>
      <li>Êàë ‚Äî –Ω–∞–º</li>
      <li>‰Ωë ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Â∏ù', 'Âèó', 'Êàë', '‰Ωë'];
    const allChars = [
      'Â∏ù', 'Âèó', 'Êàë', '‰Ωë',
      '‰∏ç', 'ÂÖ∂', 'ÁÜØ', 'Èôç', '‰ºê', '‰Ωú', 'Á•∏', '‰Ωô', 'Ê±ù', '‰πÉ', '‰ª•'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∏ùÂèóÊàë‰Ωë';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 5</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 5 ‚Äî –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Â∏ù", meaning: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ ‚Äî –≤—ã—Å—à–µ–µ –±–æ–∂–µ—Å—Ç–≤–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å—è—Ç —É—Ä–æ–∂–∞–π, –ø–æ–±–µ–¥–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è" },
  { char: "ÁÜØ", meaning: "–∏—Å—Å—É—à–∏—Ç—å, –≤—ã–∑–≤–∞—Ç—å –∑–∞—Å—É—Ö—É ‚Äî –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–∂–¥—é" },
  { char: "Áî≥", meaning: "–∑–∞—è—Ü (–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å); —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å '–∑–∞—è–≤–ª—è—Ç—å, –æ–±—ä—è–≤–ª—è—Ç—å'" },
  { char: "Èôç", meaning: "–ø–æ—Å–ª–∞—Ç—å (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ—Å–ª–∞—Ç—å –ø–æ–º–æ—â—å¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–∞—Ç—å –∑–∞—Å—É—Ö—É¬ª" },
  { char: "‰ºê", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä, –Ω–∞–ø–∞—Å—Ç—å ‚Äî –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á–∞—Å—Ç–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "‰Ωë", meaning: "–ø–æ–º–æ—â—å, –ø–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ‚Äî –æ–±—ã—á–Ω–æ –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏; –≤ –≥–ª–∞–≥–æ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ¬´Âèó‰Ωë¬ª ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å¬ª" },
  { char: "Ê¥π", meaning: "—Ä–µ–∫–∞ –•—É–∞–Ω—å ‚Äî –ø—Ä–∏—Ç–æ–∫ –•—É–∞–Ω—Ö—ç, —É–≥—Ä–æ–∂–∞–≤—à–∞—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–æ–ª–∏—Ü–µ –®–∞–Ω" },
  { char: "‰Ωú", meaning: "–Ω–∞–Ω–µ—Å—Ç–∏, –ø—Ä–∏—á–∏–Ω–∏—Ç—å (–≤—Ä–µ–¥) ‚Äî —á–∞—Å—Ç–æ —Å ¬´Á•∏¬ª: ¬´‰ΩúÁ•∏¬ª = ¬´–Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª" },
  { char: "Ëå≤", meaning: "—ç—Ç–æ—Ç, –∑–¥–µ—Å—å ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —Å–∏–Ω–æ–Ω–∏–º ¬´‰ªä¬ª" },
  { char: "Á¶ç", meaning: "–±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–µ–∫–æ–π, –ø–ª–µ–º–µ–Ω–∞–º–∏ –∏–ª–∏ –±–æ–∂–µ—Å—Ç–≤–æ–º" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰Ωô", meaning: "—è (1-–µ –ª–∏—Ü–æ) ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ; –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∏ '–º—ã'" },
  { char: "Âæó", meaning: "–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–µ—Å—Ç–∏ ‚Äî —á–∞—Å—Ç–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ '—É–¥–∞—Å—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–∏—Ç—å'" },
  { char: "Ê±ù", meaning: "—Ç—ã (2-–µ –ª–∏—Ü–æ) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º" },
  { char: "‰Ωø", meaning: "–ø–æ—Å–ª–∞–Ω–Ω–∏–∫, –ø–æ—Å–æ–ª ‚Äî —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –æ—Ç –≥–ª–∞–≥–æ–ª–∞ '–ø–æ—Å—ã–ª–∞—Ç—å'" },
  { char: "Âêà", meaning: "—Å–æ–±—Ä–∞—Ç—å, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å (–≤–æ–∏–Ω–æ–≤) ‚Äî –≤–æ–µ–Ω–Ω–∞—è –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "‰πÉ", meaning: "—Ç–≤–æ–π (2-–µ –ª–∏—Ü–æ, —Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç–≤–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª" },
  { char: "‰ª•", meaning: "–ø—Ä–∏–≤–µ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–ø–æ—Å–ª–∞–Ω–Ω–∏–∫–æ–≤) ‚Äî –≥–ª–∞–≥–æ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
  { char: "Áæå", meaning: "–ø–ª–µ–º—è –¶—è–Ω—å ‚Äî –æ–¥–Ω–æ –∏–∑ –≤—Ä–∞–∂–¥–µ–±–Ω—ã—Ö –ø–ª–µ–º—ë–Ω –Ω–∞ –∑–∞–ø–∞–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö –®–∞–Ω" },
  { char: "Êúï", meaning: "–º–æ–π (—Ç–æ–ª—å–∫–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!) ‚Äî –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–ª–µ–∂–∞—â–∏–º, —Ç–æ–ª—å–∫–æ ¬´–º–æ–π –ø–æ—Å–ª–∞–Ω–Ω–∏–∫¬ª, ¬´–º–æ—è –ø–æ–º–æ—â—å¬ª –∏ —Ç.–¥." }
];

pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs1 = [
  { char: "Â∏ù", meaning: "d√¨" },
  { char: "ÁÜØ", meaning: "h√†n" },
  { char: "Áî≥", meaning: "shƒìn" },
  { char: "Èôç", meaning: "ji√†ng" },
  { char: "‰ºê", meaning: "f√°" }
];

const pairs2 = [
  { char: "‰Ωë", meaning: "y√≤u" },
  { char: "Ê¥π", meaning: "hu√°n" },
  { char: "‰Ωú", meaning: "zu√≤" },
  { char: "Ëå≤", meaning: "zƒ´" },
  { char: "Á¶ç", meaning: "hu√≤" }
];

const pairs3 = [
  { char: "‰Ωô", meaning: "y√∫" },
  { char: "Âæó", meaning: "d√©" },
  { char: "Ê±ù", meaning: "r«î" },
  { char: "‰Ωø", meaning: "sh«ê" },
  { char: "Âêà", meaning: "h√©" }
];

const pairs4 = [
  { char: "‰πÉ", meaning: "n«éi" },
  { char: "‰ª•", meaning: "y«ê" },
  { char: "Áæå", meaning: "qiƒÅng" },
  { char: "Êúï", meaning: "zh√®n" }
];
pairs = pairs1
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs1 = [
  { char: "Â∏ù", meaning: "d√¨" },
  { char: "ÁÜØ", meaning: "h√†n" },
  { char: "Áî≥", meaning: "shƒìn" },
  { char: "Èôç", meaning: "ji√†ng" },
  { char: "‰ºê", meaning: "f√°" }
];

const pairs2 = [
  { char: "‰Ωë", meaning: "y√≤u" },
  { char: "Ê¥π", meaning: "hu√°n" },
  { char: "‰Ωú", meaning: "zu√≤" },
  { char: "Ëå≤", meaning: "zƒ´" },
  { char: "Á¶ç", meaning: "hu√≤" }
];

const pairs3 = [
  { char: "‰Ωô", meaning: "y√∫" },
  { char: "Âæó", meaning: "d√©" },
  { char: "Ê±ù", meaning: "r«î" },
  { char: "‰Ωø", meaning: "sh«ê" },
  { char: "Âêà", meaning: "h√©" }
];

const pairs4 = [
  { char: "‰πÉ", meaning: "n«éi" },
  { char: "‰ª•", meaning: "y«ê" },
  { char: "Áæå", meaning: "qiƒÅng" },
  { char: "Êúï", meaning: "zh√®n" }
];
pairs = pairs2
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs1 = [
  { char: "Â∏ù", meaning: "d√¨" },
  { char: "ÁÜØ", meaning: "h√†n" },
  { char: "Áî≥", meaning: "shƒìn" },
  { char: "Èôç", meaning: "ji√†ng" },
  { char: "‰ºê", meaning: "f√°" }
];

const pairs2 = [
  { char: "‰Ωë", meaning: "y√≤u" },
  { char: "Ê¥π", meaning: "hu√°n" },
  { char: "‰Ωú", meaning: "zu√≤" },
  { char: "Ëå≤", meaning: "zƒ´" },
  { char: "Á¶ç", meaning: "hu√≤" }
];

const pairs3 = [
  { char: "‰Ωô", meaning: "y√∫" },
  { char: "Âæó", meaning: "d√©" },
  { char: "Ê±ù", meaning: "r«î" },
  { char: "‰Ωø", meaning: "sh«ê" },
  { char: "Âêà", meaning: "h√©" }
];

const pairs4 = [
  { char: "‰πÉ", meaning: "n«éi" },
  { char: "‰ª•", meaning: "y«ê" },
  { char: "Áæå", meaning: "qiƒÅng" },
  { char: "Êúï", meaning: "zh√®n" }
];
pairs = pairs3
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs1 = [
  { char: "Â∏ù", meaning: "d√¨" },
  { char: "ÁÜØ", meaning: "h√†n" },
  { char: "Áî≥", meaning: "shƒìn" },
  { char: "Èôç", meaning: "ji√†ng" },
  { char: "‰ºê", meaning: "f√°" }
];

const pairs2 = [
  { char: "‰Ωë", meaning: "y√≤u" },
  { char: "Ê¥π", meaning: "hu√°n" },
  { char: "‰Ωú", meaning: "zu√≤" },
  { char: "Ëå≤", meaning: "zƒ´" },
  { char: "Á¶ç", meaning: "hu√≤" }
];

const pairs3 = [
  { char: "‰Ωô", meaning: "y√∫" },
  { char: "Âæó", meaning: "d√©" },
  { char: "Ê±ù", meaning: "r«î" },
  { char: "‰Ωø", meaning: "sh«ê" },
  { char: "Âêà", meaning: "h√©" }
];

const pairs4 = [
  { char: "‰πÉ", meaning: "n«éi" },
  { char: "‰ª•", meaning: "y«ê" },
  { char: "Áæå", meaning: "qiƒÅng" },
  { char: "Êúï", meaning: "zh√®n" }
];
pairs = pairs4
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–Ø –ø–æ–ª—É—á—É –ø–æ–º–æ—â—å –æ—Ç –ø–ª–µ–º–µ–Ω–∏ –ú–∞.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰Ωô ‚Äî —è</li>
      <li>Âèó ‚Äî –ø–æ–ª—É—á—É, –ø–æ—à–ª—é—Ç</li>
      <li>È¶¨Êñπ ‚Äî –ø–ª–µ–º—è –ú–∞</li>
      <li>‰Ωë ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['‰Ωô', 'Âèó', 'È¶¨', 'Êñπ', '‰Ωë'];
    const allChars = [
      '‰Ωô', 'Âèó', 'È¶¨', 'Êñπ', '‰Ωë',
      'Â∏ù', 'Êàë', '‰∏ç', 'ÂÖ∂', '‰Ωú', 'Á•∏', '‰ª•', '‰πÉ', '‰ºê', 'Âæó'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰ΩôÂèóÈ¶¨Êñπ‰Ωë';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–æ—à–ª–µ—Ç –º–Ω–µ –ø–æ–º–æ—â—å.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ø—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰∏ç ‚Äî –Ω–µ</li>
      <li>Êàë ‚Äî –º–Ω–µ</li>
      <li>Âèó ‚Äî –ø–æ—à–ª—ë—Ç</li>
      <li>‰Ωë ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áéã', '‰∏ç', 'Êàë', 'Âèó', '‰Ωë'];
    const allChars = [
      'Áéã', '‰∏ç', 'Êàë', 'Âèó', '‰Ωë',
      'Â∏ù', 'ÂÖ∂', '‰Ωú', 'Á•∏', '‰Ωô', '‰ª•', '‰πÉ', '‰ºê', 'Âæó', 'Ê±ù'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰∏çÊàëÂèó‰Ωë';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–¶—è–Ω—ã –Ω–µ –Ω–∞–Ω–µ—Å—É—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –º–æ–µ–º—É –ø–æ—Å–ª—É.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áæå ‚Äî —Ü—è–Ω—ã</li>
      <li>Âºó ‚Äî –Ω–µ</li>
      <li>Êúï ‚Äî –º–æ–π (–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω–æ–µ)</li>
      <li>‰Ωø ‚Äî –ø–æ—Å–æ–ª</li>
      <li>ÁÉñ ‚Äî –Ω–∞–Ω–µ—Å—É—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áæå', 'Âºó', 'Êúï', '‰Ωø', 'ÁÉñ'];
    const allChars = [
      'Áæå', 'Âºó', 'Êúï', '‰Ωø', 'ÁÉñ',
      'Â∏ù', 'Êàë', '‰∏ç', 'ÂÖ∂', '‰Ωú', 'Á•∏', '‰Ωô', '‰ª•', '‰πÉ', 'Âæó'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁæåÂºóÊúï‰ΩøÁÉñ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–•–æ—É –•—É, —è –ø–æ–ª—É—á—É —Ç–µ–±—è (–≤ –∂—ë–Ω—ã).</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰æØËôé ‚Äî –•–æ—É –•—É</li>
      <li>‰Ωô ‚Äî —è</li>
      <li>ÂÖ∂ ‚Äî –±—É–¥–µ—Ç</li>
      <li>Âæó ‚Äî –ø–æ–ª—É—á–∏—Ç—å (–≤ –∂—ë–Ω—ã)</li>
      <li>Ê±ù ‚Äî —Ç–µ–±—è</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['‰æØ', 'Ëôé', '‰Ωô', 'ÂÖ∂', 'Âæó', 'Ê±ù'];
    const allChars = [
      '‰æØ', 'Ëôé', '‰Ωô', 'ÂÖ∂', 'Âæó', 'Ê±ù',
      'Â∏ù', 'Êàë', '‰∏ç', 'Âèó', '‰Ωë', '‰ª•', '‰πÉ', '‰Ωø', '‰ºê'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰æØËôé‰ΩôÂÖ∂ÂæóÊ±ù';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Â∏ùÂèóÊàë‰Ωë</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã ¬´Â∏ùÂèóÊàë‰Ωë¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â∏ùÂèóÊàë‰Ωë¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">D√¨ sh√≤u w«í y√≤u</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ–ª—É—á–∏—Ç –º–æ—é –ø–æ–º–æ—â—å", correct: false },
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –º–Ω–µ –ø–æ–º–æ—â—å", correct: true },
      { text: "–Ø –ø–æ–ª—É—á—É –ø–æ–º–æ—â—å –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏", correct: false },
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –ø–æ–º–æ—â–∏", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Â∏ù‰∏çÊàëÂèó‰Ωë</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´Â∏ù‰∏çÊàëÂèó‰Ωë¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">D√¨ b√π w«í sh√≤u y√≤u</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â–∏", correct: true },
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª—ë—Ç –Ω–∞–º –ø–æ–º–æ—â—å", correct: false },
      { text: "–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–º —É—Ä–æ–∂–∞–π –æ—Ç –ù–µ–±–µ—Å–Ω–æ–≥–æ –í–ª–∞–¥—ã–∫–∏", correct: false },
      { text: "–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –ø—Ä–∏–º–µ—Ç –º–æ—é –º–æ–ª–∏—Ç–≤—É", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ÁæåÂºóÊúï‰ΩøÁÉñ</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´ÁæåÂºóÊúï‰ΩøÁÉñ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –∏ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">QiƒÅng f√∫ zh√®n sh«ê zƒÅi</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    const options = [
      { text: "–¶—è–Ω—ã –Ω–µ –Ω–∞–Ω–µ—Å—É—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –º–æ–µ–º—É –ø–æ—Å–ª—É", correct: true },
      { text: "–¶—è–Ω—ã –Ω–∞–Ω–µ—Å—É—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª—É –≤—Ä–∞–≥–∞", correct: false },
      { text: "–ú–æ–π –ø–æ—Å–æ–ª –Ω–µ –ø–æ–±–µ–¥–∏—Ç —Ü—è–Ω–æ–≤", correct: false },
      { text: "–¶—è–Ω—ã –Ω–µ –Ω–∞–ø–∞–¥—É—Ç –Ω–∞ –≥–æ—Ä–æ–¥", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>



==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 6: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: ÈªçÂπ¥ÊúâË∂≥Èõ®</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´ÈªçÂπ¥ÊúâË∂≥Èõ®¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ Êúâ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–∂–∞—è.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">sh«î ni√°n y«íu z√∫ y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è", correct: true },
      { text: "–£—Ä–æ–∂–∞–π —Ä–∏—Å–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—è", correct: false },
      { text: "–ù–∞ –ø–æ–ª–µ –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞", correct: false },
      { text: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –Ω–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<br>
          ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)¬ª<br>
          ‚Ä¢ <strong>ÈªçÂπ¥</strong> ‚Äî ¬´—É—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞¬ª<br>
          ‚Ä¢ <strong>Ë∂≥Èõ®</strong> ‚Äî ¬´–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è¬ª<br>
          –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å <strong>Êúâ</strong> –≤—ã—Ä–∞–∂–∞–µ—Ç –Ω–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Êúâ –∏ Èªç.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –ø—Ä–µ–¥–ª–æ–≥ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª –∏–ª–∏ ¬´–∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç‚Ä¶¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "Âèä (j√≠) ‚Äî –∫ –º–æ–º–µ–Ω—Ç—É, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç", correct: true },
      { text: "‰∫é (y√∫) ‚Äî –≤ (–º–µ—Å—Ç–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏)", correct: false },
      { text: "Ëá™ (z√¨) ‚Äî –æ—Ç, –Ω–∞—á–∏–Ω–∞—è —Å", correct: false },
      { text: "Ëá≥ (zh√¨) ‚Äî –¥–æ—Å—Ç–∏–≥–∞—Ç—å", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          <strong>Âèä j√≠</strong> ‚Äî —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–≥, –æ–∑–Ω–∞—á–∞—é—â–∏–π ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
          –í —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å <strong>Êúâ</strong> –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:<br>
          <em>–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å</em>.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Âèä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Ä–µ–º–µ–Ω–∏.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 6: –ì–∞–¥–∞–Ω–∏—è –æ –¥–æ–∂–¥–µ –∏ –±–µ–¥–∞—Ö</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ ¬´Êúâ¬ª –∏ –ø—Ä–µ–¥–ª–æ–≥ ¬´Âèä¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
</div>

<p>–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏¬ª ‚Äî –≤–µ—Ä–Ω–æ: ¬´Âèä¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ä–æ–∫, ¬´Êúâ¬ª –≤—ã—Ä–∞–∂–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è", 
      correct: true 
    },
    { 
      text: "¬´–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Êúâ¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∏–º–µ—Ç—å/–±—É–¥–µ—Ç¬ª, –∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ", 
      correct: false 
    },
    { 
      text: "¬´–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Âèä¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, –∞ –Ω–µ ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª", 
      correct: false 
    },
    { 
      text: "¬´–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –¥–æ–∂–¥–µ, –∞ –Ω–µ –æ –∑–∞—Å—É—Ö–µ", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<br>
        ‚Ä¢ <strong>Âèä j√≠</strong> ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ä–æ–∫)<br>
        ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç¬ª (–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è)<br>
        ‚Ä¢ <strong>Ëå≤ zƒ´</strong> ‚Äî ¬´—ç—Ç–æ—Ç¬ª (—É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ)<br>
        ‚Ä¢ <strong>Â§ßÈõ® d√† y«î</strong> ‚Äî ¬´—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å¬ª<br><br>
        –§—Ä–∞–∑–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´Êúâ¬ª ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –∞ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 6: –ü–æ–≥–æ–¥–∞, –±–æ–ª–µ–∑–Ω–∏ –∏ –º–∏—Å—Å–∏–∏</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –£—Ä–æ–∫–∞ 6. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏¬ª ‚Äî –≤–µ—Ä–Ω–æ: ¬´Âèä¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ä–æ–∫, ¬´Êúâ¬ª –≤—ã—Ä–∞–∂–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞ ¬´Ëå≤‰∫åÊúà¬ª ‚Äî ¬´—ç—Ç–æ—Ç –≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü¬ª", 
      correct: true 
    },
    { 
      text: "¬´–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Êúâ¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∏–º–µ—Ç—å/–±—É–¥–µ—Ç¬ª, –∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ", 
      correct: false 
    },
    { 
      text: "¬´–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Âèä¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, –∞ –Ω–µ ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª", 
      correct: false 
    },
    { 
      text: "¬´–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –¥–æ–∂–¥–µ, –∞ –Ω–µ –æ –∑–∞—Å—É—Ö–µ", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –£—Ä–æ–∫–∞ 6, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:<br>
        ‚Ä¢ <strong>Âèä j√≠</strong> ‚Äî –ø—Ä–µ–¥–ª–æ–≥ ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª, ¬´–∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç...¬ª<br>
        ‚Ä¢ <strong>Ëå≤ zƒ´</strong> ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ¬´—ç—Ç–æ—Ç¬ª<br>
        ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç¬ª (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)<br>
        ‚Ä¢ <strong>Â§ßÈõ® d√† y«î</strong> ‚Äî ¬´—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å¬ª<br><br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´Êúâ¬ª ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –∞ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ; ¬´Âèä¬ª ‚Äî –Ω–µ ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª, –∞ ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 6 ‚Äî –ü–æ–≥–æ–¥–∞, –±–æ–ª–µ–∑–Ω–∏ –∏ –º–∏—Å—Å–∏–∏</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>ÈªçÂπ¥ÊúâË∂≥Èõ®</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>Ëå≤ÈÇë‰∫°ÊåØ</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>Áéã‰ΩøÁúîÁæå</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÈªçÂπ¥ÊúâË∂≥Èõ®</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">sh«î ni√°n y«íu z√∫ y«î</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è">–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è</label>
            <label><input type="radio" name="q1" value="–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—è">–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—è</label>
            <label><input type="radio" name="q1" value="–£—Ä–æ–∂–∞–π —Ä–∏—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—å">–£—Ä–æ–∂–∞–π —Ä–∏—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—å</label>
            <label><input type="radio" name="q1" value="–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –º–∞–ª—ã–º">–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –º–∞–ª—ã–º</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">Ëå≤ÈÇë‰∫°ÊåØ</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">zƒ´ y√¨ w√∫ zh√®n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏">–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏</label>
            <label><input type="radio" name="q2" value="–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∞">–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∞</label>
            <label><input type="radio" name="q2" value="–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –ø–æ–≥–∏–±–Ω–µ—Ç">–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –ø–æ–≥–∏–±–Ω–µ—Ç</label>
            <label><input type="radio" name="q2" value="–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç —É–∫—Ä–µ–ø–ª—ë–Ω">–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç —É–∫—Ä–µ–ø–ª—ë–Ω</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏">–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏</label>
            <label><input type="radio" name="q3" value="–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏">–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏</label>
            <label><input type="radio" name="q3" value="–î–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è">–î–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è</label>
            <label><input type="radio" name="q3" value="–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞">–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">Áéã‰ΩøÁúîÁæå</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w√°ng sh«ê d√† qiƒÅng</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–ø–æ—Å–ª—ã –≤–∞–Ω–∞ –∏ –ø–ª–µ–º—è –¶—è–Ω—å">–ø–æ—Å–ª—ã –≤–∞–Ω–∞ –∏ –ø–ª–µ–º—è –¶—è–Ω—å</label>
            <label><input type="radio" name="q4" value="–≤–æ–π–Ω–∞ –≤–∞–Ω–∞ —Å –¶—è–Ω—å">–≤–æ–π–Ω–∞ –≤–∞–Ω–∞ —Å –¶—è–Ω—å</label>
            <label><input type="radio" name="q4" value="–º–∏—Å—Å–∏—è –≤–∞–Ω–∞ –ø—Ä–æ—Ç–∏–≤ –¶—è–Ω—å">–º–∏—Å—Å–∏—è –≤–∞–Ω–∞ –ø—Ä–æ—Ç–∏–≤ –¶—è–Ω—å</label>
            <label><input type="radio" name="q4" value="–ø–æ—Å–ª—ã –¶—è–Ω—å –∏–¥—É—Ç –∫ –≤–∞–Ω—É">–ø–æ—Å–ª—ã –¶—è–Ω—å –∏–¥—É—Ç –∫ –≤–∞–Ω—É</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è",
        q2: "–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏",
        q3: "–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏",
        q4: "–ø–æ—Å–ª—ã –≤–∞–Ω–∞ –∏ –ø–ª–µ–º—è –¶—è–Ω—å"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 6:<br>
                ‚Ä¢ –ü—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ Êúâ ‚Äî ¬´–∏–º–µ—Ç—å¬ª (—É—Å–ª–æ–≤–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ)<br>
                ‚Ä¢ –û—Ç—Ä–∏—Ü–∞–Ω–∏–µ ‰∫° ‚Äî ¬´–Ω–µ –∏–º–µ—Ç—å¬ª<br>
                ‚Ä¢ –ü—Ä–µ–¥–ª–æ–≥ Âèä ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
                ‚Ä¢ –°–æ—é–∑ Áúî ‚Äî ¬´–∏¬ª (–º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏)<br>
                ‚Ä¢ –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ Ëå≤ ‚Äî ¬´—ç—Ç–æ—Ç¬ª
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 6</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 6</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ó–∞–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º–∞—Ö –£—Ä–æ–∫–∞ 6: –ø—Ä–µ–¥–ª–æ–≥ <strong>Âèä j√≠</strong> –∏ —Å–æ—é–∑ <strong>Áúî d√†</strong>.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–º—ë–Ω!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</div>
    <div class="oracle-text">ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Âèä</strong> = ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, ¬´–∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç¬ª; <strong>Êúâ</strong> = ¬´–±—É–¥–µ—Ç¬ª</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. ÂÜì Áúî „±ø</div>
    <div class="oracle-text">ÂÜì Áúî „±ø</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Áúî d√†</strong> = ¬´–∏¬ª –º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –≥–ª–∞–≥–æ–ª–∞–º–∏.</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ö —ç—Ç–æ–º—É –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É', '–±—É–¥–µ—Ç', '—Å–∏–ª—å–Ω—ã–π', '–¥–æ–∂–¥—å'],
    ['–ë—É–¥–µ—Ç', '—Å–∏–ª—å–Ω—ã–π', '–¥–æ–∂–¥—å', '–∫ —ç—Ç–æ–º—É –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É'],
    ['–ö –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞', '–ø—Ä–∏–¥–µ—Ç', '—Å–∏–ª—å–Ω—ã–π', '–¥–æ–∂–¥—å']
];

const expected2 = [
    ['–ì–æ—É', '–∏', '–Æ–Ω'],
    ['–Æ–Ω', '–∏', '–ì–æ—É'],
    ['–ì–æ—É', '—Å', '–Æ–Ω–æ–º']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ö —ç—Ç–æ–º—É –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É', '–±—É–¥–µ—Ç', '—Å–∏–ª—å–Ω—ã–π', '–¥–æ–∂–¥—å', '–≤—á–µ—Ä–∞', '–∏', '—Å–æ–ª–Ω—Ü–µ', '—É—Ä–æ–∂–∞–π', '–±—ã–ª', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '–Ω–æ'];
const words2 = ['–ì–æ—É', '–∏', '–Æ–Ω', '–æ–Ω–∏', '–ø–æ—à–ª–∏', '–æ—Ö–æ—Ç–∏—Ç—å—Å—è', '–º—ã', '—Å', '–≤–∞–º–∏', '—Ü–∞—Ä—å', '–ø–æ—Å–ª–∞–ª', '–º–æ–ª–∏—Ç–≤—É'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

    if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –£—Ä–æ–∫–∞ 6:<br>
            ‚Ä¢ <strong>Âèä j√≠</strong> ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, ¬´–Ω–∞—Å—Ç—É–ø–∞—è –∫¬ª<br>
            ‚Ä¢ <strong>Áúî d√†</strong> ‚Äî —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞<br>
            ‚Ä¢ <strong>Êúâ</strong> ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ‰∏ç)
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤:';
        if (!isCorrect1) message += '<br>‚Ä¢ Âèä = ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–∏¬ª';
        if (!isCorrect2) message += '<br>‚Ä¢ Áúî = ¬´–∏¬ª –º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏, –Ω–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Êúâ vs ‰∫°: –£—Ä–æ–∫ 6</title>
</head>
<body>

<h2>Êúâ vs ‰∫°: –ù–∞–ª–∏—á–∏–µ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>Êúâ y«íu –∏ ‰∫° w√∫ –≤ –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –∫–∏—Ç–∞–π—Å–∫–æ–º</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ <strong>–Ω–∞–ª–∏—á–∏—è</strong> –∏–ª–∏ <strong>–æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è</strong> —á–µ–≥–æ-–ª–∏–±–æ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –ø–∞—Ä–æ–π –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤–æ–≤: <strong>Êúâ</strong> –∏ <strong>‰∫°</strong>.</p>

        <p>üü¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å¬ª, ¬´–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç¬ª:</p>
        <ul>
            <li>–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏—è, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —è–≤–ª–µ–Ω–∏—è: ¬´Êó¨ÊúâÁ¶ç¬ª ‚Äî ¬´–í –¥–µ–∫–∞–¥–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª</li>
            <li>–ü–æ–¥–ª–µ–∂–∞—â–µ–µ ‚Äî –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—É–±—ä–µ–∫—Ç, –∞ –æ–±—ä–µ–∫—Ç, –∏—Å–ø—ã—Ç—ã–≤–∞—é—â–∏–π –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ</li>
        </ul>

        <p>üî¥ <strong>‰∫° w√∫</strong> ‚Äî ¬´–Ω–µ –∏–º–µ—Ç—å¬ª, ¬´–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç¬ª:</p>
        <ul>
            <li>–ù–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Å ‰∏ç, –∞ <strong>–æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ</strong>: ¬´Êó¨‰∫°Á¶ç¬ª ‚Äî ¬´–í –¥–µ–∫–∞–¥–µ –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è¬ª</li>
            <li>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‰∏çÊúâ ‚Äî —ç—Ç–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "ÈªçÂπ¥ÊúâË∂≥Èõ®" ‚Üí üü¢ (–µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–æ–∂–¥—å)<br>
        "Êó¨‰∫°Á¶ç" ‚Üí üî¥ (–Ω–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –≠—Ç–∞ –¥–∏—Ö–æ—Ç–æ–º–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞:
        <ol>
            <li>–†–µ—á—å –æ <strong>–Ω–∞–ª–∏—á–∏–∏/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏</strong> –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è, –±–æ–ª–µ–∑–Ω–∏, —É–¥–∞—á–∏ –∏ —Ç.–¥.</li>
            <li>–ü–æ–¥–ª–µ–∂–∞—â–µ–µ ‚Äî <strong>–ø–∞—Å—Å–∏–≤–Ω—ã–π –Ω–æ—Å–∏—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è</strong> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–µ–º–ª—è, –≥–æ—Ä–æ–¥, —á–µ–ª–æ–≤–µ–∫)</li>
            <li>–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–æ –≤–Ω–µ—à–Ω–∏–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—Å—É—Ö–∞, –¥–æ–∂–¥—å, –±–æ–ª–µ–∑–Ω—å)</li>
        </ol>
        –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–µ—Å—Ç—å/–Ω–µ—Ç", –∞ <strong>—Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ø–æ–∑–∏—Ü–∏—è</strong>.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Êó¨ÊúâÁ¶ç", type: "direct", explanation: "–í –¥–µ–∫–∞–¥–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Êúâ" },
    { text: "Êó¨‰∫°Á¶ç", type: "inversion", explanation: "–í –¥–µ–∫–∞–¥–µ –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–±—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‰∫°, –∞ –Ω–µ ‰∏çÊúâ" },
    { text: "Ë∫´ÊúâÁñæ", type: "direct", explanation: "–ï—Å—Ç—å –±–æ–ª–µ–∑–Ω—å —É —Ç–µ–ª–∞ ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è, Êúâ" },
    { text: "Ë∫´‰∫°Áñæ", type: "inversion", explanation: "–ù–µ—Ç –±–æ–ª–µ–∑–Ω–∏ —É —Ç–µ–ª–∞ ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‰∫°" },
    { text: "‰ªäÊúàÊúâÂ§ßÈõ®", type: "direct", explanation: "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å ‚Äî Êúâ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —è–≤–ª–µ–Ω–∏—è" },
    { text: "‰ªäÊúà‰∫°Èõ®", type: "inversion", explanation: "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è ‚Äî –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ‰∫°, –∞ –Ω–µ —á–µ—Ä–µ–∑ ‰∏çÊúâ" },
    { text: "Ë•øÂúüÂÖ∂ÊúâÈôçÁÜØ", type: "direct", explanation: "–ù–∞ –∑–∞–ø–∞–¥–Ω—ã–µ –∑–µ–º–ª–∏ –Ω–∏—Å–ø–æ—Å–ª–∞–Ω–∞ –∑–∞—Å—É—Ö–∞ ‚Äî –±—É–∫–≤. ¬´–∑–µ–º–ª–∏ –∏–º–µ—é—Ç –∑–∞—Å—É—Ö—É¬ª, Êúâ" },
    { text: "ÂÖπÈÇë‰∫°ÊåØ", type: "inversion", explanation: "–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—Ç—Ä—è—Å–µ–Ω–∏–π ‚Äî ‰∫° –≤—ã—Ä–∞–∂–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–µ–¥—Å—Ç–≤–∏—è" },
    { text: "Êù•Êó•ÊúâËâ∞", type: "direct", explanation: "–í –±—É–¥—É—â–∏–π –¥–µ–Ω—å –±—É–¥–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç—å ‚Äî Êúâ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –Ω–∞–ª–∏—á–∏—è" },
    { text: "‰ªäÊó•‰∫°Êù•Ëâ∞", type: "inversion", explanation: "–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∞ –±–µ–¥—ã ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ, ‰∫°" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">Êúâ (–Ω–∞–ª–∏—á–∏–µ)</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">‰∫° (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ)</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "inversion") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –Ω–∞–ª–∏—á–∏—è –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: Êúâ ‚Äî –Ω–∞–ª–∏—á–∏–µ, ‰∫° ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ; –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‰∏çÊúâ.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", meaning: "—Ç–µ–ª–æ; —Å–∞–º" },
  { char: "Êúâ", meaning: "–∏–º–µ—Ç—å" },
  { char: "Áñæ", meaning: "–±–æ–ª–µ–∑–Ω—å" },
  { char: "‰∫°", meaning: "–Ω–µ –∏–º–µ—Ç—å" },
  { char: "ÈÖâ", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 10-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", meaning: "–¥–æ—Å—Ç–∏–≥–∞—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞; —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ" },
  { char: "‰∫å", meaning: "–¥–≤–∞" },
  { char: "Êú™", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 8-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞; —Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "Ë∂≥", meaning: "–Ω–æ–≥–∞; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π; –≥–æ–¥–∏—Ç—å—Å—è" },
  { char: "Êó¨", meaning: "–¥–µ–∫–∞–¥–∞ (10 –¥–Ω–µ–π)" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å" },
  { char: "Á•ü", meaning: "–∑–ª–æ, –¥—É—Ö-–∏—Å–∫—É—Å–∏—Ç–µ–ª—å" },
  { char: "ÊåØ", meaning: "–ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç—å—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é" },
  { char: "ÊóÖ", meaning: "—Å–æ–±—Å—Ç–≤. –õ—é–π" },
  { char: "Ëâ±", meaning: "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å, –∏—Å–ø—ã—Ç–∞–Ω–∏–µ" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è" }, // –í dict_human.txt –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  { char: "Âúü", meaning: "–∑–µ–º–ª—è" },
  { char: "Áúî", meaning: "—Å–ª—É–∂. —Å–æ—é–∑, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∏–º–µ–Ω–∞ –∏" },
  { char: "Âè∂", meaning: "—Å–æ–≤–µ—Ä—à–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å" },
  { char: "Á•ê", meaning: "–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∂–µ—Ä—Ç–≤—ã" }
];

pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", meaning: "—Ç–µ–ª–æ; —Å–∞–º" },
  { char: "Êúâ", meaning: "–∏–º–µ—Ç—å" },
  { char: "Áñæ", meaning: "–±–æ–ª–µ–∑–Ω—å" },
  { char: "‰∫°", meaning: "–Ω–µ –∏–º–µ—Ç—å" },
  { char: "ÈÖâ", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 10-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", meaning: "–¥–æ—Å—Ç–∏–≥–∞—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞; —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ" },
  { char: "‰∫å", meaning: "–¥–≤–∞" },
  { char: "Êú™", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 8-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞; —Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "Ë∂≥", meaning: "–Ω–æ–≥–∞; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π; –≥–æ–¥–∏—Ç—å—Å—è" },
  { char: "Êó¨", meaning: "–¥–µ–∫–∞–¥–∞ (10 –¥–Ω–µ–π)" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å" },
  { char: "Á•ü", meaning: "–∑–ª–æ, –¥—É—Ö-–∏—Å–∫—É—Å–∏—Ç–µ–ª—å" },
  { char: "ÊåØ", meaning: "–ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç—å—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é" },
  { char: "ÊóÖ", meaning: "—Å–æ–±—Å—Ç–≤. –õ—é–π" },
  { char: "Ëâ±", meaning: "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å, –∏—Å–ø—ã—Ç–∞–Ω–∏–µ" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è" }, // –í dict_human.txt –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  { char: "Âúü", meaning: "–∑–µ–º–ª—è" },
  { char: "Áúî", meaning: "—Å–ª—É–∂. —Å–æ—é–∑, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∏–º–µ–Ω–∞ –∏" },
  { char: "Âè∂", meaning: "—Å–æ–≤–µ—Ä—à–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å" },
  { char: "Á•ê", meaning: "–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∂–µ—Ä—Ç–≤—ã" }
];

pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", meaning: "—Ç–µ–ª–æ; —Å–∞–º" },
  { char: "Êúâ", meaning: "–∏–º–µ—Ç—å" },
  { char: "Áñæ", meaning: "–±–æ–ª–µ–∑–Ω—å" },
  { char: "‰∫°", meaning: "–Ω–µ –∏–º–µ—Ç—å" },
  { char: "ÈÖâ", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 10-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", meaning: "–¥–æ—Å—Ç–∏–≥–∞—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞; —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ" },
  { char: "‰∫å", meaning: "–¥–≤–∞" },
  { char: "Êú™", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 8-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞; —Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "Ë∂≥", meaning: "–Ω–æ–≥–∞; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π; –≥–æ–¥–∏—Ç—å—Å—è" },
  { char: "Êó¨", meaning: "–¥–µ–∫–∞–¥–∞ (10 –¥–Ω–µ–π)" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å" },
  { char: "Á•ü", meaning: "–∑–ª–æ, –¥—É—Ö-–∏—Å–∫—É—Å–∏—Ç–µ–ª—å" },
  { char: "ÊåØ", meaning: "–ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç—å—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é" },
  { char: "ÊóÖ", meaning: "—Å–æ–±—Å—Ç–≤. –õ—é–π" },
  { char: "Ëâ±", meaning: "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å, –∏—Å–ø—ã—Ç–∞–Ω–∏–µ" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è" }, // –í dict_human.txt –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  { char: "Âúü", meaning: "–∑–µ–º–ª—è" },
  { char: "Áúî", meaning: "—Å–ª—É–∂. —Å–æ—é–∑, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∏–º–µ–Ω–∞ –∏" },
  { char: "Âè∂", meaning: "—Å–æ–≤–µ—Ä—à–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å" },
  { char: "Á•ê", meaning: "–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∂–µ—Ä—Ç–≤—ã" }
];

pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª–µ—Ç –Ω–∞–º –ø–æ–º–æ—â—å.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â∏ù ‚Äî –ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞</li>
      <li>Âèó ‚Äî –¥–∞—Ä–æ–≤–∞—Ç—å, –ø–æ—à–ª—ë—Ç</li>
      <li>Êàë ‚Äî –Ω–∞–º</li>
      <li>‰Ωë ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Â∏ù', 'Âèó', 'Êàë', '‰Ωë'];
    const allChars = [
      'Â∏ù', 'Âèó', 'Êàë', '‰Ωë',
      '‰∏ç', 'ÂÖ∂', 'ÁÜØ', 'Èôç', '‰ºê', '‰Ωú', 'Á•∏', '‰Ωô', 'Ê±ù', '‰πÉ', '‰ª•'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∏ùÂèóÊàë‰Ωë';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", meaning: "—Ç–µ–ª–æ; —Å–∞–º" },
  { char: "Êúâ", meaning: "–∏–º–µ—Ç—å" },
  { char: "Áñæ", meaning: "–±–æ–ª–µ–∑–Ω—å" },
  { char: "‰∫°", meaning: "–Ω–µ –∏–º–µ—Ç—å" },
  { char: "ÈÖâ", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 10-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", meaning: "–¥–æ—Å—Ç–∏–≥–∞—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞; —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ" },
  { char: "‰∫å", meaning: "–¥–≤–∞" },
  { char: "Êú™", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 8-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞; —Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "Ë∂≥", meaning: "–Ω–æ–≥–∞; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π; –≥–æ–¥–∏—Ç—å—Å—è" },
  { char: "Êó¨", meaning: "–¥–µ–∫–∞–¥–∞ (10 –¥–Ω–µ–π)" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å" },
  { char: "Á•ü", meaning: "–∑–ª–æ, –¥—É—Ö-–∏—Å–∫—É—Å–∏—Ç–µ–ª—å" },
  { char: "ÊåØ", meaning: "–ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç—å—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é" },
  { char: "ÊóÖ", meaning: "—Å–æ–±—Å—Ç–≤. –õ—é–π" },
  { char: "Ëâ±", meaning: "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å, –∏—Å–ø—ã—Ç–∞–Ω–∏–µ" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è" }, // –í dict_human.txt –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  { char: "Âúü", meaning: "–∑–µ–º–ª—è" },
  { char: "Áúî", meaning: "—Å–ª—É–∂. —Å–æ—é–∑, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∏–º–µ–Ω–∞ –∏" },
  { char: "Âè∂", meaning: "—Å–æ–≤–µ—Ä—à–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å" },
  { char: "Á•ê", meaning: "–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∂–µ—Ä—Ç–≤—ã" }
];

pairs = pairs4;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –ø–∏–Ω—å–∏–Ω–µ–º
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", pinyin: "shƒìn" },
  { char: "Êúâ", pinyin: "y«íu" },
  { char: "Áñæ", pinyin: "j√≠" },
  { char: "‰∫°", pinyin: "w√∫" },
  { char: "ÈÖâ", pinyin: "y«íu" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", pinyin: "j√≠" },
  { char: "‰∫å", pinyin: "√®r" },
  { char: "Êú™", pinyin: "w√®i" },
  { char: "Ë∂≥", pinyin: "z√∫" },
  { char: "Êó¨", pinyin: "x√∫n" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", pinyin: "ch≈´" },
  { char: "Á•ü", pinyin: "su√¨" },
  { char: "ÊåØ", pinyin: "zh√®n" },
  { char: "ÊóÖ", pinyin: "l«ö" },
  { char: "Ëâ±", pinyin: "jiƒÅn" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", pinyin: "y«íng" },
  { char: "Âúü", pinyin: "t«î" },
  { char: "Áúî", pinyin: "d√†" },
  { char: "Âè∂", pinyin: "y√®" },
  { char: "Á•ê", pinyin: "y√≤u" }
];

pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –ø–∏–Ω—å–∏–Ω–µ–º
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", pinyin: "shƒìn" },
  { char: "Êúâ", pinyin: "y«íu" },
  { char: "Áñæ", pinyin: "j√≠" },
  { char: "‰∫°", pinyin: "w√∫" },
  { char: "ÈÖâ", pinyin: "y«íu" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", pinyin: "j√≠" },
  { char: "‰∫å", pinyin: "√®r" },
  { char: "Êú™", pinyin: "w√®i" },
  { char: "Ë∂≥", pinyin: "z√∫" },
  { char: "Êó¨", pinyin: "x√∫n" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", pinyin: "ch≈´" },
  { char: "Á•ü", pinyin: "su√¨" },
  { char: "ÊåØ", pinyin: "zh√®n" },
  { char: "ÊóÖ", pinyin: "l«ö" },
  { char: "Ëâ±", pinyin: "jiƒÅn" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", pinyin: "y«íng" },
  { char: "Âúü", pinyin: "t«î" },
  { char: "Áúî", pinyin: "d√†" },
  { char: "Âè∂", pinyin: "y√®" },
  { char: "Á•ê", pinyin: "y√≤u" }
];

pairs = pairs2

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –ø–∏–Ω—å–∏–Ω–µ–º
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", pinyin: "shƒìn" },
  { char: "Êúâ", pinyin: "y«íu" },
  { char: "Áñæ", pinyin: "j√≠" },
  { char: "‰∫°", pinyin: "w√∫" },
  { char: "ÈÖâ", pinyin: "y«íu" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", pinyin: "j√≠" },
  { char: "‰∫å", pinyin: "√®r" },
  { char: "Êú™", pinyin: "w√®i" },
  { char: "Ë∂≥", pinyin: "z√∫" },
  { char: "Êó¨", pinyin: "x√∫n" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", pinyin: "ch≈´" },
  { char: "Á•ü", pinyin: "su√¨" },
  { char: "ÊåØ", pinyin: "zh√®n" },
  { char: "ÊóÖ", pinyin: "l«ö" },
  { char: "Ëâ±", pinyin: "jiƒÅn" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", pinyin: "y«íng" },
  { char: "Âúü", pinyin: "t«î" },
  { char: "Áúî", pinyin: "d√†" },
  { char: "Âè∂", pinyin: "y√®" },
  { char: "Á•ê", pinyin: "y√≤u" }
];

pairs = pairs3

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –ø–∏–Ω—å–∏–Ω–µ–º
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", pinyin: "shƒìn" },
  { char: "Êúâ", pinyin: "y«íu" },
  { char: "Áñæ", pinyin: "j√≠" },
  { char: "‰∫°", pinyin: "w√∫" },
  { char: "ÈÖâ", pinyin: "y«íu" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", pinyin: "j√≠" },
  { char: "‰∫å", pinyin: "√®r" },
  { char: "Êú™", pinyin: "w√®i" },
  { char: "Ë∂≥", pinyin: "z√∫" },
  { char: "Êó¨", pinyin: "x√∫n" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", pinyin: "ch≈´" },
  { char: "Á•ü", pinyin: "su√¨" },
  { char: "ÊåØ", pinyin: "zh√®n" },
  { char: "ÊóÖ", pinyin: "l«ö" },
  { char: "Ëâ±", pinyin: "jiƒÅn" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", pinyin: "y«íng" },
  { char: "Âúü", pinyin: "t«î" },
  { char: "Áúî", pinyin: "d√†" },
  { char: "Âè∂", pinyin: "y√®" },
  { char: "Á•ê", pinyin: "y√≤u" }
];

pairs = pairs4

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ—Ç –±–µ–¥—Å—Ç–≤–∏–π.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ëå≤ÈÇë ‚Äî —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥</li>
      <li>‰∫° ‚Äî –Ω–µ –±—É–¥–µ—Ç, –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å</li>
      <li>Á¶ç ‚Äî –±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ</li>
      <li>Êúâ ‚Äî –∏–º–µ—Ç—å (–∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç —Å–±–∏—Ç—å —Å —Ç–æ–ª–∫—É)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–í —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ—Ç –±–µ–¥—Å—Ç–≤–∏–π" ‚Üí Ëå≤ÈÇë‰∫°Á¶ç
    const expected = ['Ëå≤', 'ÈÇë', '‰∫°', 'Á¶ç'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
    const allChars = [
      'Ëå≤', 'ÈÇë', '‰∫°', 'Á¶ç',
      'Êúâ', 'Êó¨', 'Á•ü', 'Áñæ', 'Ë∫´', 'Èõ®', 'Ë∂≥', 'Âèä', '‰∫å', 'Êúà', 'Ë•ø', 'Âúü'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ëå≤ÈÇë‰∫°Á¶ç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–£ –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–∑–Ω—å.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ë∫´ ‚Äî —Ç–µ–ª–æ, —è (–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ–ª–µ–∑–Ω–∏)</li>
      <li>Êúâ ‚Äî –∏–º–µ—Ç—å</li>
      <li>Áñæ ‚Äî –±–æ–ª–µ–∑–Ω—å</li>
      <li>‰∫° ‚Äî –Ω–µ –∏–º–µ—Ç—å (–∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç —Å–±–∏—Ç—å —Å —Ç–æ–ª–∫—É)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–£ –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–∑–Ω—å" ‚Üí Ë∫´ÊúâÁñæ
    const expected = ['Ë∫´', 'Êúâ', 'Áñæ'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –£—Ä–æ–∫–∞ 6 –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤
    const allChars = [
      'Ë∫´', 'Êúâ', 'Áñæ', '‰∫°',
      'Âèä', '‰∫å', 'Êúà', 'Èõ®', 'Ë∂≥',
      'Êó¨', 'Á•ü', 'ÈÇë', 'Ë•ø', 'Âúü', 'ÊåØ', 'Ëâ±'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ë∫´ÊúâÁñæ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ì–æ—É –∏ –Æ–Ω –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–º–æ—â—å.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>ÂÜì ‚Äî –ì–æ—É (–∏–º—è)</li>
      <li>Áúî ‚Äî –∏ (—Å–æ–µ–¥–∏–Ω—è–µ—Ç –∏–º–µ–Ω–∞)</li>
      <li>Ê∞∏ ‚Äî –Æ–Ω (–∏–º—è)</li>
      <li>ÂÖ∂ ‚Äî –±—É–¥–µ—Ç (—Å–ª—É–∂–µ–±–Ω–æ–µ –Ω–∞—Ä–µ—á–∏–µ)</li>
      <li>Êúâ ‚Äî –∏–º–µ—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ (–≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ¬´–Ω–∞–ª–∏—á–∏–µ –ø–æ–º–æ—â–∏¬ª)</li>
      <li>Á•ê ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ì–æ—É –∏ –Æ–Ω –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–º–æ—â—å" ‚Üí ÂÜìÁúîÊ∞∏ÂÖ∂ÊúâÁ•ê
    const expected = ['ÂÜì', 'Áúî', 'Ê∞∏', 'ÂÖ∂', 'Êúâ', 'Á•ê'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –£—Ä–æ–∫–∞ 6
    const allChars = [
      'ÂÜì', 'Áúî', 'Ê∞∏', 'ÂÖ∂', 'Êúâ', 'Á•ê',
      '‰∫°', 'Ë∫´', 'Áñæ', 'Âèä', '‰∫å', 'Êúà', 'Èõ®', 'Ë∂≥',
      'Ë•ø', 'Âúü', 'Êó¨', 'Á•ü', 'Ëâ±', 'ÊåØ', 'ÊóÖ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂÜìÁúîÊ∞∏ÂÖ∂ÊúâÁ•ê';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ö –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é —ç—Ç–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Âèä ‚Äî –∫ –º–æ–º–µ–Ω—Ç—É, –∫ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é</li>
      <li>Ëå≤ ‚Äî —ç—Ç–æ–≥–æ, –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ</li>
      <li>‰∫åÊúà ‚Äî –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞</li>
      <li>Êúâ ‚Äî –±—É–¥–µ—Ç (–∏–º–µ—Ç—å—Å—è)</li>
      <li>Â§ßÈõ® ‚Äî —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ö –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é —ç—Ç–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å" ‚Üí ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®
    const expected = ['Âèä', 'Ëå≤', '‰∫å', 'Êúà', 'Êúâ', 'Â§ß', 'Èõ®'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –£—Ä–æ–∫–∞ 6
    const allChars = [
      'Âèä', 'Ëå≤', '‰∫å', 'Êúà', 'Êúâ', 'Â§ß', 'Èõ®',
      '‰∫°', 'Ë∫´', 'Áñæ', 'Êó¨', 'Á¶ç', 'Á•ü', 'ÊåØ',
      'Ëâ±', 'Ë•ø', 'Âúü', 'Ë∂≥', 'Êù•', 'Êú™', 'ÈÖâ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 6 ‚Äî –ü–æ–≥–æ–¥–∞, –±–æ–ª–µ–∑–Ω–∏ –∏ –º–∏—Å—Å–∏–∏</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏", correct: true },
      { text: "–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { text: "–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏", correct: false },
      { text: "–î–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–≥–∞ <strong>Âèä j√≠</strong> ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
          –∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤–∞ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç¬ª.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Âèä –∏ Êúâ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–≥ Âèä –∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ Êúâ.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏", correct: true },
      { text: "–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { text: "–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏", correct: false },
      { text: "–î–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<br>
          ‚Ä¢ <strong>Âèä j√≠</strong> ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
          ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–±—É–¥–µ—Ç (–∏–º–µ—Ç—å—Å—è)¬ª<br>
          ‚Ä¢ <strong>Ëå≤ zƒ´</strong> ‚Äî ¬´—ç—Ç–æ—Ç¬ª<br>
          ‚Ä¢ <strong>Â§ßÈõ® d√† y«î</strong> ‚Äî ¬´—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å¬ª
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Âèä –∏ Êúâ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: ÈªçÂπ¥ÊúâË∂≥Èõ®</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´ÈªçÂπ¥ÊúâË∂≥Èõ®¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ Êúâ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–∂–∞—è.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">sh«î ni√°n y«íu z√∫ y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è", correct: true },
      { text: "–£—Ä–æ–∂–∞–π —Ä–∏—Å–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—è", correct: false },
      { text: "–ù–∞ –ø–æ–ª–µ –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞", correct: false },
      { text: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –Ω–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<br>
          ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç¬ª (–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è)<br>
          ‚Ä¢ <strong>ÈªçÂπ¥</strong> ‚Äî ¬´—É—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞¬ª<br>
          ‚Ä¢ <strong>Ë∂≥Èõ®</strong> ‚Äî ¬´–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è¬ª<br>
          –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å —É—Ä–æ–∂–∞–π ‚Äî –Ω–µ —Å—É–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—è, –∞ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Êúâ –∏ Èªç.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>



==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 7: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –ø—Ä–µ–¥–ª–æ–≥ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª –∏–ª–∏ ¬´–∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç‚Ä¶¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "Âèä (j√≠) ‚Äî –∫ –º–æ–º–µ–Ω—Ç—É, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç", correct: true },
      { text: "‰∫é (y√∫) ‚Äî –≤ (–º–µ—Å—Ç–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏)", correct: false },
      { text: "Ëá™ (z√¨) ‚Äî –æ—Ç, –Ω–∞—á–∏–Ω–∞—è —Å", correct: false },
      { text: "Ëá≥ (zh√¨) ‚Äî –¥–æ—Å—Ç–∏–≥–∞—Ç—å", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          <strong>Âèä j√≠</strong> ‚Äî —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–≥, –æ–∑–Ω–∞—á–∞—é—â–∏–π ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
          –í —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å <strong>Êúâ</strong> –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:<br>
          <em>–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å</em>.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Âèä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Ä–µ–º–µ–Ω–∏.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 7: –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –£—Ä–æ–∫–∞ 7. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò¬ª ‚Äî –≤–µ—Ä–Ω–æ: —ç—Ç–æ —Ü–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö ‰ª§ ‚Üí Âæû ‚Üí ‰ºê, –≥–¥–µ ¬´Âæû¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ", 
      correct: true 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ, –∞ ¬´ÂúüÊñπ¬ª ‚Äî —ç—Ç–æ ¬´–ø–ª–µ–º—è –¢—É¬ª, –∞ –Ω–µ ¬´Â§∑¬ª", 
      correct: false 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–µ, ¬´‰ª§¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–ø—Ä–∏–∫–∞–∑–∞–ª¬ª", 
      correct: false 
    },
    { 
      text: "¬´–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: —Å—É–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—è ‚Äî ¬´Áéã¬ª, –∞ –Ω–µ ¬´‰æØÈ´ò¬ª", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –£—Ä–æ–∫–∞ 7, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ <strong>—Ü–µ–ø–æ—á–∫—É —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
        ‚Ä¢ <strong>‰ª§ l√¨ng</strong> ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
        ‚Ä¢ <strong>Âæû c√≥ng</strong> ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞¬ª (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ)<br>
        ‚Ä¢ <strong>‰ºê f√°</strong> ‚Äî ¬´–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤¬ª<br><br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—É–±—ä–µ–∫—Ç ‚Äî ¬´Áéã¬ª, –∞ –Ω–µ ¬´‰æØÈ´ò¬ª; ¬´Âæû¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞¬ª, –∞ –Ω–µ ¬´–≤–æ–∑–≥–ª–∞–≤–∏—Ç—å¬ª.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>ÁéãÂãøÂæûÊ¥óÈúá</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>Áôª‰∫∫‰∫îÂçÉÂæÅÂúüÊñπ</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò</label>
            <label><input type="radio" name="q1" value="–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥">–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥</label>
            <label><input type="radio" name="q1" value="–ù–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ –ø—Ä–∏–∫–∞–∑–∞–ª–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—é –∏–¥—Ç–∏ –Ω–∞ –≤–æ–π–Ω—É">–ù–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ –ø—Ä–∏–∫–∞–∑–∞–ª–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—é –∏–¥—Ç–∏ –Ω–∞ –≤–æ–π–Ω—É</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÁéãÂãøÂæûÊ¥óÈúá</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w√°ng w√π c√≥ng x«ê zh√®n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏">–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏</label>
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏">–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏</label>
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ß–∂—ç–Ω—é –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ß–∂—ç–Ω—é –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥</label>
            <label><input type="radio" name="q2" value="–ß–∂—ç–Ω—å –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º">–ß–∂—ç–Ω—å –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">Áôª‰∫∫‰∫îÂçÉÂæÅÂúüÊñπ</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">dƒìng r√©n w«î qiƒÅn zhƒìng t«î fƒÅng</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –¢—É">–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –¢—É</label>
            <label><input type="radio" name="q3" value="–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –ø–æ—Å–µ–≤–∞">–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –ø–æ—Å–µ–≤–∞</label>
            <label><input type="radio" name="q3" value="–ü–ª–µ–º—è –¢—É —Å–æ–±–∏—Ä–∞–µ—Ç –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫">–ü–ª–µ–º—è –¢—É —Å–æ–±–∏—Ä–∞–µ—Ç –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫</label>
            <label><input type="radio" name="q3" value="–ü—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ –∏–¥—É—Ç –∫ –ø–ª–µ–º–µ–Ω–∏ –¢—É">–ü—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ –∏–¥—É—Ç –∫ –ø–ª–µ–º–µ–Ω–∏ –¢—É</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">l√¨ng y«î d√† jƒ´ y«ê y«ên c√≥ng x«ê zh√®n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏">–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏</label>
            <label><input type="radio" name="q4" value="–Æ–π –∏ –¶–∑–∏ –ø—Ä–∏–∫–∞–∑–∞–ª–∏Â∞π—É –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥">–Æ–π –∏ –¶–∑–∏ –ø—Ä–∏–∫–∞–∑–∞–ª–∏Â∞π—É –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥</label>
            <label><input type="radio" name="q4" value="–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥ –±–µ–∑Â∞π–∞">–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥ –±–µ–∑Â∞π–∞</label>
            <label><input type="radio" name="q4" value="Â∞π –ø–æ–≤–µ–ª–µ–ª –Æ–π –∏ –¶–∑–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º">Â∞π –ø–æ–≤–µ–ª–µ–ª –Æ–π –∏ –¶–∑–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò",
        q2: "–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏",
        q3: "–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –¢—É",
        q4: "–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 7:<br>
                ‚Ä¢ –¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê<br>
                ‚Ä¢ ‰ª§ ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
                ‚Ä¢ Âæû ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞¬ª (–ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ)<br>
                ‚Ä¢ Áôª‰∫∫ ‚Äî ¬´—Å–æ–±—Ä–∞—Ç—å –ª—é–¥–µ–π¬ª<br>
                ‚Ä¢ Áúî ‚Äî ¬´–∏¬ª (–º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏)<br>
                ‚Ä¢ ‰ª• ‚Äî ¬´—Å¬ª (–≤–≤–æ–¥–∏—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ)
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 7</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 7</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ó–∞–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º–∞—Ö –£—Ä–æ–∫–∞ 7: <strong>—Ü–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong> –∏ —Å–æ—é–∑ <strong>‰ª• y«ê</strong>.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑</div>
    <div class="oracle-text">Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>‰ª§ ‚Üí Âæû ‚Üí ‰ºê</strong> ‚Äî —Ü–µ–ø–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π: –ø—Ä–∏–∫–∞–∑–∞—Ç—å ‚Üí —Å–ª–µ–¥–æ–≤–∞—Ç—å ‚Üí –ø–æ—Ö–æ–¥</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. ‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá</div>
    <div class="oracle-text">‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>‰ª•</strong> = ¬´—Å¬ª (–≤–≤–æ–¥–∏—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ). <strong>Áúî</strong> = ¬´–∏¬ª –º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏.</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –∏–¥—Ç–∏ —Å–ª–µ–¥–æ–º –∑–∞ —Ö–æ—É –ì–∞–æ, —á—Ç–æ–±—ã –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –ø–ª–µ–º—è –ò'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ, —Å–ª–µ–¥—É—è –∑–∞ —Ö–æ—É –ì–∞–æ, –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò']
];

const expected2 = [
    ['–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏'],
    ['–ü–æ–≤–µ–ª–µ—Ç—å –Æ–π –∏ –¶–∑–∏, —ÅÂ∞π–æ–º, –∏–¥—Ç–∏ —Å–ª–µ–¥–æ–º –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏'],
    ['–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –°–∏ –ß–∂—ç–Ω–µ–º']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å', '–ø—Ä–∏–∫–∞–∑–∞–ª', '–Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ', '—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞', '—Ö–æ—É –ì–∞–æ', '–≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤', '–ø–ª–µ–º–µ–Ω–∏ –ò', '–≤–æ–∑–≥–ª–∞–≤–∏—Ç—å', '—É—Ä–æ–∂–∞–π', '–¥–æ–∂–¥—å', '–∏', '—Å–æ–ª–Ω—Ü–µ', '–æ–Ω–∏', '–æ—Ö–æ—Ç–∏–ª–∏—Å—å', '–º–æ–ª–∏—Ç–≤–∞'];
const words2 = ['–ü—Ä–∏–∫–∞–∑–∞—Ç—å', '–Æ–π', '–∏', '–¶–∑–∏', '—Å', 'Â∞π–æ–º', '—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞', '–ß–∂—ç–Ω–µ–º', '–∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏', '–º—ã', '–ø–æ—à–ª–∏', '–Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫', '—Ü–∞—Ä—å', '–æ—Ç–ø—Ä–∞–≤–∏–ª', '–≤–µ—Å—Ç–Ω–∏–∫–∞', '–≤—á–µ—Ä–∞'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

    if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –£—Ä–æ–∫–∞ 7:<br>
            ‚Ä¢ <strong>–¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è<br>
            ‚Ä¢ <strong>‰ª• y«ê</strong> ‚Äî ¬´—Å¬ª, –≤–≤–æ–¥–∏—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ<br>
            ‚Ä¢ <strong>Áúî d√†</strong> ‚Äî —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞, –Ω–µ –≥–ª–∞–≥–æ–ª—ã
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤:';
        if (!isCorrect1) message += '<br>‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –∏–¥—É—Ç –ø–æ —Ü–µ–ø–æ—á–∫–µ: –ø—Ä–∏–∫–∞–∑–∞–ª ‚Üí —Å–ª–µ–¥–æ–≤–∞—Ç—å ‚Üí –ø–æ—Ö–æ–¥';
        if (!isCorrect2) message += '<br>‚Ä¢ ‰ª• = "—Å", —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ–≥–æ, –∫—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–û–¥–∏–Ω–æ—á–Ω–æ–µ vs –¶–µ–ø–æ—á–∫–∞: –£—Ä–æ–∫ 7</title>
</head>
<body>

<h2>–û–¥–∏–Ω–æ—á–Ω–æ–µ vs –¶–µ–ø–æ—á–∫–∞: –°–∫–∞–∑—É–µ–º—ã–µ –≤ –¥–µ–π—Å—Ç–≤–∏–∏</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–∑—É–µ–º–æ–µ vs –¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ —Å–∫–∞–∑—É–µ–º–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–º, –Ω–æ –∏ –æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å <strong>—Ü–µ–ø–æ—á–∫—É</strong>, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤ –∏ –º–∏—Å—Å–∏–π.</p>

        <p>üü¢ <strong>–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–∑—É–µ–º–æ–µ</strong> ‚Äî –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ:</p>
        <ul>
            <li>Áéã‰ª§Â©¶Â•Ω w√°ng l√¨ng f√π h«éo ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ¬ª</li>
            <li>–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º—ã—Å–ª, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</li>
        </ul>

        <p>üî¥ <strong>–¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong> ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π:</p>
        <ul>
            <li>Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑ w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠ ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò¬ª</li>
            <li>–¶–µ–ø–æ—á–∫–∞: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê (–ø—Ä–∏–∫–∞–∑–∞—Ç—å ‚Üí —Å–ª–µ–¥–æ–≤–∞—Ç—å ‚Üí –ø–æ—Ö–æ–¥)</li>
            <li>–í—Ç–æ—Ä–æ–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–∫–∞–∑—É–µ–º—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ ‚Äî –æ–Ω–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "Áôª‰∫∫‰∫îÂçÉ" ‚Üí üü¢ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ: —Å–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫)<br>
        "‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá" ‚Üí üî¥ (—Ü–µ–ø–æ—á–∫–∞: –ø—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –≠—Ç–∞ –¥–∏—Ö–æ—Ç–æ–º–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞:
        <ol>
            <li>–†–µ—á—å –æ <strong>–ø—Ä–∏–∫–∞–∑–∞—Ö</strong>, <strong>–ø–æ—Ö–æ–¥–∞—Ö</strong> –∏–ª–∏ <strong>–º–∏—Å—Å–∏—è—Ö</strong></li>
            <li>–ü–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—á–∞—Å—Ç–æ ‰ª§ –∏–ª–∏ Âëº) <strong>–ø–æ—Ä–æ–∂–¥–∞–µ—Ç</strong> –≤—Ç–æ—Ä–æ–µ</li>
            <li>–ù–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ ‚Äî –≤–º–µ—Å—Ç–æ ¬´—Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å¬ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ü–µ–ø–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π</li>
        </ol>
        –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –£—Ä–æ–∫–∞ 7.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Áéã‰ª§Â©¶Â•Ω", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–∑—É–µ–º–æ–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ¬ª ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" },
    { text: "Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê ‚Äî –ø—Ä–∏–∫–∞–∑–∞—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å, –ø–æ—Ö–æ–¥" },
    { text: "Áôª‰∫∫‰∫îÂçÉ", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ: ¬´–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫¬ª ‚Äî –Ω–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è" },
    { text: "‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞: ¬´–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏¬ª" },
    { text: "ÁéãÂãøÂæûÊ¥óÈúá", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–∑—É–µ–º–æ–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º¬ª ‚Äî –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è" },
    { text: "Âëº‰ºêÂ∑•Êñπ", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞: ¬´–û—Ç–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑ ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ì—É–Ω¬ª ‚Äî –¥–≤–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö –ø–æ–¥—Ä—è–¥" },
    { text: "ÂæÅÂúüÊñπ", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ: ¬´–ü–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É¬ª ‚Äî –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ" },
    { text: "‰ª§Áï¢‰ª•Ë°Ü‰ºêÂ∑•Êñπ", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞: ¬´–ü—Ä–∏–∫–∞–∑–∞—Ç—å –ë–∏ —Å –æ–ø–æ–ª—á–µ–Ω–∏–µ–º –∏–¥—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ì—É–Ω¬ª" },
    { text: "ÁôªÂ©¶Â¶å‰∏âÂçÉ", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ: ¬´–°–æ–±—Ä–∞—Ç—å —Ç—Ä—ë—Ö —Ç—ã—Å—è—á –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –Ω–µ–≤–µ—Å—Ç–∫–∏ –¶–∑–∏–Ω¬ª" },
    { text: "‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞: ¬´–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ¬ª ‚Äî –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">–û–¥–∏–Ω–æ—á–Ω–æ–µ</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">–¶–µ–ø–æ—á–∫–∞</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "chain") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏ —Ü–µ–ø–æ—á–µ—á–Ω—ã—Ö —Å–∫–∞–∑—É–µ–º—ã—Ö.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: —Ü–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö ‚Äî –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs4;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs5;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰ª§ ‚Äî –ø—Ä–∏–∫–∞–∑–∞–ª</li>
      <li>Â©¶Â•Ω ‚Äî –Ω–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ</li>
      <li>Âæû ‚Äî –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å (–≤ –≤–æ–µ–Ω–Ω–æ–º –ø–æ—Ö–æ–¥–µ)</li>
      <li>‰ºê ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤</li>
      <li>ÂúüÊñπ ‚Äî –ø–ª–µ–º—è –¢—É</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ'];
    const allChars = [
      'Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ',
      'Âãø', 'Áôª', '‰∫∫', 'ÂæÅ', 'ÂçÉ', '‰∫î', 'Âë®', '‰æØ', 'È´ò', '‰∏ã', 'Âç±', 'Ê¥ó', 'Èúá'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs6;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs6

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs2

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs5

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task25.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs4

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task26.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs3

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰ª§ ‚Äî –ø—Ä–∏–∫–∞–∑–∞–ª</li>
      <li>Â©¶Â•Ω ‚Äî –Ω–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ</li>
      <li>Âæû ‚Äî –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ</li>
      <li>‰ºê ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤</li>
      <li>ÂúüÊñπ ‚Äî –ø–ª–µ–º—è –¢—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É." ‚Üí Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ
    const expected = ['Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
    const allChars = [
      'Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ',
      'Âãø', 'Áôª', '‰∫∫', 'ÂæÅ', 'ÂçÉ', '‰∫î', 'Âë®', '‰æØ', 'È´ò', '‰∏ã', 'Âç±', 'Ê¥ó', 'Èúá', 'Áï¢', 'ÁæΩ', 'Èõû', 'Â∞π', 'ÂÄâ', 'ÂØá'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰ª§ ‚Äî –ø—Ä–∏–∫–∞–∑–∞–ª</li>
      <li>Â©¶Â•Ω ‚Äî –Ω–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ</li>
      <li>Âæû ‚Äî –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ</li>
      <li>‰ºê ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤</li>
      <li>ÂúüÊñπ ‚Äî –ø–ª–µ–º—è –¢—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É." ‚Üí Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ
    const expected = ['Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–∏–∑ –£—Ä–æ–∫–∞ 7)
    const allChars = [
      'Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ',
      '‰∏ã', 'Ë°Ü', 'Èúá', 'Âç±', 'ÁæΩ', 'Âë®', 'Áôª', 'ÂçÉ',
      'ÂæÅ', 'È´ò', 'Èõû', '‰∏â', 'Â§∑', 'Âëº', 'Áï¢', 'Ê¥ó',
      'Â¶å', '‰∏Ä', 'Â∞π', 'ÂØá', 'Ëê¨', 'ÂÄâ', 'Êúõ', '‰πò'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰ª§ ‚Äî –ø—Ä–∏–∫–∞–∑–∞–ª</li>
      <li>Â©¶Â•Ω ‚Äî –Ω–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ</li>
      <li>Âæû ‚Äî –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ</li>
      <li>‰ºê ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤</li>
      <li>ÂúüÊñπ ‚Äî –ø–ª–µ–º—è –¢—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É." ‚Üí Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ
    const expected = ['Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–∏–∑ –£—Ä–æ–∫–∞ 7)
    const allChars = [
      'Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ',
      '‰∏ã', 'Ë°Ü', 'Èúá', 'Âç±', 'ÁæΩ', 'Âë®', 'Áôª', 'ÂçÉ',
      'ÂæÅ', 'È´ò', 'Èõû', '‰∏â', 'Â§∑', 'Âëº', 'Áï¢', 'Ê¥ó',
      'Â¶å', '‰∏Ä', 'Â∞π', 'ÂØá', 'Ëê¨', 'ÂÄâ', 'Êúõ', '‰πò'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ.", correct: false },
      { text: "–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Ü–µ–ø–æ—á–∫–∏ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
          <em>‰ª§</em> (–ø—Ä–∏–∫–∞–∑–∞—Ç—å) ‚Üí <em>Âæû</em> (—Å–ª–µ–¥–æ–≤–∞—Ç—å) ‚Üí <em>‰ºê</em> (–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤).
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‰ª§, Âæû –∏ ‰ºê.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–ø–æ—á–∫—É —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ.", correct: false },
      { text: "–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Ü–µ–ø–æ—á–∫–∏ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
          ‚Ä¢ <strong>‰ª§ l√¨ng</strong> ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>Âæû c√≥ng</strong> ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>‰ºê f√°</strong> ‚Äî ¬´–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤¬ª<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‰ª§, Âæû –∏ ‰ºê.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–ø–æ—á–∫—É —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ.", correct: false },
      { text: "–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Ü–µ–ø–æ—á–∫–∏ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
          ‚Ä¢ <strong>‰ª§ l√¨ng</strong> ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>Âæû c√≥ng</strong> ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>‰ºê f√°</strong> ‚Äî ¬´–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤¬ª<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‰ª§, Âæû –∏ ‰ºê.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–ø–æ—á–∫—É —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ.", correct: false },
      { text: "–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Ü–µ–ø–æ—á–∫–∏ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
          ‚Ä¢ <strong>‰ª§ l√¨ng</strong> ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>Âæû c√≥ng</strong> ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>‰ºê f√°</strong> ‚Äî ¬´–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤¬ª<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‰ª§, Âæû –∏ ‰ºê.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>



==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 8: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 8 ‚Äî –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´ÁéãÂèóÂπ¥¬ª ‚Äî —ç—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—Å—Ç—É–ø–∞—é—â–µ–µ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≥–ª–∞–≥–æ–ª—É ¬´Ê±Ç¬ª.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">y√∫ d√† ji«é qi√∫ w√°ng sh√≤u ni√°n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É—Ä–æ–∂–∞–π —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π.", correct: true },
      { text: "–£—Ä–æ–∂–∞–π –±—ã–ª –¥–∞–Ω –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É—Ä–æ–∂–∞–π.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>–≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>Ê±Ç qi√∫</strong> ‚Äî ¬´–ø—Ä–æ—Å–∏—Ç—å¬ª<br>
          ‚Ä¢ <strong>ÁéãÂèóÂπ¥ w√°ng sh√≤u ni√°n</strong> ‚Äî ¬´—á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª<br>
          –í–µ—Å—å –±–ª–æ–∫ <strong>ÁéãÂèóÂπ¥</strong> —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –≥–ª–∞–≥–æ–ª—É <strong>Ê±Ç</strong>.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É ¬´Ê±Ç + [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 8: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">y√∫ d√† ji«é qi√∫ w√°ng sh√≤u ni√°n</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –£—Ä–æ–∫–∞ 8. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª ‚Äî –≤–µ—Ä–Ω–æ: —ç—Ç–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ ¬´ÁéãÂèóÂπ¥¬ª —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –≥–ª–∞–≥–æ–ª—É ¬´Ê±Ç¬ª", 
      correct: true 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É—Ä–æ–∂–∞–π —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –î–∞ –¶–∑—è¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –µ—Å–ª–∏ –±—ã –ø—Ä—è–º—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±—ã–ª–æ ¬´Âπ¥¬ª, –æ–Ω–æ —Å—Ç–æ—è–ª–æ –±—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ ¬´Ê±Ç¬ª –±–µ–∑ —Å–∫–∞–∑—É–µ–º–æ–≥–æ; –∑–¥–µ—Å—å –∂–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî —Ü–µ–ª–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", 
      correct: false 
    },
    { 
      text: "¬´–£—Ä–æ–∂–∞–π –±—ã–ª –¥–∞–Ω –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –î–∞ –¶–∑—è¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –≥–ª–∞–≥–æ–ª ¬´Ê±Ç¬ª (–ø—Ä–æ—Å–∏—Ç—å) —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É", 
      correct: false 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É—Ä–æ–∂–∞–π¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Ê±Ç¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–ø—Ä–æ—Å–∏—Ç—å¬ª, –∞ –Ω–µ ¬´–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å¬ª (–¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ¬´‰ª§¬ª)", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –£—Ä–æ–∫–∞ 8, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ <strong>–≤–∫–ª—é—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</strong>:<br>
        ‚Ä¢ <strong>Ê±Ç qi√∫</strong> ‚Äî ¬´–ø—Ä–æ—Å–∏—Ç—å¬ª<br>
        ‚Ä¢ <strong>ÁéãÂèóÂπ¥ w√°ng sh√≤u ni√°n</strong> ‚Äî ¬´—á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª<br><br>
        –í–µ—Å—å –±–ª–æ–∫ <strong>ÁéãÂèóÂπ¥</strong> –≤—ã—Å—Ç—É–ø–∞–µ—Ç –≤ —Ä–æ–ª–∏ –ø—Ä—è–º–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –≥–ª–∞–≥–æ–ª—É <strong>Ê±Ç</strong>.<br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´Ê±Ç¬ª —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∏ –∑–¥–µ—Å—å –∏–º —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´ÁéãÂèóÂπ¥¬ª, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´Âπ¥¬ª.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 8 ‚Äî –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>‰∫éÁ•ñ‰πôÊ±ÇÁéãÂèóÂπ¥</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>‰∫éÂ∞è‰πôÂëäËÇÖÂÖ∂Ê≠•</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>‰∫éÁà∂‰∏ÅÂëäËÇÖÂÖ∂Ê≠•</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y√∫ d√† ji«é qi√∫ w√°ng sh√≤u ni√°n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É—Ä–æ–∂–∞–π —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –î–∞ –¶–∑—è">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É—Ä–æ–∂–∞–π —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –î–∞ –¶–∑—è</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π</label>
            <label><input type="radio" name="q1" value="–í–µ–ª–∏–∫–∏–π –ø—Ä–µ–¥–æ–∫ –î–∞ –¶–∑—è –¥–∞–ª —É—Ä–æ–∂–∞–π –ø—Ä–∞–≤–∏—Ç–µ–ª—é">–í–µ–ª–∏–∫–∏–π –ø—Ä–µ–¥–æ–∫ –î–∞ –¶–∑—è –¥–∞–ª —É—Ä–æ–∂–∞–π –ø—Ä–∞–≤–∏—Ç–µ–ª—é</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É—Ä–æ–∂–∞–π">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É—Ä–æ–∂–∞–π</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰∫éÁ•ñ‰πôÊ±ÇÁéãÂèóÂπ¥</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y√∫ z«î y«ê qi√∫ w√°ng sh√≤u ni√°n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–ü—Ä–æ—Å–∏—Ç—å —É—Ä–æ–∂–∞–π —É –ø—Ä–µ–¥–∫–∞ –ò">–ü—Ä–æ—Å–∏—Ç—å —É—Ä–æ–∂–∞–π —É –ø—Ä–µ–¥–∫–∞ –ò</label>
            <label><input type="radio" name="q2" value="–ü—Ä–æ—Å–∏—Ç—å —É –ø—Ä–µ–¥–∫–∞ –ò, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π">–ü—Ä–æ—Å–∏—Ç—å —É –ø—Ä–µ–¥–∫–∞ –ò, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π</label>
            <label><input type="radio" name="q2" value="–ü—Ä–µ–¥–æ–∫ –ò –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π">–ü—Ä–µ–¥–æ–∫ –ò –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π</label>
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –ø—Ä–µ–¥–∫—É –ò –¥–∞—Ç—å —É—Ä–æ–∂–∞–π">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –ø—Ä–µ–¥–∫—É –ò –¥–∞—Ç—å —É—Ä–æ–∂–∞–π</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰∫éÂ∞è‰πôÂëäËÇÖÂÖ∂Ê≠•</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y√∫ xi«éo y«ê g√†o s√π q√≠ b√π</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–°–æ–æ–±—â–∏—Ç—å –ú–∞–ª–æ–º—É –ò, —á—Ç–æ –°—É –∏–¥–µ—Ç">–°–æ–æ–±—â–∏—Ç—å –ú–∞–ª–æ–º—É –ò, —á—Ç–æ –°—É –∏–¥–µ—Ç</label>
            <label><input type="radio" name="q3" value="–°—É —Å–æ–æ–±—â–∏–ª –ú–∞–ª–æ–º—É –ò, —á—Ç–æ –æ–Ω –∏–¥–µ—Ç">–°—É —Å–æ–æ–±—â–∏–ª –ú–∞–ª–æ–º—É –ò, —á—Ç–æ –æ–Ω –∏–¥–µ—Ç</label>
            <label><input type="radio" name="q3" value="–ú–∞–ª—ã–π –ò —Å–æ–æ–±—â–∏–ª –°—É, —á—Ç–æ –æ–Ω –∏–¥–µ—Ç">–ú–∞–ª—ã–π –ò —Å–æ–æ–±—â–∏–ª –°—É, —á—Ç–æ –æ–Ω –∏–¥–µ—Ç</label>
            <label><input type="radio" name="q3" value="–°–æ–æ–±—â–∏—Ç—å –°—É, —á—Ç–æ –ú–∞–ª—ã–π –ò –∏–¥–µ—Ç">–°–æ–æ–±—â–∏—Ç—å –°—É, —á—Ç–æ –ú–∞–ª—ã–π –ò –∏–¥–µ—Ç</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰∫éÁà∂‰∏ÅÂëäËÇÖÂÖ∂Ê≠•</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y√∫ f√π dƒ´ng g√†o s√π q√≠ b√π</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–°–æ–æ–±—â–∏—Ç—å –æ—Ç—Ü—É –î–∏–Ω—É, —á—Ç–æ –°—É –∏–¥–µ—Ç">–°–æ–æ–±—â–∏—Ç—å –æ—Ç—Ü—É –î–∏–Ω—É, —á—Ç–æ –°—É –∏–¥–µ—Ç</label>
            <label><input type="radio" name="q4" value="–°—É —Å–æ–æ–±—â–∏–ª –æ—Ç—Ü—É –î–∏–Ω—É, —á—Ç–æ –æ–Ω –∏–¥–µ—Ç">–°—É —Å–æ–æ–±—â–∏–ª –æ—Ç—Ü—É –î–∏–Ω—É, —á—Ç–æ –æ–Ω –∏–¥–µ—Ç</label>
            <label><input type="radio" name="q4" value="–û—Ç–µ—Ü –î–∏–Ω —Å–æ–æ–±—â–∏–ª –°—É, —á—Ç–æ –æ–Ω –∏–¥–µ—Ç">–û—Ç–µ—Ü –î–∏–Ω —Å–æ–æ–±—â–∏–ª –°—É, —á—Ç–æ –æ–Ω –∏–¥–µ—Ç</label>
            <label><input type="radio" name="q4" value="–°–æ–æ–±—â–∏—Ç—å –°—É, —á—Ç–æ –æ—Ç–µ—Ü –î–∏–Ω –∏–¥–µ—Ç">–°–æ–æ–±—â–∏—Ç—å –°—É, —á—Ç–æ –æ—Ç–µ—Ü –î–∏–Ω –∏–¥–µ—Ç</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π",
        q2: "–ü—Ä–æ—Å–∏—Ç—å —É –ø—Ä–µ–¥–∫–∞ –ò, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π",
        q3: "–°–æ–æ–±—â–∏—Ç—å –ú–∞–ª–æ–º—É –ò, —á—Ç–æ –°—É –∏–¥–µ—Ç",
        q4: "–°–æ–æ–±—â–∏—Ç—å –æ—Ç—Ü—É –î–∏–Ω—É, —á—Ç–æ –°—É –∏–¥–µ—Ç"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 8:<br>
                ‚Ä¢ <strong>–í–∫–ª—é—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</strong>:<br>
                &nbsp;&nbsp;–ö–æ–≥–¥–∞ –ø–æ—Å–ª–µ –≥–ª–∞–≥–æ–ª–∞ <em>Ê±Ç</em> –∏–ª–∏ <em>Âëä</em><br>
                &nbsp;&nbsp;–∏–¥–µ—Ç —Ü–µ–ª–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º.<br>
                ‚Ä¢ <em>ÁéãÂèóÂπ¥</em> ‚Äî ¬´—á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª<br>
                ‚Ä¢ <em>ËÇÖÂÖ∂Ê≠•</em> ‚Äî ¬´—á—Ç–æ –°—É –∏–¥–µ—Ç¬ª<br>
                ‚Ä¢ <em>‰∫é</em> ‚Äî ¬´—É, –ø–µ—Ä–µ–¥¬ª (–≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å–∞—Ç–∞ –ø—Ä–æ—Å—å–±—ã/—Å–æ–æ–±—â–µ–Ω–∏—è)
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 8</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 8</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ó–∞–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤–æ–π —Ç–µ–º–µ –£—Ä–æ–∫–∞ 8: <strong>–≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≥–ª–∞–≥–æ–ª—É ¬´–ø—Ä–æ—Å–∏—Ç—å¬ª –∏–ª–∏ ¬´—Å–æ–æ–±—â–∞—Ç—å¬ª ‚Äî —ç—Ç–æ —Ü–µ–ª–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. ‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥</div>
    <div class="oracle-text">‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Ê±Ç</strong> —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ¬´–ø—Ä–æ—Å–∏—Ç—å <strong>–æ —á—ë–º?</strong>¬ª ‚Üí ¬´—á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. ‰∫éÂ∞è‰πôÂëäËÇÖÂÖ∂Ê≠•</div>
    <div class="oracle-text">‰∫éÂ∞è‰πôÂëäËÇÖÂÖ∂Ê≠•</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Âëä</strong> —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ¬´—Å–æ–æ–±—â–∏—Ç—å <strong>–æ —á—ë–º?</strong>¬ª ‚Üí ¬´—á—Ç–æ –°—É –∏–¥–µ—Ç¬ª</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –º–æ–ª–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã —É –Ω–µ–≥–æ –±—ã–ª —É—Ä–æ–∂–∞–π']
];

const expected2 = [
    ['–°–æ–æ–±—â–∏—Ç—å –ú–∞–ª–æ–º—É –ò, —á—Ç–æ –°—É –∏–¥–µ—Ç'],
    ['–°–æ–æ–±—â–∏—Ç—å –ú–∞–ª–æ–º—É –ò: –°—É –∏–¥–µ—Ç'],
    ['–°–æ–æ–±—â–∏—Ç—å –ú–∞–ª–æ–º—É –ò –æ —Ç–æ–º, —á—Ç–æ –°—É –∏–¥–µ—Ç']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å', '–ø—Ä–æ—Å–∏–ª', '–≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞', '–æ —Ç–æ–º, —á—Ç–æ–±—ã', '–æ–Ω', '–ø–æ–ª—É—á–∏–ª', '—É—Ä–æ–∂–∞–π', '–≤–æ–∑–≥–ª–∞–≤–∏—Ç—å', '–ø–æ—Ö–æ–¥', '–¥–æ–∂–¥—å', '–∏', '—Å–æ–ª–Ω—Ü–µ', '–æ–Ω–∏', '–º–æ–ª–∏–ª–∏—Å—å', '—Ö—Ä–∞–º'];
const words2 = ['–°–æ–æ–±—â–∏—Ç—å', '–ú–∞–ª–æ–º—É –ò', '—á—Ç–æ', '–°—É', '–∏–¥–µ—Ç', '–º—ã', '–ø—Ä–∏—à–ª–∏', '–Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫', '—Ü–∞—Ä—å', '–æ—Ç–ø—Ä–∞–≤–∏–ª', '–≤–µ—Å—Ç–Ω–∏–∫–∞', '–≤—á–µ—Ä–∞', '–ø—Ä–∏–∫–∞–∑–∞–ª', '–æ—Ö–æ—Ç–∏—Ç—å—Å—è'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

    if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é —Ç–µ–º—É –£—Ä–æ–∫–∞ 8:<br>
            ‚Ä¢ <strong>–í–∫–ª—é—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</strong>:<br>
            &nbsp;&nbsp;–ö–æ–≥–¥–∞ –ø–æ—Å–ª–µ <em>Ê±Ç</em> –∏–ª–∏ <em>Âëä</em> –∏–¥–µ—Ç —Ü–µ–ª–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî<br>
            &nbsp;&nbsp;–æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º.<br>
            ‚Ä¢ <em>ÁéãÂèóÂπ¥</em> ‚Äî ¬´—á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª<br>
            ‚Ä¢ <em>ËÇÖÂÖ∂Ê≠•</em> ‚Äî ¬´—á—Ç–æ –°—É –∏–¥–µ—Ç¬ª
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:';
        if (!isCorrect1) message += '<br>‚Ä¢ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ ¬´–ø—Ä–æ—Å–∏—Ç—å¬ª ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´—É—Ä–æ–∂–∞–π¬ª, –∞ —Ü–µ–ª–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª';
        if (!isCorrect2) message += '<br>‚Ä¢ ¬´–°–æ–æ–±—â–∏—Ç—å –ú–∞–ª–æ–º—É –ò¬ª ‚Äî –æ —á—ë–º? ¬´—á—Ç–æ –°—É –∏–¥–µ—Ç¬ª ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–ü—Ä–æ—Å—Ç–æ–µ vs –í–ª–æ–∂–µ–Ω–Ω–æ–µ: –£—Ä–æ–∫ 8</title>
</head>
<body>

<h2>–ü—Ä–æ—Å—Ç–æ–µ vs –í–ª–æ–∂–µ–Ω–Ω–æ–µ: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ vs –í–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã—Ä–∞–∂–µ–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–æ –∏ —Å–ª–æ–∂–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏, –≤–ø–ª–æ—Ç—å –¥–æ —Ü–µ–ª—ã—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è —Ä–∏—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–π.</p>

        <p>üü¢ <strong>–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ</strong> ‚Äî —á–ª–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ–º:</p>
        <ul>
            <li>Ê±ÇÂπ¥ qi√∫ ni√°n ‚Äî ¬´–ø—Ä–æ—Å–∏—Ç—å —É—Ä–æ–∂–∞–π¬ª (–ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)</li>
            <li>‰∫éÂÆóÈñÄÈÄÜÁæå y√∫ z≈çng m√©n n√¨ qiƒÅng ‚Äî ¬´–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Ü—è–Ω–æ–≤ —É –≤–æ—Ä–æ—Ç —Ö—Ä–∞–º–∞¬ª (–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ –º–µ—Å—Ç–∞)</li>
            <li>–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º—ã—Å–ª, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—è—Å–Ω–µ–Ω–∏—è</li>
        </ul>

        <p>üî¥ <strong>–í–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</strong> ‚Äî –ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–æ —Ü–µ–ª—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º:</p>
        <ul>
            <li>‰∫é‰∏äÁî≤Ê±ÇÁéãÂèóÂπ¥ y√∫ sh√†ng jiƒÉ qi√∫ w√°ng sh√≤u ni√°n ‚Äî ¬´–ü—Ä–æ—Å–∏—Ç—å —É –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è, —á—Ç–æ–±—ã –≤–∞–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª</li>
            <li>–ü—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –Ω–µ ¬´—É—Ä–æ–∂–∞–π¬ª, –∞ —Ü–µ–ª–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´ÁéãÂèóÂπ¥¬ª (–í–∞–Ω –ø–æ–ª—É—á–∏—Ç —É—Ä–æ–∂–∞–π)</li>
            <li>–ù–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "‰ª•Áæå" ‚Üí üü¢ (–ø—Ä–æ—Å—Ç–æ–µ: ¬´—Å —Ü—è–Ω–∞–º–∏¬ª)<br>
        "Áî®Êúõ‰πò‰ª•ÁæåËá™‰∏äÁî≤" ‚Üí üî¥ (–≤–ª–æ–∂–µ–Ω–Ω–æ–µ: ¬´–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [–∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ] —Ç–æ–≥–æ, –∫–æ–≥–æ –ø—Ä–∏–≤–µ–ª –í–∞–Ω –ß—ç–Ω, —Å —Ü—è–Ω–∞–º–∏, –Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è¬ª)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –≠—Ç–∞ –¥–∏—Ö–æ—Ç–æ–º–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞:
        <ol>
            <li>–†–µ—á—å –æ <strong>–∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏—è—Ö</strong>, <strong>–º–æ–ª–∏—Ç–≤–∞—Ö</strong> –∏–ª–∏ <strong>—Ä–∏—Ç—É–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö</strong></li>
            <li>–ß–ª–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ) <strong>—Å–∞–º–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º</strong></li>
            <li>–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –º—ã—Å–ª—å: –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´—á—Ç–æ¬ª, –∞ ¬´—á—Ç–æ –∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö¬ª</li>
        </ol>
        –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –£—Ä–æ–∫–∞ 8.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Ê±ÇÂπ¥", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´–ø—Ä–æ—Å–∏—Ç—å —É—Ä–æ–∂–∞–π¬ª ‚Äî –ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º" },
    { text: "‰∫é‰∏äÁî≤Ê±ÇÁéãÂèóÂπ¥", type: "chain", explanation: "–í–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî ¬´ÁéãÂèóÂπ¥¬ª (–í–∞–Ω –ø–æ–ª—É—á–∏—Ç —É—Ä–æ–∂–∞–π)" },
    { text: "‰ª•Áæå", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´—Å —Ü—è–Ω–∞–º–∏¬ª ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º" },
    { text: "Áî®Êúõ‰πò‰ª•ÁæåËá™‰∏äÁî≤", type: "chain", explanation: "–í–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å [–∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ] —Ç–æ–≥–æ, –∫–æ–≥–æ –ø—Ä–∏–≤–µ–ª –í–∞–Ω –ß—ç–Ω, —Å —Ü—è–Ω–∞–º–∏, –Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è¬ª" },
    { text: "ÂëäËÇÉÂÖ∂Ê≠•", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´—Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –æ–Ω –ø–æ–π–¥–µ—Ç¬ª ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Ñ–æ—Ä–º–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è" },
    { text: "‰∫éÂ∞è‰πôÂëäÈ©¨Êñπ‰∫éÁî≤Â≠êÂá∫", type: "chain", explanation: "–í–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´—Å–æ–æ–±—â–∏—Ç—å –ú–∞–ª–æ–º—É –ò, —á—Ç–æ –ø–ª–µ–º—è –ú–∞ –≤—ã—Å—Ç—É–ø–∏–ª–æ –≤ –¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã¬ª" },
    { text: "ÈÄÜÊØï‰ª•Áæå", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ë–∏ —Å —Ü—è–Ω–∞–º–∏¬ª ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ–º" },
    { text: "Âú®Âåó‰ΩøÊúâËé∑Áæå", type: "chain", explanation: "–í–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´–≤ —Å–µ–≤–µ—Ä–Ω–æ–π –º–∏—Å—Å–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∏ –ø–ª–µ–Ω–Ω—ã–µ —Ü—è–Ω—ã¬ª ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º" },
    { text: "Â∞ÑËáø‰ª•Áæå", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´—Å—Ç—Ä–µ–ª—è—Ç—å –∫–æ–ª—å—è–º–∏ —Å —Ü—è–Ω–∞–º–∏¬ª ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º" },
    { text: "Ë¥ûÂú®Âåó‰ΩøÊúâËé∑Áæå", type: "chain", explanation: "–í–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´—Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ —Å–µ–≤–µ—Ä–Ω–æ–π –º–∏—Å—Å–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∏ –ø–ª–µ–Ω–Ω—ã–µ —Ü—è–Ω—ã¬ª ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">–ü—Ä–æ—Å—Ç–æ–µ</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">–í–ª–æ–∂–µ–Ω–Ω–æ–µ</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "chain") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ—Å—Ç—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "Êàå", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 11-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" },
  { char: "ÈÄÜ", meaning: "–≤—Å—Ç—Ä–µ—á–∞—Ç—å; –∏–¥—Ç–∏ –ø—Ä–æ—Ç–∏–≤, –Ω–∞–ø–µ—Ä–µ–∫–æ—Ä" },
  { char: "ÂÆó", meaning: "—Ö—Ä–∞–º –ø—Ä–µ–¥–∫–æ–≤; –≥–ª–∞–≤–∞; —Å–æ—Ä–æ–¥–∏—á–∏" },
  { char: "ÈñÄ", meaning: "–¥–≤–µ—Ä—å, –≤–æ—Ä–æ—Ç–∞" },
  { char: "Âü∑", meaning: "–¥–µ—Ä–∂–∞—Ç—å, —Å—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω, –ø–ª–µ–Ω–Ω—ã–π" }
];

const pairs2 = [
  { char: "Â¢†", meaning: "—Ä–æ–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞, –≤—ã—Ç–æ–ø—Ç–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ" },
  { char: "Áî®", meaning: "–ø—Ä–∏–º–µ–Ω—è—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å; –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤ –∂–µ—Ä—Ç–≤—É" },
  { char: "Âú®", meaning: "–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å" },
  { char: "Áç≤", meaning: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" },
  { char: "Â∞Ñ", meaning: "—Å—Ç—Ä–µ–ª—è—Ç—å –∏–∑ –ª—É–∫–∞" }
];

const pairs3 = [
  { char: "Ëáø", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∞" },
  { char: "Á•ñ", meaning: "–¥–µ–¥, –ø—Ä–µ–¥–æ–∫, –ø—Ä–∞—â—É—Ä" },
  { char: "Â∞è", meaning: "–º–∞–ª–µ–Ω—å–∫–∏–π" },
  { char: "Ê≠•", meaning: "—à–∞–≥–∞—Ç—å, —à–∞–≥" },
  { char: "Áà∂", meaning: "–æ—Ç–µ—Ü" }
];

const pairs4 = [
  { char: "Â§ß", meaning: "–±–æ–ª—å—à–æ–π" },
  { char: "Á§∫", meaning: "–ø—Ä–µ–¥–æ–∫; –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" },
  { char: "Âæ°", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å, –ø—Ä–∞–≤–∏—Ç—å; –∑–∞—â–∏—â–∞—Ç—å" },
  { char: "Èº†", meaning: "–º—ã—à—å" },
  { char: "Áç≤", meaning: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "Êàå", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 11-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" },
  { char: "ÈÄÜ", meaning: "–≤—Å—Ç—Ä–µ—á–∞—Ç—å; –∏–¥—Ç–∏ –ø—Ä–æ—Ç–∏–≤, –Ω–∞–ø–µ—Ä–µ–∫–æ—Ä" },
  { char: "ÂÆó", meaning: "—Ö—Ä–∞–º –ø—Ä–µ–¥–∫–æ–≤; –≥–ª–∞–≤–∞; —Å–æ—Ä–æ–¥–∏—á–∏" },
  { char: "ÈñÄ", meaning: "–¥–≤–µ—Ä—å, –≤–æ—Ä–æ—Ç–∞" },
  { char: "Âü∑", meaning: "–¥–µ—Ä–∂–∞—Ç—å, —Å—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω, –ø–ª–µ–Ω–Ω—ã–π" }
];

const pairs2 = [
  { char: "Â¢†", meaning: "—Ä–æ–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞, –≤—ã—Ç–æ–ø—Ç–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ" },
  { char: "Áî®", meaning: "–ø—Ä–∏–º–µ–Ω—è—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å; –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤ –∂–µ—Ä—Ç–≤—É" },
  { char: "Âú®", meaning: "–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å" },
  { char: "Áç≤", meaning: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" },
  { char: "Â∞Ñ", meaning: "—Å—Ç—Ä–µ–ª—è—Ç—å –∏–∑ –ª—É–∫–∞" }
];

const pairs3 = [
  { char: "Ëáø", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∞" },
  { char: "Á•ñ", meaning: "–¥–µ–¥, –ø—Ä–µ–¥–æ–∫, –ø—Ä–∞—â—É—Ä" },
  { char: "Â∞è", meaning: "–º–∞–ª–µ–Ω—å–∫–∏–π" },
  { char: "Ê≠•", meaning: "—à–∞–≥–∞—Ç—å, —à–∞–≥" },
  { char: "Áà∂", meaning: "–æ—Ç–µ—Ü" }
];

const pairs4 = [
  { char: "Â§ß", meaning: "–±–æ–ª—å—à–æ–π" },
  { char: "Á§∫", meaning: "–ø—Ä–µ–¥–æ–∫; –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" },
  { char: "Âæ°", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å, –ø—Ä–∞–≤–∏—Ç—å; –∑–∞—â–∏—â–∞—Ç—å" },
  { char: "Èº†", meaning: "–º—ã—à—å" },
  { char: "Áç≤", meaning: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "Êàå", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 11-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" },
  { char: "ÈÄÜ", meaning: "–≤—Å—Ç—Ä–µ—á–∞—Ç—å; –∏–¥—Ç–∏ –ø—Ä–æ—Ç–∏–≤, –Ω–∞–ø–µ—Ä–µ–∫–æ—Ä" },
  { char: "ÂÆó", meaning: "—Ö—Ä–∞–º –ø—Ä–µ–¥–∫–æ–≤; –≥–ª–∞–≤–∞; —Å–æ—Ä–æ–¥–∏—á–∏" },
  { char: "ÈñÄ", meaning: "–¥–≤–µ—Ä—å, –≤–æ—Ä–æ—Ç–∞" },
  { char: "Âü∑", meaning: "–¥–µ—Ä–∂–∞—Ç—å, —Å—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω, –ø–ª–µ–Ω–Ω—ã–π" }
];

const pairs2 = [
  { char: "Â¢†", meaning: "—Ä–æ–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞, –≤—ã—Ç–æ–ø—Ç–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ" },
  { char: "Áî®", meaning: "–ø—Ä–∏–º–µ–Ω—è—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å; –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤ –∂–µ—Ä—Ç–≤—É" },
  { char: "Âú®", meaning: "–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å" },
  { char: "Áç≤", meaning: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" },
  { char: "Â∞Ñ", meaning: "—Å—Ç—Ä–µ–ª—è—Ç—å –∏–∑ –ª—É–∫–∞" }
];

const pairs3 = [
  { char: "Ëáø", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∞" },
  { char: "Á•ñ", meaning: "–¥–µ–¥, –ø—Ä–µ–¥–æ–∫, –ø—Ä–∞—â—É—Ä" },
  { char: "Â∞è", meaning: "–º–∞–ª–µ–Ω—å–∫–∏–π" },
  { char: "Ê≠•", meaning: "—à–∞–≥–∞—Ç—å, —à–∞–≥" },
  { char: "Áà∂", meaning: "–æ—Ç–µ—Ü" }
];

const pairs4 = [
  { char: "Â§ß", meaning: "–±–æ–ª—å—à–æ–π" },
  { char: "Á§∫", meaning: "–ø—Ä–µ–¥–æ–∫; –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" },
  { char: "Âæ°", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å, –ø—Ä–∞–≤–∏—Ç—å; –∑–∞—â–∏—â–∞—Ç—å" },
  { char: "Èº†", meaning: "–º—ã—à—å" },
  { char: "Áç≤", meaning: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "Êàå", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 11-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" },
  { char: "ÈÄÜ", meaning: "–≤—Å—Ç—Ä–µ—á–∞—Ç—å; –∏–¥—Ç–∏ –ø—Ä–æ—Ç–∏–≤, –Ω–∞–ø–µ—Ä–µ–∫–æ—Ä" },
  { char: "ÂÆó", meaning: "—Ö—Ä–∞–º –ø—Ä–µ–¥–∫–æ–≤; –≥–ª–∞–≤–∞; —Å–æ—Ä–æ–¥–∏—á–∏" },
  { char: "ÈñÄ", meaning: "–¥–≤–µ—Ä—å, –≤–æ—Ä–æ—Ç–∞" },
  { char: "Âü∑", meaning: "–¥–µ—Ä–∂–∞—Ç—å, —Å—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω, –ø–ª–µ–Ω–Ω—ã–π" }
];

const pairs2 = [
  { char: "Â¢†", meaning: "—Ä–æ–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞, –≤—ã—Ç–æ–ø—Ç–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ" },
  { char: "Áî®", meaning: "–ø—Ä–∏–º–µ–Ω—è—Ç—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å; –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤ –∂–µ—Ä—Ç–≤—É" },
  { char: "Âú®", meaning: "–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å" },
  { char: "Áç≤", meaning: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" },
  { char: "Â∞Ñ", meaning: "—Å—Ç—Ä–µ–ª—è—Ç—å –∏–∑ –ª—É–∫–∞" }
];

const pairs3 = [
  { char: "Ëáø", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∞" },
  { char: "Á•ñ", meaning: "–¥–µ–¥, –ø—Ä–µ–¥–æ–∫, –ø—Ä–∞—â—É—Ä" },
  { char: "Â∞è", meaning: "–º–∞–ª–µ–Ω—å–∫–∏–π" },
  { char: "Ê≠•", meaning: "—à–∞–≥–∞—Ç—å, —à–∞–≥" },
  { char: "Áà∂", meaning: "–æ—Ç–µ—Ü" }
];

const pairs4 = [
  { char: "Â§ß", meaning: "–±–æ–ª—å—à–æ–π" },
  { char: "Á§∫", meaning: "–ø—Ä–µ–¥–æ–∫; –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" },
  { char: "Âæ°", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å, –ø—Ä–∞–≤–∏—Ç—å; –∑–∞—â–∏—â–∞—Ç—å" },
  { char: "Èº†", meaning: "–º—ã—à—å" },
  { char: "Áç≤", meaning: "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å, –±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];
pairs = pairs4;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "Êàå", pinyin: "x≈´" },
  { char: "ÈÄÜ", pinyin: "n√¨" },
  { char: "ÂÆó", pinyin: "z≈çng" },
  { char: "ÈñÄ", pinyin: "m√©n" },
  { char: "Âü∑", pinyin: "zh√≠" }
];

const pairs2 = [
  { char: "Â¢†", pinyin: "sh√†n" },
  { char: "Áî®", pinyin: "y√≤ng" },
  { char: "Âú®", pinyin: "z√†i" },
  { char: "Áç≤", pinyin: "hu√≤" },
  { char: "Â∞Ñ", pinyin: "sh√®" }
];

const pairs3 = [
  { char: "Ëáø", pinyin: "chƒÅ" },
  { char: "Á•ñ", pinyin: "z«î" },
  { char: "Â∞è", pinyin: "xi«éo" },
  { char: "Ê≠•", pinyin: "b√π" },
  { char: "Áà∂", pinyin: "f√π" }
];

const pairs4 = [
  { char: "Â§ß", pinyin: "d√†" },
  { char: "Á§∫", pinyin: "sh√¨" },
  { char: "Âæ°", pinyin: "y√π" },
  { char: "Èº†", pinyin: "sh«î" },
  { char: "Áç≤", pinyin: "hu√≤" }
];
pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–µ–¥–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É —É –Ω–∞—Å –±—ã–ª —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏–ª</li>
      <li>‰∫é ‚Äî —É, –ø–µ—Ä–µ–¥</li>
      <li>Â§ßÁî≤ ‚Äî –í–µ–ª–∏–∫–∏–π –¶–∑—è (–≤–µ–ª–∏–∫–∏–π –ø—Ä–µ–¥–æ–∫)</li>
      <li>‰æÜÂπ¥ ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É</li>
      <li>Êàë ‚Äî –º—ã, –Ω–∞—Å</li>
      <li>Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å (–≤ –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ ‚Äî ¬´–¥–∞—Ç—å¬ª)</li>
      <li>ÈªçÂπ¥ ‚Äî —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áéã', 'Ê±Ç', '‰∫é', 'Â§ßÁî≤', '‰æÜÂπ¥', 'Êàë', 'Âèó', 'ÈªçÂπ¥'];
    const allChars = [
      'Áéã', 'Ê±Ç', '‰∫é', 'Â§ßÁî≤', '‰æÜÂπ¥', 'Êàë', 'Âèó', 'ÈªçÂπ¥',
      'Â£¨', 'Êàå', 'ÈÄÜ', '‰ª•', 'Áæå', 'ÂÆó', 'ÈñÄ', 'Âü∑', 'Â¢†', 'Áî®', 'Âú®', 'Áç≤', 'Â∞Ñ', 'Ëáø', 'Á•ñ', 'Â∞è', 'Ê≠•', 'Áà∂', 'Á§∫', 'Âæ°', 'Èº†'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÊ±ÇÊñºÂ§ßÁî≤‰æÜÂπ¥ÊàëÂèóÈªçÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "Êàå", pinyin: "x≈´" },
  { char: "ÈÄÜ", pinyin: "n√¨" },
  { char: "ÂÆó", pinyin: "z≈çng" },
  { char: "ÈñÄ", pinyin: "m√©n" },
  { char: "Âü∑", pinyin: "zh√≠" }
];

const pairs2 = [
  { char: "Â¢†", pinyin: "sh√†n" },
  { char: "Áî®", pinyin: "y√≤ng" },
  { char: "Âú®", pinyin: "z√†i" },
  { char: "Áç≤", pinyin: "hu√≤" },
  { char: "Â∞Ñ", pinyin: "sh√®" }
];

const pairs3 = [
  { char: "Ëáø", pinyin: "chƒÅ" },
  { char: "Á•ñ", pinyin: "z«î" },
  { char: "Â∞è", pinyin: "xi«éo" },
  { char: "Ê≠•", pinyin: "b√π" },
  { char: "Áà∂", pinyin: "f√π" }
];

const pairs4 = [
  { char: "Â§ß", pinyin: "d√†" },
  { char: "Á§∫", pinyin: "sh√¨" },
  { char: "Âæ°", pinyin: "y√π" },
  { char: "Èº†", pinyin: "sh«î" },
  { char: "Áç≤", pinyin: "hu√≤" }
];

pairs = pairs2

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "Êàå", pinyin: "x≈´" },
  { char: "ÈÄÜ", pinyin: "n√¨" },
  { char: "ÂÆó", pinyin: "z≈çng" },
  { char: "ÈñÄ", pinyin: "m√©n" },
  { char: "Âü∑", pinyin: "zh√≠" }
];

const pairs2 = [
  { char: "Â¢†", pinyin: "sh√†n" },
  { char: "Áî®", pinyin: "y√≤ng" },
  { char: "Âú®", pinyin: "z√†i" },
  { char: "Áç≤", pinyin: "hu√≤" },
  { char: "Â∞Ñ", pinyin: "sh√®" }
];

const pairs3 = [
  { char: "Ëáø", pinyin: "chƒÅ" },
  { char: "Á•ñ", pinyin: "z«î" },
  { char: "Â∞è", pinyin: "xi«éo" },
  { char: "Ê≠•", pinyin: "b√π" },
  { char: "Áà∂", pinyin: "f√π" }
];

const pairs4 = [
  { char: "Â§ß", pinyin: "d√†" },
  { char: "Á§∫", pinyin: "sh√¨" },
  { char: "Âæ°", pinyin: "y√π" },
  { char: "Èº†", pinyin: "sh«î" },
  { char: "Áç≤", pinyin: "hu√≤" }
];

pairs = pairs3

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "Êàå", pinyin: "x≈´" },
  { char: "ÈÄÜ", pinyin: "n√¨" },
  { char: "ÂÆó", pinyin: "z≈çng" },
  { char: "ÈñÄ", pinyin: "m√©n" },
  { char: "Âü∑", pinyin: "zh√≠" }
];

const pairs2 = [
  { char: "Â¢†", pinyin: "sh√†n" },
  { char: "Áî®", pinyin: "y√≤ng" },
  { char: "Âú®", pinyin: "z√†i" },
  { char: "Áç≤", pinyin: "hu√≤" },
  { char: "Â∞Ñ", pinyin: "sh√®" }
];

const pairs3 = [
  { char: "Ëáø", pinyin: "chƒÅ" },
  { char: "Á•ñ", pinyin: "z«î" },
  { char: "Â∞è", pinyin: "xi«éo" },
  { char: "Ê≠•", pinyin: "b√π" },
  { char: "Áà∂", pinyin: "f√π" }
];

const pairs4 = [
  { char: "Â§ß", pinyin: "d√†" },
  { char: "Á§∫", pinyin: "sh√¨" },
  { char: "Âæ°", pinyin: "y√π" },
  { char: "Èº†", pinyin: "sh«î" },
  { char: "Áç≤", pinyin: "hu√≤" }
];

pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–µ–¥–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É —É –Ω–∞—Å –±—ã–ª —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏–ª</li>
      <li>‰∫é ‚Äî —É, –ø–µ—Ä–µ–¥</li>
      <li>Â§ßÁî≤ ‚Äî –í–µ–ª–∏–∫–∏–π –¶–∑—è (–≤–µ–ª–∏–∫–∏–π –ø—Ä–µ–¥–æ–∫)</li>
      <li>‰æÜÂπ¥ ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É</li>
      <li>Êàë ‚Äî –º—ã, –Ω–∞—Å</li>
      <li>Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å (–≤ –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ ‚Äî ¬´–¥–∞—Ç—å¬ª)</li>
      <li>ÈªçÂπ¥ ‚Äî —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–µ–¥–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É —É –Ω–∞—Å –±—ã–ª —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã." ‚Üí ÁéãÊ±ÇÊñºÂ§ßÁî≤‰æÜÂπ¥ÊàëÂèóÈªçÂπ¥
    const expected = ['Áéã', 'Ê±Ç', 'Êñº', 'Â§ßÁî≤', '‰æÜÂπ¥', 'Êàë', 'Âèó', 'ÈªçÂπ¥'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
    const allChars = [
      'Áéã', 'Ê±Ç', 'Êñº', 'Â§ßÁî≤', '‰æÜÂπ¥', 'Êàë', 'Âèó', 'ÈªçÂπ¥',
      'Â£¨', 'Êàå', 'ÈÄÜ', '‰ª•', 'Áæå', 'ÂÆó', 'ÈñÄ', 'Âü∑', 'Â¢†', 'Áî®', 'Âú®', 'Áç≤', 'Â∞Ñ', 'Ëáø', 'Á•ñ', 'Â∞è', 'Ê≠•', 'Áà∂', 'Á§∫', 'Âæ°', 'Èº†'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÊ±ÇÊñºÂ§ßÁî≤‰æÜÂπ¥ÊàëÂèóÈªçÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–µ–¥–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É —É –Ω–∞—Å –±—ã–ª —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏–ª</li>
      <li>‰∫é ‚Äî —É, –ø–µ—Ä–µ–¥</li>
      <li>Â§ßÁî≤ ‚Äî –í–µ–ª–∏–∫–∏–π –¶–∑—è (–≤–µ–ª–∏–∫–∏–π –ø—Ä–µ–¥–æ–∫)</li>
      <li>‰æÜÂπ¥ ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É</li>
      <li>Êàë ‚Äî –º—ã, –Ω–∞—Å</li>
      <li>Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å (–≤ –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ ‚Äî ¬´–¥–∞—Ç—å¬ª)</li>
      <li>ÈªçÂπ¥ ‚Äî —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–µ–¥–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É —É –Ω–∞—Å –±—ã–ª —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã." ‚Üí ÁéãÊ±ÇÊñºÂ§ßÁî≤‰æÜÂπ¥ÊàëÂèóÈªçÂπ¥
    const expected = ['Áéã', 'Ê±Ç', 'Êñº', 'Â§ßÁî≤', '‰æÜÂπ¥', 'Êàë', 'Âèó', 'ÈªçÂπ¥'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–∏–∑ –£—Ä–æ–∫–∞ 8)
    const allChars = [
      'Áéã', 'Ê±Ç', 'Êñº', 'Â§ßÁî≤', '‰æÜÂπ¥', 'Êàë', 'Âèó', 'ÈªçÂπ¥',
      'Êàå', 'ÈÄÜ', 'ÂÆó', 'ÈñÄ', 'Âü∑', 'Â¢†', 'Áî®', 'Âú®', 'Áç≤',
      'Â∞Ñ', 'Ëáø', 'Á•ñ', 'Â∞è', 'Ê≠•', 'Áà∂', 'Á§∫', 'Âæ°', 'Èº†'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÊ±ÇÊñºÂ§ßÁî≤‰æÜÂπ¥ÊàëÂèóÈªçÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–µ–¥–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É —É –Ω–∞—Å –±—ã–ª —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏–ª</li>
      <li>‰∫é ‚Äî —É, –ø–µ—Ä–µ–¥</li>
      <li>Â§ßÁî≤ ‚Äî –í–µ–ª–∏–∫–∏–π –¶–∑—è (–≤–µ–ª–∏–∫–∏–π –ø—Ä–µ–¥–æ–∫)</li>
      <li>‰æÜÂπ¥ ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É</li>
      <li>Êàë ‚Äî –º—ã, –Ω–∞—Å</li>
      <li>Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å (–≤ –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ ‚Äî ¬´–¥–∞—Ç—å¬ª)</li>
      <li>ÈªçÂπ¥ ‚Äî —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–µ–¥–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É —É –Ω–∞—Å –±—ã–ª —É—Ä–æ–∂–∞–π —á—É–º–∏–∑—ã." ‚Üí ÁéãÊ±ÇÊñºÂ§ßÁî≤‰æÜÂπ¥ÊàëÂèóÈªçÂπ¥
    const expected = ['Áéã', 'Ê±Ç', 'Êñº', 'Â§ßÁî≤', '‰æÜÂπ¥', 'Êàë', 'Âèó', 'ÈªçÂπ¥'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–∏–∑ –£—Ä–æ–∫–∞ 8)
    const allChars = [
      'Áéã', 'Ê±Ç', 'Êñº', 'Â§ßÁî≤', '‰æÜÂπ¥', 'Êàë', 'Âèó', 'ÈªçÂπ¥',
      'Êàå', 'ÈÄÜ', 'ÂÆó', 'ÈñÄ', 'Âü∑', 'Â¢†', 'Áî®', 'Âú®', 'Áç≤',
      'Â∞Ñ', 'Ëáø', 'Á•ñ', 'Â∞è', 'Ê≠•', 'Áà∂', 'Á§∫', 'Âæ°', 'Èº†'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÊ±ÇÊñºÂ§ßÁî≤‰æÜÂπ¥ÊàëÂèóÈªçÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 8 ‚Äî –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">y√∫ d√† ji«é qi√∫ w√°ng sh√≤u ni√°n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É—Ä–æ–∂–∞–π —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π.", correct: true },
      { text: "–£—Ä–æ–∂–∞–π –±—ã–ª –¥–∞–Ω –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É—Ä–æ–∂–∞–π.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>–≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          <em>ÁéãÂèóÂπ¥</em> (–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É—Ä–æ–∂–∞–π) ‚Äî —ç—Ç–æ –ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≥–ª–∞–≥–æ–ª—É <em>Ê±Ç</em> (–ø—Ä–æ—Å–∏—Ç—å).
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É ¬´Ê±Ç + [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 8 ‚Äî –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ÁéãÂèóÂπ¥ ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≥–ª–∞–≥–æ–ª—É ¬´Ê±Ç¬ª.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">y√∫ d√† ji«é qi√∫ w√°ng sh√≤u ni√°n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É—Ä–æ–∂–∞–π —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π.", correct: true },
      { text: "–£—Ä–æ–∂–∞–π –±—ã–ª –¥–∞–Ω –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É—Ä–æ–∂–∞–π.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>–≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>Ê±Ç qi√∫</strong> ‚Äî ¬´–ø—Ä–æ—Å–∏—Ç—å¬ª<br>
          ‚Ä¢ <strong>ÁéãÂèóÂπ¥ w√°ng sh√≤u ni√°n</strong> ‚Äî ¬´—á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª<br>
          –í–µ—Å—å –±–ª–æ–∫ <strong>ÁéãÂèóÂπ¥</strong> —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –≥–ª–∞–≥–æ–ª—É <strong>Ê±Ç</strong>.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É ¬´Ê±Ç + [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 8 ‚Äî –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ÁéãÂèóÂπ¥ ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≥–ª–∞–≥–æ–ª—É ¬´Ê±Ç¬ª.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">y√∫ d√† ji«é qi√∫ w√°ng sh√≤u ni√°n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É—Ä–æ–∂–∞–π —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π.", correct: true },
      { text: "–£—Ä–æ–∂–∞–π –±—ã–ª –¥–∞–Ω –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É—Ä–æ–∂–∞–π.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>–≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>Ê±Ç qi√∫</strong> ‚Äî ¬´–ø—Ä–æ—Å–∏—Ç—å¬ª<br>
          ‚Ä¢ <strong>ÁéãÂèóÂπ¥ w√°ng sh√≤u ni√°n</strong> ‚Äî ¬´—á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª<br>
          –í–µ—Å—å –±–ª–æ–∫ <strong>ÁéãÂèóÂπ¥</strong> —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –≥–ª–∞–≥–æ–ª—É <strong>Ê±Ç</strong>.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É ¬´Ê±Ç + [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 8 ‚Äî –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´‰∫éÂ§ßÁî≤Ê±ÇÁéãÂèóÂπ¥¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ÁéãÂèóÂπ¥ ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –≥–ª–∞–≥–æ–ª—É ¬´Ê±Ç¬ª.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">y√∫ d√† ji«é qi√∫ w√°ng sh√≤u ni√°n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª —É—Ä–æ–∂–∞–π —É –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–µ–¥–∫–∞ –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π.", correct: true },
      { text: "–£—Ä–æ–∂–∞–π –±—ã–ª –¥–∞–Ω –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –î–∞ –¶–∑—è.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤–µ–ª–∏–∫–æ–º—É –ø—Ä–µ–¥–∫—É –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É—Ä–æ–∂–∞–π.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>–≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>Ê±Ç qi√∫</strong> ‚Äî ¬´–ø—Ä–æ—Å–∏—Ç—å¬ª<br>
          ‚Ä¢ <strong>ÁéãÂèóÂπ¥ w√°ng sh√≤u ni√°n</strong> ‚Äî ¬´—á—Ç–æ–±—ã –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π¬ª<br>
          –í–µ—Å—å –±–ª–æ–∫ <strong>ÁéãÂèóÂπ¥</strong> —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –≥–ª–∞–≥–æ–ª—É <strong>Ê±Ç</strong>.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É ¬´Ê±Ç + [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>



==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 9: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 9 ‚Äî –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´Ë≤ûÁéãÂîØÂæûÊ¥óÈúá¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —á–∞—Å—Ç–∏—Ü–∞ ¬´ÂîØ¬ª –≤—ã–¥–µ–ª—è–µ—Ç –ø–æ–¥–ª–µ–∂–∞—â–µ–µ ¬´Áéã¬ª, –ø—Ä–∏–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—É —ç–º—Ñ–∞–∑—É.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">zhƒìn w√°ng w√©i c√≥ng x«ê zh√®n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å.", correct: false },
      { text: "–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: false },
      { text: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –ø–ª–µ–º–µ–Ω–∏ –°–∏-–ß–∂—ç–Ω—å –≤—ã—Å—Ç—É–ø–∏—Ç—å.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</strong> —Å —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂîØ (w√©i)</strong>:<br>
          ‚Ä¢ <strong>Ë≤û zhƒìn</strong> ‚Äî ¬´—Å–ø—Ä–∞—à–∏–≤–∞—é—Ç¬ª<br>
          ‚Ä¢ <strong>Áéã w√°ng</strong> ‚Äî ¬´–ø—Ä–∞–≤–∏—Ç–µ–ª—å¬ª<br>
          ‚Ä¢ <strong>ÂîØ w√©i</strong> ‚Äî —á–∞—Å—Ç–∏—Ü–∞, –≤—ã–¥–µ–ª—è—é—â–∞—è —Å—É–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞<br>
          ‚Ä¢ <strong>ÂæûÊ¥óÈúá c√≥ng x«ê zh√®n</strong> ‚Äî ¬´–ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å¬ª<br>
          –§—Ä–∞–∑–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å: <em>¬´–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç?¬ª</em>, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞—è –µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Ä–æ–ª—å.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏—Ü—É ÂîØ ‚Äî –æ–Ω–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç —ç–º—Ñ–∞–∑—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 9: –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´Ë≤ûÁéãÂîØÂæûÊ¥óÈúá¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´Ë≤ûÁéãÂîØÂæûÊ¥óÈúá¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">zhƒìn w√°ng w√©i c√≥ng x«ê zh√®n</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –£—Ä–æ–∫–∞ 9. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?¬ª ‚Äî –≤–µ—Ä–Ω–æ: —á–∞—Å—Ç–∏—Ü–∞ ¬´ÂîØ¬ª –ø—Ä–∏–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—É —ç–º—Ñ–∞–∑—É, –≤—ã–¥–µ–ª—è—è –ø–æ–¥–ª–µ–∂–∞—â–µ–µ ¬´Áéã¬ª", 
      correct: true 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á–∞—Å—Ç–∏—Ü—ã ¬´ÂîØ¬ª –∏ –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≥–æ–ª–∞ ¬´Ë≤û¬ª —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∞ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
      correct: false 
    },
    { 
      text: "¬´–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—ë—Ç —á–∞—Å—Ç–∏—Ü–∞ ¬´Âãø¬ª, –∞ –Ω–µ ¬´ÂîØ¬ª", 
      correct: false 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –ø–ª–µ–º–µ–Ω–∏ –°–∏-–ß–∂—ç–Ω—å –≤—ã—Å—Ç—É–ø–∏—Ç—å¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≥–ª–∞–≥–æ–ª ¬´Âæû¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–ø–æ–π—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞¬ª, –∞ –Ω–µ ¬´–ø–æ–≤–µ–ª–µ–ª¬ª, –∏ –Ω–µ—Ç –ø–æ–±—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –£—Ä–æ–∫–∞ 9, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ <strong>—ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</strong>:<br>
        ‚Ä¢ <strong>Ë≤û zhƒìn</strong> ‚Äî ¬´—Å–ø—Ä–∞—à–∏–≤–∞—é—Ç¬ª<br>
        ‚Ä¢ <strong>Áéã w√°ng</strong> ‚Äî ¬´–ø—Ä–∞–≤–∏—Ç–µ–ª—å¬ª<br>
        ‚Ä¢ <strong>ÂîØ w√©i</strong> ‚Äî —á–∞—Å—Ç–∏—Ü–∞, –ø—Ä–∏–¥–∞—é—â–∞—è –≤–æ–ø—Ä–æ—Å—É –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤—ã–¥–µ–ª—è—é—â–∞—è —Å—É–±—ä–µ–∫—Ç<br>
        ‚Ä¢ <strong>ÂæûÊ¥óÈúá c√≥ng x«ê zh√®n</strong> ‚Äî ¬´–ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å¬ª<br><br>
        –ß–∞—Å—Ç–∏—Ü–∞ <strong>ÂîØ</strong> –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–π: –∞–∫—Ü–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–¥–ª–µ–∂–∞—â–µ–º.<br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´<em>–ò–º–µ–Ω–Ω–æ –ª–∏</em> –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º?¬ª
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´ÂîØ¬ª ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –∞ —á–∞—Å—Ç–∏—Ü–∞ —ç–º—Ñ–∞–∑—ã. –û–Ω–∞ –≤—ã–¥–µ–ª—è–µ—Ç ¬´Áéã¬ª –∫–∞–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 9 ‚Äî –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>Ë≤ûÁéãÂîØÂæûÊ¥óÈúá</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>Ë≤ûÁéãÂãøÂæûÊ¥óÈúá</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>ÊàëÂèÄ‰πôÂ∑≥Âá∫</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>‰ΩôÂîØÈπøÁç≤</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">Ë≤ûÁéãÂîØÂæûÊ¥óÈúá</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">zhƒìn w√°ng w√©i c√≥ng x«ê zh√®n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</label>
            <label><input type="radio" name="q1" value="–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å">–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</label>
            <label><input type="radio" name="q1" value="–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å">–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –ø–ª–µ–º–µ–Ω–∏ –°–∏-–ß–∂—ç–Ω—å –≤—ã—Å—Ç—É–ø–∏—Ç—å">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –ø–ª–µ–º–µ–Ω–∏ –°–∏-–ß–∂—ç–Ω—å –≤—ã—Å—Ç—É–ø–∏—Ç—å</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">Ë≤ûÁéãÂãøÂæûÊ¥óÈúá</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">zhƒìn w√°ng w√π c√≥ng x«ê zh√®n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</label>
            <label><input type="radio" name="q2" value="–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å">–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</label>
            <label><input type="radio" name="q2" value="–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å">–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</label>
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÊàëÂèÄ‰πôÂ∑≥Âá∫</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w«í hu√¨ y«ê s√¨ ch≈´</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–Ø –≤—ã–π–¥—É –≤ –¥–µ–Ω—å –ò-—Å—ã">–Ø –≤—ã–π–¥—É –≤ –¥–µ–Ω—å –ò-—Å—ã</label>
            <label><input type="radio" name="q3" value="–ù–µ –≤—ã–π–¥—É –ª–∏ —è –≤ –¥–µ–Ω—å –ò-—Å—ã">–ù–µ –≤—ã–π–¥—É –ª–∏ —è –≤ –¥–µ–Ω—å –ò-—Å—ã</label>
            <label><input type="radio" name="q3" value="–ò–º–µ–Ω–Ω–æ –ª–∏ —è –≤—ã–π–¥—É –≤ –¥–µ–Ω—å –ò-—Å—ã">–ò–º–µ–Ω–Ω–æ –ª–∏ —è –≤—ã–π–¥—É –≤ –¥–µ–Ω—å –ò-—Å—ã</label>
            <label><input type="radio" name="q3" value="–Ø –Ω–µ –≤—ã–π–¥—É –≤ –¥–µ–Ω—å –ò-—Å—ã">–Ø –Ω–µ –≤—ã–π–¥—É –≤ –¥–µ–Ω—å –ò-—Å—ã</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰ΩôÂîØÈπøÁç≤</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y√∫ w√©i l√π hu√≤</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–Ø –ø–æ–π–º–∞—é –æ–ª–µ–Ω—è">–Ø –ø–æ–π–º–∞—é –æ–ª–µ–Ω—è</label>
            <label><input type="radio" name="q4" value="–ù–µ –ø–æ–π–º–∞—é –ª–∏ —è –æ–ª–µ–Ω—è">–ù–µ –ø–æ–π–º–∞—é –ª–∏ —è –æ–ª–µ–Ω—è</label>
            <label><input type="radio" name="q4" value="–û–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é">–û–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é</label>
            <label><input type="radio" name="q4" value="–Ø –Ω–µ –ø–æ–π–º–∞—é –æ–ª–µ–Ω—è">–Ø –Ω–µ –ø–æ–π–º–∞—é –æ–ª–µ–Ω—è</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å",
        q2: "–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å",
        q3: "–ò–º–µ–Ω–Ω–æ –ª–∏ —è –≤—ã–π–¥—É –≤ –¥–µ–Ω—å –ò-—Å—ã",
        q4: "–û–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 9:<br>
                ‚Ä¢ <strong>–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</strong>:<br>
                &nbsp;&nbsp;–ß–∞—Å—Ç–∏—Ü–∞ <em>ÂîØ (w√©i)</em> –ø—Ä–∏–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—É –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,<br>
                &nbsp;&nbsp;–≤—ã–¥–µ–ª—è—è —Å—É–±—ä–µ–∫—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç.<br>
                ‚Ä¢ <em>ÁéãÂîØÂæû...</em> ‚Äî ¬´–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç?¬ª<br>
                ‚Ä¢ <em>ÊàëÂèÄ...</em> ‚Äî ¬´–ò–º–µ–Ω–Ω–æ –ª–∏ —è –≤—ã–π–¥—É?¬ª<br>
                ‚Ä¢ <em>‰ΩôÂîØÈπøÁç≤</em> ‚Äî ¬´–û–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é?¬ª (–∏–Ω–≤–µ—Ä—Å–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)<br>
                ‚Ä¢ <em>Âãø</em> ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, <em>ÂîØ</em> ‚Äî —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–π.
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 9</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 9</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ó–∞–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤–æ–π —Ç–µ–º–µ –£—Ä–æ–∫–∞ 9: <strong>—ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</strong>.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —á–∞—Å—Ç–∏—Ü–∞ ¬´ÂîØ¬ª –ø—Ä–∏–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—É –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤—ã–¥–µ–ª—è–µ—Ç —Å—É–±—ä–µ–∫—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. Ë≤ûÁéãÂîØÂæûÊ¥óÈúá</div>
    <div class="oracle-text">Ë≤ûÁéãÂîØÂæûÊ¥óÈúá</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>ÂîØ</strong> ‚Äî —á–∞—Å—Ç–∏—Ü–∞ —ç–º—Ñ–∞–∑—ã: –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–ø–æ–π–¥—ë—Ç –ª–∏¬ª, –∞ <strong>¬´–∏–º–µ–Ω–Ω–æ –ª–∏¬ª</strong></p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. ‰ΩôÂîØÈπøÁç≤</div>
    <div class="oracle-text">‰ΩôÂîØÈπøÁç≤</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>ÂîØ</strong> –≤—ã–¥–µ–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: –≤–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–ø–æ–π–º–∞—é –ª–∏ –æ–ª–µ–Ω—è?¬ª, –∞ <strong>¬´–æ–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é?¬ª</strong></p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å'],
    ['–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –≤ –ø–æ—Ö–æ–¥ –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å'],
    ['–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å –ø–æ—Ö–æ–¥–æ–º']
];

const expected2 = [
    ['–û–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é'],
    ['–û–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é?'],
    ['–Ø –ø–æ–π–º–∞—é –∏–º–µ–Ω–Ω–æ –æ–ª–µ–Ω—è?'],
    ['–ò–º–µ–Ω–Ω–æ –æ–ª–µ–Ω—è —è –ø–æ–π–º–∞—é?']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ò–º–µ–Ω–Ω–æ –ª–∏', '–ü—Ä–∞–≤–∏—Ç–µ–ª—å', '–ø–æ–π–¥—ë—Ç', '–ø–æ—Ö–æ–¥–æ–º', '–Ω–∞', '–ø–ª–µ–º—è', '–°–∏-–ß–∂—ç–Ω—å', '–ù–µ', '—É–∂–µ–ª–∏', '–ø—Ä–∏–∫–∞–∂–µ—Ç', '–º–æ–ª–∏—Ç—Å—è', '–¥–æ–∂–¥—å', '–æ–Ω–∏', '–æ—Ö–æ—Ç—è—Ç—Å—è', '–≤—á–µ—Ä–∞', '–≤—ã—Å—Ç—É–ø–∏—Ç'];
const words2 = ['–û–ª–µ–Ω—è', '–ª–∏', '—è', '–ø–æ–π–º–∞—é', '–ú–Ω–µ', '—É–¥–∞—Å—Ç—Å—è', '–ø–æ–π–º–∞—Ç—å', '–∑–≤–µ—Ä—è', '–ú—ã', '–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è', '–¥–æ–º–æ–π', '—Å–µ–≥–æ–¥–Ω—è', '–∏–º–µ–Ω–Ω–æ', '–∑–∞–π—Ü–∞', '–ª–æ–≤–∏—Ç—å', '–Ω—É–∂–Ω–æ'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

    if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é —Ç–µ–º—É –£—Ä–æ–∫–∞ 9:<br>
            ‚Ä¢ <strong>–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</strong>:<br>
            &nbsp;&nbsp;–ß–∞—Å—Ç–∏—Ü–∞ <em>ÂîØ (w√©i)</em> –ø—Ä–∏–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—É –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,<br>
            &nbsp;&nbsp;–≤—ã–¥–µ–ª—è—è —Å—É–±—ä–µ–∫—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç.<br>
            ‚Ä¢ <em>ÁéãÂîØÂæû...</em> ‚Äî ¬´–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç?¬ª<br>
            ‚Ä¢ <em>‰ΩôÂîØÈπøÁç≤</em> ‚Äî ¬´–û–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é?¬ª (–∏–Ω–≤–µ—Ä—Å–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:';
        if (!isCorrect1) message += '<br>‚Ä¢ –ß–∞—Å—Ç–∏—Ü–∞ ¬´ÂîØ¬ª ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –∞ <strong>—ç–º—Ñ–∞–∑–∞</strong>: ¬´–∏–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å?¬ª';
        if (!isCorrect2) message += '<br>‚Ä¢ ¬´–û–ª–µ–Ω—è –ª–∏ —è –ø–æ–π–º–∞—é?¬ª ‚Äî –ø—Ä–∏–º–µ—Ä <strong>–∏–Ω–≤–µ—Ä—Å–∏–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è</strong>: –æ–±—ä–µ–∫—Ç –≤—ã–Ω–µ—Å—ë–Ω –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–≠–º—Ñ–∞–∑–∞: –£—Ä–æ–∫ 9</title>
</head>
<body>

<h2>–≠–º—Ñ–∞–∑–∞: –í—ã–¥–µ–ª–µ–Ω–∏–µ —á–ª–µ–Ω–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ vs –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è (–∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è <strong>—ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</strong>. –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ –£—Ä–æ–∫–∞ 9.</p>

        <p>üü¢ <strong>–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</strong> ‚Äî —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç–æ—è—Ç –≤ —Å–≤–æ–µ–π –æ–±—ã—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:</p>
        <ul>
            <li>ÁéãÂãøÂæûÊ¥óÈúá w√°ng w√π c√≥ng x«ê zh√®n ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º¬ª</li>
            <li>È°∫Â∫è: –ü–æ–¥–ª–µ–∂–∞—â–µ–µ (Áéã) ‚Üí –û—Ç—Ä–∏—Ü–∞–Ω–∏–µ (Âãø) ‚Üí –°–∫–∞–∑—É–µ–º–æ–µ (Âæû) ‚Üí –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (Ê¥óÈúá)</li>
            <li>–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤, –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Å–æ–±–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞.</li>
        </ul>

        <p>üî¥ <strong>–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</strong> ‚Äî –≤—ã–¥–µ–ª—è–µ–º—ã–π —á–ª–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞—Ä–∫–∏—Ä—É–µ—Ç—Å—è —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂîØ (w√©i)</strong> –∏ —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é:</p>
        <ul>
            <li>ÁéãÂãøÂîØÊ¥óÈúáÂæû w√°ng w√π w√©i x«ê zh√®n c√≥ng ‚Äî ¬´–ù–µ –∑–∞ <strong>–ß–∂—ç–Ω–µ–º</strong> –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å?¬ª</li>
            <li>–ß–∞—Å—Ç–∏—Ü–∞ <strong>ÂîØ</strong> —Å—Ç–∞–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª—è–µ–º–æ–≥–æ —á–ª–µ–Ω–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è <strong>Ê¥óÈúá</strong>).</li>
            <li>–í—ã–¥–µ–ª—è–µ–º—ã–π —á–ª–µ–Ω —á–∞—Å—Ç–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —Å–∫–∞–∑—É–µ–º–æ–µ.</li>
            <li>–°–æ–∑–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å-–¥–æ–≥–∞–¥–∫—É: ¬´–∏–º–µ–Ω–Ω–æ —ç—Ç–æ?¬ª, ¬´–∏–º–µ–Ω–Ω–æ –æ–Ω?¬ª</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "ÁéãÂãøÂæûÊ¥óÈúá" ‚Üí üü¢ (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)<br>
        "ÁéãÂãøÂîØÊ¥óÈúáÂæû" ‚Üí üî¥ (—ç–º—Ñ–∞–∑–∞ –Ω–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ ¬´–ß–∂—ç–Ω—å¬ª)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
        <ol>
            <li>–î–ª—è <strong>–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è</strong> –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ, –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.</li>
            <li>–° —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂîØ (w√©i)</strong>, –∫–æ—Ç–æ—Ä–∞—è —Å–ª–µ–¥—É–µ—Ç <strong>–ø–æ—Å–ª–µ</strong> –≤—ã–¥–µ–ª—è–µ–º–æ–≥–æ —á–ª–µ–Ω–∞.</li>
            <li>–ß—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ <strong>–≤–æ–ø—Ä–æ—Å-–¥–æ–≥–∞–¥–∫—É</strong> –∏–ª–∏ –ø—Ä–∏–¥–∞–Ω–∏–µ –æ—Å–æ–±–æ–≥–æ –≤–µ—Å–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è.</li>
            <li>–í –≤–æ–ø—Ä–æ—Å–∞—Ö, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å <strong>Ë¥û (zhƒìn)</strong>, –∫–∞–∫ –≤ —Ç–µ–∫—Å—Ç–∞—Ö –≥–∞–¥–∞–Ω–∏–π.</li>
        </ol>
        –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –£—Ä–æ–∫–∞ 9.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "ÁéãÂãøÂæûÊ¥óÈúá", type: "direct", explanation: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º¬ª ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–µ–∑ –∞–∫—Ü–µ–Ω—Ç–∞" },
    { text: "ÁéãÂãøÂîØÊ¥óÈúáÂæû", type: "chain", explanation: "–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —á–∞—Å—Ç–∏—Ü–∞ ÂîØ –≤—ã–¥–µ–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ¬´Ê¥óÈúá¬ª ‚Äî ¬´–ù–µ –∑–∞ –ß–∂—ç–Ω–µ–º –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å?¬ª" },
    { text: "‰ªäÊò•ÁéãÂæûÊ¥óÈúá", type: "direct", explanation: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´–í–µ—Å–Ω–æ–π —ç—Ç–æ–≥–æ –≥–æ–¥–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ß–∂—ç–Ω–µ–º¬ª ‚Äî –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ã—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏" },
    { text: "ÁéãÂîØÊ¥óÈúáÂæû", type: "chain", explanation: "–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ¬´–ò–º–µ–Ω–Ω–æ –∑–∞ –ß–∂—ç–Ω–µ–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∞–≤–∏—Ç–µ–ª—å?¬ª ‚Äî –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é ÂîØ" },
    { text: "‰ªäÊò•ÁéãÈÄêÂÖï", type: "direct", explanation: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´–í–µ—Å–Ω–æ–π —ç—Ç–æ–≥–æ –≥–æ–¥–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ—Ö–æ—Ç–∏—Ç—Å—è –Ω–∞ –Ω–æ—Å–æ—Ä–æ–≥–∞¬ª ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞" },
    { text: "Ë≤ûÂîØËå≤ÂïÜÊúâ‰ΩúÁ¶ç", type: "chain", explanation: "–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ¬´–ù–µ –≤ —ç—Ç–æ–º –ª–∏ –≥–æ—Ä–æ–¥–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –±–µ–¥—Å—Ç–≤–∏–µ?¬ª ‚Äî —á–∞—Å—Ç–∏—Ü–∞ ÂîØ –≤—ã–¥–µ–ª—è–µ—Ç –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ –º–µ—Å—Ç–∞ ¬´ÂÖπÂïÜ¬ª" },
    { text: "Êàë‰ΩøÂÖ∂ÁÉñ", type: "direct", explanation: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´–Ø –ø–æ—à–ª—é –Ω–∞ –Ω–µ–≥–æ –±–µ–¥—Å—Ç–≤–∏–µ¬ª ‚Äî –ø–æ–¥–ª–µ–∂–∞—â–µ–µ ¬´Êàë¬ª –≤ –æ–±—ã—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏" },
    { text: "Ë≤ûÂîØÊàëÁ¶ç", type: "chain", explanation: "–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ¬´–ù–µ –Ω–∞–º –ª–∏ –≥—Ä–æ–∑–∏—Ç –±–µ–¥—Å—Ç–≤–∏–µ?¬ª ‚Äî –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –ø–æ–¥–ª–µ–∂–∞—â–µ–º ¬´Êàë¬ª —Å –ø–æ–º–æ—â—å—é ÂîØ" },
    { text: "Â£¨Â∞ÑË≤ùÈπø", type: "direct", explanation: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ¬´–†—ç–Ω—å –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ –æ–ª–µ–Ω—è –ë—ç–π¬ª ‚Äî –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏" },
    { text: "Ë≤ûÂîØÁ¶çÊàë", type: "chain", explanation: "–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ¬´–ù–µ –±–µ–¥—Å—Ç–≤–∏–µ –ª–∏ –≥—Ä–æ–∑–∏—Ç –Ω–∞–º?¬ª ‚Äî –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ ¬´Á¶ç¬ª (–±–µ–¥—Å—Ç–≤–∏–µ) —Å –ø–æ–º–æ—â—å—é ÂîØ" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">–≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–æ–µ</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "chain") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: —á–∞—Å—Ç–∏—Ü–∞ ÂîØ ‚Äî –∫–ª—é—á–µ–≤–æ–π –º–∞—Ä–∫–µ—Ä –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ÂîØ", meaning: "—Å–ª—É–∂. —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç–∏—Ü–∞; —Ç–æ–ª—å–∫–æ" },
  { char: "ÂèÄ", meaning: "—Å–ª—É–∂. —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç–∏—Ü–∞" },
  { char: "Âºú", meaning: "—Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "ÈÄê", meaning: "–ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å" },
  { char: "ÂÖï", meaning: "–Ω–æ—Å–æ—Ä–æ–≥" }
];

const pairs2 = [
  { char: "Èπø", meaning: "–æ–ª–µ–Ω—å" },
  { char: "ÂèÄ", meaning: "—Å–ª—É–∂. —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç–∏—Ü–∞" },
  { char: "ÈÄê", meaning: "–ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å" },
  { char: "Ë≤ù", meaning: "—Ä–∞–∫–æ–≤–∏–Ω–∞" },
  { char: "ÂÖï", meaning: "–Ω–æ—Å–æ—Ä–æ–≥" }

];

pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ÂîØ", meaning: "—Å–ª—É–∂. —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç–∏—Ü–∞; —Ç–æ–ª—å–∫–æ" },
  { char: "ÂèÄ", meaning: "—Å–ª—É–∂. —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç–∏—Ü–∞" },
  { char: "Âºú", meaning: "—Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "ÈÄê", meaning: "–ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å" },
  { char: "ÂÖï", meaning: "–Ω–æ—Å–æ—Ä–æ–≥" }
];

const pairs2 = [
  { char: "Èπø", meaning: "–æ–ª–µ–Ω—å" },
  { char: "ÂèÄ", meaning: "—Å–ª—É–∂. —ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç–∏—Ü–∞" },
  { char: "ÈÄê", meaning: "–ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞—Ç—å" },
  { char: "Ë≤ù", meaning: "—Ä–∞–∫–æ–≤–∏–Ω–∞" },
  { char: "ÂÖï", meaning: "–Ω–æ—Å–æ—Ä–æ–≥" }

];

pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ÂîØ", pinyin: "w√©i" },
  { char: "ÂèÄ", pinyin: "hu√¨" },
  { char: "Âºú", pinyin: "ji√†ng" },
  { char: "ÈÄê", pinyin: "zh√∫" },
  { char: "ÂÖï", pinyin: "s√¨" }
];

const pairs2 = [
  { char: "Èπø", pinyin: "l√π" },
  { char: "ÂîØ", pinyin: "w√©i" },
  { char: "Âºú", pinyin: "ji√†ng" },
  { char: "ÂÖï", pinyin: "s√¨" },
  { char: "Ë≤ù", pinyin: "b√®i" }
];

pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ÂîØ", pinyin: "w√©i" },
  { char: "ÂèÄ", pinyin: "hu√¨" },
  { char: "Âºú", pinyin: "ji√†ng" },
  { char: "ÈÄê", pinyin: "zh√∫" },
  { char: "ÂÖï", pinyin: "s√¨" }
];

const pairs2 = [
  { char: "Èπø", pinyin: "l√π" },
  { char: "ÂîØ", pinyin: "w√©i" },
  { char: "Âºú", pinyin: "ji√†ng" },
  { char: "ÂÖï", pinyin: "s√¨" },
  { char: "Ë≤ù", pinyin: "b√®i" }
];

pairs = pairs2

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âãø ‚Äî –Ω–µ, –ª–∏ (–≤ –≤–æ–ø—Ä–æ—Å–∞—Ö)</li>
      <li>Âæû ‚Äî –ø–æ–π—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞</li>
      <li>Ê¥óÈúá ‚Äî –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</li>
      <li>Ë≤û ‚Äî –≥–∞–¥–∞—é—Ç, —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Ë≤û', 'Áéã', 'Âãø', 'Âæû', 'Ê¥óÈúá'];
    const allChars = [
      'Ë≤û', 'Áéã', 'Âãø', 'Âæû', 'Ê¥óÈúá',
      '‰πô', 'ÂçØ', 'Âçú', '‰Ωô', '‰∏Å', '‰∏ë', '‰ªä', 'Êò•', 'Ëæõ', 'Â∑≥', 'ÂîØ', 'ÂÖ∂', 'Èõ®', 'Âá∫', 'Áñæ', '‰∫°', 'Êúâ', 'Ë∫´', 'ÂèÄ', 'Âºã', 'Â∞Ñ', 'Áî∞', 'ÂÖÅ', '‰∏ç', 'ÂÖ∂'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ë≤ûÁéãÂãøÂæûÊ¥óÈúá';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ë≤û ‚Äî –≥–∞–¥–∞—é—Ç, —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç</li>
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>ÂîØ ‚Äî –∏–º–µ–Ω–Ω–æ –ª–∏? (—ç–º—Ñ–∞–∑–∞, –≤–æ–ø—Ä–æ—Å)</li>
      <li>Âæû ‚Äî –ø–æ–π—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞</li>
      <li>Ê¥óÈúá ‚Äî –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?" ‚Üí Ë≤ûÁéãÂîØÂæûÊ¥óÈúá
    const expected = ['Ë≤û', 'Áéã', 'ÂîØ', 'Âæû', 'Ê¥óÈúá'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–≤–∑—è—Ç—ã –∏–∑ —É—Ä–æ–∫–æ–≤ 1‚Äì9)
    const allChars = [
      'Ë≤û', 'Áéã', 'ÂîØ', 'Âæû', 'Ê¥óÈúá',
      '‰πô', 'ÂçØ', 'Âçú', '‰Ωô', '‰∏Å', '‰∏ë', '‰ªä', 'Êò•', 'Ëæõ', 'Â∑≥', 'Âãø', 'ÂÖ∂', 'Èõ®', 'Âá∫', 'Áñæ', '‰∫°', 'Êúâ', 'Ë∫´', 'ÂèÄ', 'Âºã', 'Â∞Ñ', 'Áî∞', 'ÂÖÅ', '‰∏ç', 'ÂÖ∂', 'Êàë', '‰æÜ', 'Âèó', 'ÈªçÂπ¥', '‰∫é', 'Â§ßÁî≤', 'Ê±Ç'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ë≤ûÁéãÂîØÂæûÊ¥óÈúá';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ë≤û ‚Äî –≥–∞–¥–∞—é—Ç, —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç</li>
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>ÂîØ ‚Äî –∏–º–µ–Ω–Ω–æ –ª–∏? (—ç–º—Ñ–∞–∑–∞, –≤–æ–ø—Ä–æ—Å)</li>
      <li>Âæû ‚Äî –ø–æ–π—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞</li>
      <li>Ê¥óÈúá ‚Äî –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?" ‚Üí Ë≤ûÁéãÂîØÂæûÊ¥óÈúá
    const expected = ['Ë≤û', 'Áéã', 'ÂîØ', 'Âæû', 'Ê¥óÈúá'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–≤–∑—è—Ç—ã –∏–∑ —É—Ä–æ–∫–æ–≤ 1‚Äì9)
    const allChars = [
      'Ë≤û', 'Áéã', 'ÂîØ', 'Âæû', 'Ê¥óÈúá',
      '‰πô', 'ÂçØ', 'Âçú', '‰Ωô', '‰∏Å', '‰∏ë', '‰ªä', 'Êò•', 'Ëæõ', 'Â∑≥', 'ÂèÄ', 'Âãø', 'ÂÖ∂', 'Èõ®', 'Âá∫', 'Áñæ', '‰∫°', 'Êúâ', 'Ë∫´', 'Âºã', 'Â∞Ñ', 'Áî∞', 'ÂÖÅ', '‰∏ç', 'ÂÖ∂', 
      'Êàë', '‰æÜ', 'Âèó', 'ÈªçÂπ¥', '‰∫é', 'Â§ßÁî≤', 'Ê±Ç', 'Êàå', 'ÈÄÜ', '‰ª•', 'Áæå', 'ÂÆó', 'ÈñÄ', 'Âü∑', 'Â¢†', 'Áî®', 'Âú®', 'Áç≤', 'Á•ñ', 'Â∞è', 'Ê≠•', 'Áà∂', 'Á§∫', 'Âæ°', 'Èº†'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ë≤ûÁéãÂîØÂæûÊ¥óÈúá';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ë≤û ‚Äî –≥–∞–¥–∞—é—Ç, —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç</li>
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>ÂîØ ‚Äî –∏–º–µ–Ω–Ω–æ –ª–∏? (—á–∞—Å—Ç–∏—Ü–∞ —ç–º—Ñ–∞–∑—ã –≤ –≤–æ–ø—Ä–æ—Å–µ)</li>
      <li>Âæû ‚Äî –ø–æ–π—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞</li>
      <li>Ê¥óÈúá ‚Äî –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?" ‚Üí Ë≤ûÁéãÂîØÂæûÊ¥óÈúá
    const expected = ['Ë≤û', 'Áéã', 'ÂîØ', 'Âæû', 'Ê¥óÈúá'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–≤–∑—è—Ç—ã –∏–∑ –£—Ä–æ–∫–æ–≤ 1‚Äì9)
    const allChars = [
      'Ë≤û', 'Áéã', 'ÂîØ', 'Âæû', 'Ê¥óÈúá',
      '‰πô', 'ÂçØ', 'Âçú', '‰Ωô', '‰∏Å', '‰∏ë', '‰ªä', 'Êò•', 'Ëæõ', 'Â∑≥', 'ÂèÄ', 'Âãø', 'ÂÖ∂', 'Èõ®', 'Âá∫', 'Áñæ', '‰∫°', 'Êúâ', 'Ë∫´', 'Âºã', 'Â∞Ñ', 'Áî∞', 'ÂÖÅ', '‰∏ç', 'ÂÖ∂', 
      'Êàë', '‰æÜ', 'Âèó', 'ÈªçÂπ¥', '‰∫é', 'Â§ßÁî≤', 'Ê±Ç', 'Êàå', 'ÈÄÜ', '‰ª•', 'Áæå', 'ÂÆó', 'ÈñÄ', 'Âü∑', 'Â¢†', 'Áî®', 'Âú®', 'Áç≤', 'Á•ñ', 'Â∞è', 'Ê≠•', 'Áà∂', 'Á§∫', 'Âæ°', 'Èº†'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ë≤ûÁéãÂîØÂæûÊ¥óÈúá';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 9 ‚Äî –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Ë≤ûÁéãÂîØÂæûÊ¥óÈúá¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">zhƒìn w√°ng w√©i c√≥ng x«ê zh√®n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å.", correct: false },
      { text: "–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: false },
      { text: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –ø–ª–µ–º–µ–Ω–∏ –°–∏-–ß–∂—ç–Ω—å –≤—ã—Å—Ç—É–ø–∏—Ç—å.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –ß–∞—Å—Ç–∏—Ü–∞ <strong>ÂîØ (w√©i)</strong> –ø—Ä–∏–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—É <strong>—ç–º—Ñ–∞–∑—É</strong>:<br>
          –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å ¬´–ü–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å?¬ª, –∞ <em>¬´–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç?¬ª</em>,<br>
          —á—Ç–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Å—É–±—ä–µ–∫—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏—Ü—É ÂîØ ‚Äî –æ–Ω–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç —ç–º—Ñ–∞–∑—É –≤ –≤–æ–ø—Ä–æ—Å–µ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 9 ‚Äî –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´Ë≤ûÁéãÂîØÂæûÊ¥óÈúá¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏—Ü—É ¬´ÂîØ¬ª ‚Äî –æ–Ω–∞ –ø—Ä–∏–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—É —ç–º—Ñ–∞–∑—É, –≤—ã–¥–µ–ª—è—è –ø–æ–¥–ª–µ–∂–∞—â–µ–µ.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">zhƒìn w√°ng w√©i c√≥ng x«ê zh√®n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å.", correct: false },
      { text: "–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: false },
      { text: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –ø–ª–µ–º–µ–Ω–∏ –°–∏-–ß–∂—ç–Ω—å –≤—ã—Å—Ç—É–ø–∏—Ç—å.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</strong> —Å —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂîØ (w√©i)</strong>:<br>
          ‚Ä¢ <strong>Ë≤û zhƒìn</strong> ‚Äî ¬´—Å–ø—Ä–∞—à–∏–≤–∞—é—Ç¬ª<br>
          ‚Ä¢ <strong>Áéã w√°ng</strong> ‚Äî ¬´–ø—Ä–∞–≤–∏—Ç–µ–ª—å¬ª<br>
          ‚Ä¢ <strong>ÂîØ w√©i</strong> ‚Äî —á–∞—Å—Ç–∏—Ü–∞, –ø—Ä–∏–¥–∞—é—â–∞—è –≤–æ–ø—Ä–æ—Å—É –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å<br>
          ‚Ä¢ <strong>ÂæûÊ¥óÈúá c√≥ng x«ê zh√®n</strong> ‚Äî ¬´–ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å¬ª<br>
          –í—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç: <em>¬´–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º?¬ª</em> ‚Äî —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Å—É–±—ä–µ–∫—Ç–µ.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏—Ü—É ÂîØ ‚Äî –æ–Ω–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç —ç–º—Ñ–∞–∑—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 9 ‚Äî –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´Ë≤ûÁéãÂîØÂæûÊ¥óÈúá¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏—Ü—É ¬´ÂîØ¬ª ‚Äî –æ–Ω–∞ –ø—Ä–∏–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—É —ç–º—Ñ–∞–∑—É, –≤—ã–¥–µ–ª—è—è –ø–æ–¥–ª–µ–∂–∞—â–µ–µ.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">zhƒìn w√°ng w√©i c√≥ng x«ê zh√®n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å.", correct: false },
      { text: "–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: false },
      { text: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –ø–ª–µ–º–µ–Ω–∏ –°–∏-–ß–∂—ç–Ω—å –≤—ã—Å—Ç—É–ø–∏—Ç—å.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</strong> —Å —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂîØ (w√©i)</strong>:<br>
          ‚Ä¢ <strong>Ë≤û zhƒìn</strong> ‚Äî ¬´—Å–ø—Ä–∞—à–∏–≤–∞—é—Ç¬ª<br>
          ‚Ä¢ <strong>Áéã w√°ng</strong> ‚Äî ¬´–ø—Ä–∞–≤–∏—Ç–µ–ª—å¬ª<br>
          ‚Ä¢ <strong>ÂîØ w√©i</strong> ‚Äî —á–∞—Å—Ç–∏—Ü–∞, –ø—Ä–∏–¥–∞—é—â–∞—è –≤–æ–ø—Ä–æ—Å—É –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å<br>
          ‚Ä¢ <strong>ÂæûÊ¥óÈúá c√≥ng x«ê zh√®n</strong> ‚Äî ¬´–ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å¬ª<br>
          –í—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç: <em>¬´–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º?¬ª</em> ‚Äî —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Å—É–±—ä–µ–∫—Ç–µ.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏—Ü—É ÂîØ ‚Äî –æ–Ω–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç —ç–º—Ñ–∞–∑—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 9 ‚Äî –≠–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´Ë≤ûÁéãÂîØÂæûÊ¥óÈúá¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏—Ü—É ¬´ÂîØ¬ª ‚Äî –æ–Ω–∞ –ø—Ä–∏–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—É —ç–º—Ñ–∞–∑—É, –≤—ã–¥–µ–ª—è—è –ø–æ–¥–ª–µ–∂–∞—â–µ–µ.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">zhƒìn w√°ng w√©i c√≥ng x«ê zh√®n</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å.", correct: false },
      { text: "–ù–µ –ø–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: false },
      { text: "–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å?", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –ø–ª–µ–º–µ–Ω–∏ –°–∏-–ß–∂—ç–Ω—å –≤—ã—Å—Ç—É–ø–∏—Ç—å.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—ç–º—Ñ–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</strong> —Å —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂîØ (w√©i)</strong>:<br>
          ‚Ä¢ <strong>Ë≤û zhƒìn</strong> ‚Äî ¬´—Å–ø—Ä–∞—à–∏–≤–∞—é—Ç¬ª<br>
          ‚Ä¢ <strong>Áéã w√°ng</strong> ‚Äî ¬´–ø—Ä–∞–≤–∏—Ç–µ–ª—å¬ª<br>
          ‚Ä¢ <strong>ÂîØ w√©i</strong> ‚Äî —á–∞—Å—Ç–∏—Ü–∞, –ø—Ä–∏–¥–∞—é—â–∞—è –≤–æ–ø—Ä–æ—Å—É –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å<br>
          ‚Ä¢ <strong>ÂæûÊ¥óÈúá c√≥ng x«ê zh√®n</strong> ‚Äî ¬´–ø–æ–π–¥—ë—Ç –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –°–∏-–ß–∂—ç–Ω—å¬ª<br>
          –í—Å—è —Ñ—Ä–∞–∑–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å —Å –∞–∫—Ü–µ–Ω—Ç–æ–º: <em>¬´–ò–º–µ–Ω–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–π–¥—ë—Ç?¬ª</em>
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏—Ü—É ÂîØ ‚Äî –æ–Ω–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç —ç–º—Ñ–∞–∑—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>



==== –ò–ó –ü–ê–ü–ö–ò –£–†–û–ö–ê 10: ====
=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ ¬´ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª —É—Ç–æ—á–Ω—è–µ—Ç —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Å–µ–π—á–∞—Å, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
          ‚Ä¢ <strong>ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br>
          –ó–¥–µ—Å—å <strong>ÂÖ∂</strong> ‚Äî <em>–º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤</em>, –∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –£—Ä–æ–∫–∞ 10.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´–Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª –∏ ¬´–µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 10: –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 10 —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú¬ª ‚Äî –≤–µ—Ä–Ω–æ: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ ¬´ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª —É—Ç–æ—á–Ω—è–µ—Ç —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é ¬´‰∏çÂòâ¬ª", 
      correct: true 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ‚Äû–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ‚Äú¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´‰∏çÂêâ¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª, –∞ –Ω–µ ¬´—Ö–æ—Ä–æ—à–æ¬ª", 
      correct: false 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ‚Äû–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?‚Äú¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Âç†Êõ∞¬ª –≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å (–æ—Ç–≤–µ—Ç), –∞ –Ω–µ –≤–æ–ø—Ä–æ—Å", 
      correct: false 
    },
    { 
      text: "¬´–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Å–µ–π—á–∞—Å, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Ä–µ—á—å –∏–¥—ë—Ç –æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –≥–∞–¥–∞–Ω–∏—è, –∞ –Ω–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è¬ª, 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –£—Ä–æ–∫–∞ 10, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ <strong>—Å–ª–æ–∂–Ω—É—é —É—Å–ª–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É</strong>:<br>
        ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
        ‚Ä¢ <strong>ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br><br>
        –ó–¥–µ—Å—å <strong>ÂÖ∂</strong> ‚Äî <em>–º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤</em>, –∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –í—Å—è —Ñ—Ä–∞–∑–∞ ‚Äî –ø—Ä–∏–º–µ—Ä —Å–ª–æ–∂–Ω–æ–≥–æ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –±–µ–∑ —Å–æ—é–∑–æ–≤, –≥–¥–µ —Å–≤—è–∑—å –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ —Å–º—ã—Å–ª—É.<br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´Âç†Êõ∞¬ª –≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å, –∞ ¬´ÂÖ∂¬ª –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–≤–∞—è —É—Å–ª–æ–≤–Ω—É—é —Å–≤—è–∑—å.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>Ëã•Ëå≤‰πÉÊ≠ª</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>ÊúâÁ•üÂÖ∂Êúâ‰æÜËâ±</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>‰πÉËå≤‰∫¶ÊúâÁ•ü</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª</label>
            <label><input type="radio" name="q1" value="–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç">–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">Ëã•Ëå≤‰πÉÊ≠ª</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">ru√≤ zƒ´, n«éi s«ê</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç">–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç</label>
            <label><input type="radio" name="q2" value="–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç">–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç</label>
            <label><input type="radio" name="q2" value="–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–æ –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ —Å—á–∞—Å—Ç—å—é">–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–æ –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ —Å—á–∞—Å—Ç—å—é</label>
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ö –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ö –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÊúâÁ•üÂÖ∂Êúâ‰æÜËâ±</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y«íu su√¨ q√≠ y«íu l√°i jiƒÅn</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏">–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</label>
            <label><input type="radio" name="q3" value="–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏">–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</label>
            <label><input type="radio" name="q3" value="–ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–¥, —Ç–æ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏">–ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–¥, —Ç–æ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</label>
            <label><input type="radio" name="q3" value="–ù–µ—Ç –≤—Ä–µ–¥–∞, –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–∏–¥—É—Ç">–ù–µ—Ç –≤—Ä–µ–¥–∞, –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–∏–¥—É—Ç</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰πÉËå≤‰∫¶ÊúâÁ•ü</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">n«éi zƒ´ y√¨ y«íu su√¨</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–ò –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ç–æ–∂–µ –µ—Å—Ç—å –≤—Ä–µ–¥">–ò –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ç–æ–∂–µ –µ—Å—Ç—å –≤—Ä–µ–¥</label>
            <label><input type="radio" name="q4" value="–ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–¥, —Ç–æ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏">–ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–¥, —Ç–æ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</label>
            <label><input type="radio" name="q4" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª</label>
            <label><input type="radio" name="q4" value="–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç">–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª",
        q2: "–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç",
        q3: "–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏",
        q4: "–ò –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ç–æ–∂–µ –µ—Å—Ç—å –≤—Ä–µ–¥"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 10:<br>
                ‚Ä¢ <strong>Âç†Êõ∞</strong> ‚Äî –≤–≤–æ–¥ –ø—Ä—è–º–æ–π —Ä–µ—á–∏ –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è<br>
                ‚Ä¢ <strong>ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ<br>
                ‚Ä¢ <strong>Ëã•Ëå≤‰πÉÊ≠ª</strong> ‚Äî ¬´–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ —É–º—Ä—ë—Ç¬ª (—É—Å–ª–æ–≤–∏–µ + —Å–ª–µ–¥—Å—Ç–≤–∏–µ)<br>
                ‚Ä¢ <strong>‰πÉ</strong> ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è<br>
                ‚Ä¢ <strong>ÊúâÁ•ü</strong> ‚Äî ¬´–µ—Å—Ç—å –≤—Ä–µ–¥¬ª ‚Äî –∫–ª—é—á–µ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 10</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 10</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ó–∞–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤–æ–π —Ç–µ–º–µ –£—Ä–æ–∫–∞ 10: <strong>—Å–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∏–ª–∏ —É—Å–ª–æ–≤–∏–µ!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ</div>
    <div class="oracle-text">ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Âç†Êõ∞</strong> –≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å. <strong>ÂÖ∂Âòâ</strong> ‚Äî —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ: ¬´–µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. Ëã•Ëå≤‰πÉÊ≠ª</div>
    <div class="oracle-text">Ëã•Ëå≤‰πÉÊ≠ª</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Ëã•</strong> = ¬´–µ—Å–ª–∏¬ª, <strong>‰πÉ</strong> = ¬´—Ç–æ–≥–¥–∞, –∏ —Ç–æ–≥–¥–∞¬ª ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—Å—Ç–≤–∏–µ</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–µ–ª: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª']
];

const expected2 = [
    ['–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç'],
    ['–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ–≥–¥–∞ –æ–Ω–∞ —É–º—Ä—ë—Ç'],
    ['–ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å', '–ø—Ä–æ—á–∏—Ç–∞–ª', '–æ—Ç–≤–µ—Ç', '–ù–µ', '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ', '–ê', '–µ—Å–ª–∏', '–∏', '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ', '—Ç–æ', '–∫', '–Ω–µ—Å—á–∞—Å—Ç—å—é', '—É—Ä–æ–∂–∞–π', '–¥–æ–∂–¥—å', '–∏', '—Å–æ–ª–Ω—Ü–µ', '–æ–Ω–∏', '–º–æ–ª–∏–ª–∏—Å—å', '–≤', '—Ö—Ä–∞–º'];
const words2 = ['–ï—Å–ª–∏', '–±—É–¥–µ—Ç', '—Ç–∞–∫', '—Ç–æ', '–æ–Ω–∞', '—É–º—Ä—ë—Ç', '–º—ã', '–ø—Ä–∏—à–ª–∏', '–Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫', '—Ü–∞—Ä—å', '–æ—Ç–ø—Ä–∞–≤–∏–ª', '–≤–µ—Å—Ç–Ω–∏–∫–∞', '–≤—á–µ—Ä–∞', '–ø—Ä–∏–∫–∞–∑–∞–ª', '–æ—Ö–æ—Ç–∏—Ç—å—Å—è', '–≤', '–≥–æ—Ä–∞—Ö'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option.split(' ')));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option.split(' ')));

    if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é —Ç–µ–º—É –£—Ä–æ–∫–∞ 10:<br>
            ‚Ä¢ <strong>–°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
            &nbsp;&nbsp;–ß–∞—Å—Ç–∏ —Å–≤—è–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —Å–º—ã—Å–ª—É, –±–µ–∑ —Å–æ—é–∑–æ–≤.<br>
            ‚Ä¢ <em>ÂÖ∂ÂòâÔºå‰∏çÂêâ</em> ‚Äî —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ<br>
            ‚Ä¢ <em>Ëã•Ëå≤‰πÉÊ≠ª</em> ‚Äî ¬´–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ —É–º—Ä—ë—Ç¬ª<br>
            ‚Ä¢ <em>Âç†Êõ∞</em> ‚Äî –≤–≤–æ–¥ –ø—Ä—è–º–æ–π —Ä–µ—á–∏ –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:';
        if (!isCorrect1) message += '<br>‚Ä¢ ¬´ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∫ ¬´‰∏çÂòâ¬ª';
        if (!isCorrect2) message += '<br>‚Ä¢ ¬´‰πÉ¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—Å—Ç–≤–∏–µ: ¬´—Ç–æ–≥–¥–∞¬ª, ¬´–∏ —Ç–æ–≥–¥–∞¬ª';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: –£—Ä–æ–∫ 10</title>
</head>
<body>

<h2>–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: –°–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ vs –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö, —É—Å–ª–æ–≤–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂÖ∂ (q√≠)</strong>. –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ –£—Ä–æ–∫–∞ 10.</p>

        <p>üü¢ <strong>–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</strong> ‚Äî –≤—ã—Ä–∞–∂–∞–µ—Ç –ø—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑:</p>
        <ul>
            <li>ÊúâÁ•ü y«íu su√¨ ‚Äî ¬´–µ—Å—Ç—å –∑–Ω–∞–º–µ–Ω–∏–µ¬ª</li>
            <li>‰∫°Á¶ç w√°ng hu√≤ ‚Äî ¬´–Ω–µ—Ç –±–µ–¥—ã¬ª</li>
            <li>–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å–ª–æ–≤–∏–π, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –∏–ª–∏ —Å–æ–º–Ω–µ–Ω–∏–π.</li>
        </ul>

        <p>üî¥ <strong>–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞</strong> ‚Äî –≤—ã—Ä–∞–∂–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ, —É—Å–ª–æ–≤–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –ø–æ–º–æ—â—å—é —á–∞—Å—Ç–∏—Ü—ã <strong>ÂÖ∂ (q√≠)</strong>:</p>
        <ul>
            <li>ÂÖ∂Êúâ‰æÜËâ±ÔºåÂÖ∂‰∫°‰æÜËâ± q√≠ y«íu l√°i jiƒÅn, q√≠ w√°ng l√°i jiƒÅn ‚Äî ¬´[–ï—Å–ª–∏] –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã, [–µ—Å–ª–∏] –Ω–µ –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã¬ª</li>
            <li>‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠ ‚Äî ¬´–ù–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. [–ê –µ—Å–ª–∏ –∏] –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª</li>
            <li>–ß–∞—Å—Ç–∏—Ü–∞ <strong>ÂÖ∂</strong> –≤–≤–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –∏–ª–∏ —É—Å–ª–æ–≤–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.</li>
            <li>–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞.</li>
            <li>–ù–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ ¬´–µ—Å–ª–∏¬ª, ¬´–∞ –µ—Å–ª–∏¬ª, ¬´—Ç–æ... —Ç–æ¬ª.</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "Êó¨‰∫°Á¶ç" ‚Üí üü¢ (–ø—Ä–æ—Å—Ç–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)<br>
        "ÂÖ∂Êúâ‰æÜËâ±ÔºåÂÖ∂‰∫°‰æÜËâ±" ‚Üí üî¥ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å <strong>ÂÖ∂</strong> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
        <ol>
            <li>–î–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è <strong>—É—Å–ª–æ–≤–Ω–æ—Å—Ç–∏</strong> –∏ <strong>–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã</strong> –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö.</li>
            <li>–° —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂÖ∂ (q√≠)</strong>, –∫–æ—Ç–æ—Ä–∞—è –≤–≤–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é.</li>
            <li>–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å <strong>–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å</strong> –æ–¥–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ (¬´–µ—Å–ª–∏... —Ç–æ¬ª).</li>
            <li>–í –æ—Ç–≤–µ—Ç–∞—Ö –ø—Ä–∞–≤–∏—Ç–µ–ª—è (<strong>ÁéãÂç†Êõ∞</strong>) –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.</li>
        </ol>
        –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –£—Ä–æ–∫–∞ 10.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Êó¨‰∫°Á¶ç", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–ó–∞ –¥–µ—Å—è—Ç–∏–¥–Ω–µ–≤–∫—É –Ω–µ –±—É–¥–µ—Ç –±–µ–¥—ã¬ª ‚Äî –ø—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" },
    { text: "ÂÖ∂Êúâ‰æÜËâ±ÔºåÂÖ∂‰∫°‰æÜËâ±", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´[–ï—Å–ª–∏] –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã, [–µ—Å–ª–∏] –Ω–µ –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã¬ª ‚Äî —á–∞—Å—Ç–∏—Ü–∞ ÂÖ∂ –≤–≤–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏" },
    { text: "ÊúâÁ•ü", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–ï—Å—Ç—å –∑–Ω–∞–º–µ–Ω–∏–µ¬ª ‚Äî –ø—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ —É—Å–ª–æ–≤–∏–π" },
    { text: "ÂÖ∂Êúâ‰æÜËâ±", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´[–ï—Å–ª–∏] –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã¬ª ‚Äî –≤–≤–µ–¥–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é ÂÖ∂" },
    { text: "ÁéãÂç†Êõ∞ÊúâÁ•ü", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–µ–ª –æ—Ç–≤–µ—Ç: –µ—Å—Ç—å –∑–Ω–∞–º–µ–Ω–∏–µ¬ª ‚Äî –ø—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" },
    { text: "ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–µ–ª –æ—Ç–≤–µ—Ç: –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. [–ê –µ—Å–ª–∏ –∏] –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–æ–≤" },
    { text: "ÂÖÅÊúâ‰æÜËâ±", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∏ –±–µ–¥—ã¬ª ‚Äî –∫–æ–Ω—Å—Ç–∞—Ç–∞—Ü–∏—è —Ñ–∞–∫—Ç–∞" },
    { text: "ÂÖ∂ÊúâË®≠Ôºå‰∏çÂêâÔºåÂÖ∂ÂîØÁî≤ÊúâË®≠ÔºåÂêâ", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´[–ï—Å–ª–∏] –±—É–¥–µ—Ç –∑–Ω–∞–º–µ–Ω–∏–µ, –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é; [–µ—Å–ª–∏] –∑–Ω–∞–º–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ –¥–µ–Ω—å —Ü–∑—è, –∫ —Å—á–∞—Å—Ç—å—é¬ª ‚Äî —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º" },
    { text: "ÂúüÊñπÂæÅ‰∫éÊàëÊù±ÈÑô", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–ü–ª–µ–º—è –¢—É –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ –Ω–∞—à—É –≤–æ—Å—Ç–æ—á–Ω—É—é –æ–∫—Ä–∞–∏–Ω—É¬ª ‚Äî –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" },
    { text: "ÂÖ∂ÂîØËæõÊúâË®≠Ôºå‰∫¶‰∏çÂêâ", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´[–ï—Å–ª–∏] –∑–Ω–∞–º–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ –¥–µ–Ω—å —Å–∏–Ω—å, [—Ç–æ] —Ç–∞–∫–∂–µ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª ‚Äî –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">–ü—Ä–æ—Å—Ç–æ–µ</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "chain") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: —á–∞—Å—Ç–∏—Ü–∞ ÂÖ∂ ‚Äî –∫–ª—é—á–µ–≤–æ–π –º–∞—Ä–∫–µ—Ä —É—Å–ª–æ–≤–Ω—ã—Ö –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs4;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs5;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ—Å—Ç–∏: ‚Äû–ù–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. –ê –µ—Å–ª–∏ –∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âç†Êõ∞ ‚Äî –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç (–≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –∞–∫—Ç, "–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª")</li>
      <li>‰∏çÂòâ ‚Äî –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è / –Ω–µ –±—É–¥–µ—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>ÂÖ∂Âòâ ‚Äî –µ—Å–ª–∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è</li>
      <li>‰∏çÂêâ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é</li>
      <li>Ëã• ‚Äî –µ—Å–ª–∏, –≤ —Å–ª—É—á–∞–µ</li>
      <li>‰πÉ ‚Äî —Ç–æ–≥–¥–∞, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âòâ', '‰∏ç', 'Âêâ'];
    const allChars = [
      'Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âêâ', '‰πÉ',
      'Áô∏', 'Â∑≥', 'Âçú', '„±ø', 'Ë¥û', 'Êó¨', '‰∫°', 'Á•∏', 'Êúâ', 'Êù•', 'Ëâ∞', 'ËøÑ', 'Ëá≥', '‰∫î', 'Êó•', '‰∏Å', 'ÈÖâ', 'ÂÖÅ', 'Ëá™', 'Ë•ø', 'Ê¥ó', 'Èúá', 'Âëä', 'Âúü', 'Êñπ', 'ÂæÅ', '‰∫é', 'Êàë', '‰∏ú', 'ÈÑô', 'ÁÉñ', '‰∫å', 'ÈÇë', 'Â∑•', '‰∫¶', '‰æµ', 'Áî∞', 'Âõõ', 'Â∫ö', 'Áî≥', 'Âåó', 'Â≠ê', 'ÂïÜ', 'Êòî', 'Áî≤', 'Ëæ∞', '‰øò', '‰∫∫', 'ÂçÅ', 'Êúâ', 'ÂÖ≠', 'Êàä', 'Âçà', 'ÂæÄ', 'ÈÄê', 'ÂÖï', 'Â∞è', 'Ëá£', 'Âè∂', 'ËΩ¶', 'È©¨', 'Á°™', 'È©≠', 'Â§Æ', 'Âù†', 'Â¶á', 'Â•Ω', 'Â®©', 'Ê≠ª', 'Âêé'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs2

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs3

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs5

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs4

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. –ê –µ—Å–ª–∏ –∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âç†Êõ∞ ‚Äî (–≥–∞–¥–∞—Ç–µ–ª—å) —Å–∫–∞–∑–∞–ª, –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç</li>
      <li>‰∏çÂòâ ‚Äî –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è</li>
      <li>ÂÖ∂Âòâ ‚Äî –µ—Å–ª–∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è</li>
      <li>‰∏çÂêâ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é</li>
      <li>Ëã• ‚Äî –µ—Å–ª–∏</li>
      <li>Ôºå ‚Äî (–∑–∞–ø—è—Ç–∞—è, –ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ
    // –ü–µ—Ä–µ–≤–æ–¥: –ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: "–ù–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. –ï—Å–ª–∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é"
    const expected = ['Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âòâ', '‰∏ç', 'Âêâ'];

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ ‚Äî –∏–∑ –£—Ä–æ–∫–∞ 10 –∏ –±–∞–∑–æ–≤–æ–π –ª–µ–∫—Å–∏–∫–∏
    const allChars = [
      'Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âêâ', '‰πÉ', 'Ëå≤', 'Êúâ', 'Á•ü',
      'Êù•', 'Ëâ∞', 'ËøÑ', 'Ëá≥', '‰∫î', 'Êó•', '‰∏Å', 'ÈÖâ', 'ÂÖÅ', 'Ëá™', 'Ë•ø', 'Ê¥ó',
      'Èúá', 'Âëä', 'Âúü', 'Êñπ', 'ÂæÅ', '‰∫é', 'Êàë', '‰∏ú', 'ÈÑô', 'ÁÉñ', '‰∫å', 'ÈÇë',
      '‰∫¶', '‰æµ', 'Áî∞', 'Âõõ', 'Â∫ö', 'Áî≥', 'Âåó', 'Â≠ê', 'ÂïÜ', 'Êòî', 'Áî≤', 'Ëæ∞',
      '‰øò', '‰∫∫', 'ÂçÅ', 'Êúâ', 'ÂÖ≠', 'Êàä', 'Âçà', 'ÂæÄ', 'ÈÄê', 'ÂÖï', 'Â∞è', 'Ëá£',
      'Âè∂', 'Ëªä', 'È¶¨', 'Á°™', 'È¶≠', 'Â§Æ', 'Âù†', 'Â¶á', 'Â•Ω', 'Â®©', 'Ê≠ª', 'ÂÅÅ',
      'Èõ®', 'Ë¥û', 'Âçú', 'Áô∏', 'Â∑≥', 'ÂÖÅ', '‰∫°', 'Á•∏', '‰ªä', 'Êó¨', 'Âêé', 'Ëá≥'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âç†Êõ∞ ‚Äî (–≥–∞–¥–∞—Ç–µ–ª—å) —Å–∫–∞–∑–∞–ª, –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç</li>
      <li>‰∏çÂòâ ‚Äî –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>ÂÖ∂Âòâ ‚Äî –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>‰∏çÂêâ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é</li>
      <li>Ëã• ‚Äî –µ—Å–ª–∏</li>
      <li>Ôºå ‚Äî (–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞, –∑–∞–ø—è—Ç–∞—è)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ
    // –ü–µ—Ä–µ–≤–æ–¥: –ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: "–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é"
    const expected = ['Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âòâ', '‰∏ç', 'Âêâ'];

    // –í—Å–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏–∑ –£—Ä–æ–∫–∞ 10 –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤ (–¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
    const allChars = [
      'Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âêâ', 'Êúâ', 'Á•ü', '‰æÜ', 'Ëâ±', 'ËøÑ', 'Ëá≥',
      '‰∫î', 'Êó•', '‰∏Å', 'ÈÖâ', 'ÂÖÅ', 'Ëá™', 'Ë•ø', 'Ê¥ó', 'Èúá', 'Âëä', 'Âúü', 'Êñπ', 'ÂæÅ',
      '‰∫é', 'Êàë', 'Êù±', 'ÈÑô', 'ÁÉñ', '‰∫å', 'ÈÇë', '‰∫¶', '‰æµ', 'Áî∞', 'Âõõ', 'Â∫ö', 'Áî≥',
      'Âåó', 'Â≠ê', 'ÂïÜ', 'Êòî', 'Áî≤', 'Ëæ∞', '‰øò', '‰∫∫', 'ÂçÅ', 'Âèà', 'ÂÖ≠', 'Êàä', 'Âçà',
      'ÂæÄ', 'ÈÄê', 'ÂÖï', 'Â∞è', 'Ëá£', 'Âè∂', 'Ëªä', 'È¶¨', 'Á°™', 'È¶≠', 'Â§Æ', 'Â¢ú', 'Â©¶',
      'Â•Ω', 'Â®©', 'Ê≠ª', '‰πÉ', 'ÂÖπ', 'ÂÅÅ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âç†Êõ∞ ‚Äî (–≥–∞–¥–∞—Ç–µ–ª—å) —Å–∫–∞–∑–∞–ª, –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç</li>
      <li>‰∏çÂòâ ‚Äî –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>ÂÖ∂Âòâ ‚Äî –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>‰∏çÂêâ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é</li>
      <li>Ëã• ‚Äî –µ—Å–ª–∏</li>
      <li>‰πÉ ‚Äî —Ç–æ–≥–¥–∞, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ</li>
      <li>Ê≠ª ‚Äî —É–º–µ—Ä–µ—Ç—å</li>
      <li>Ëå≤ ‚Äî –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ, –ø—Ä–∏ —ç—Ç–æ–º</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ
    // –ü–µ—Ä–µ–≤–æ–¥: –ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: "–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é"
    const expected = ['Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âòâ', '‰∏ç', 'Âêâ'];

    // –í—Å–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 10 –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤
    const allChars = [
      'Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âêâ', 'Êúâ', 'Á•ü', '‰æÜ', 'Ëâ±', 'ËøÑ', 'Ëá≥',
      '‰∫î', 'Êó•', '‰∏Å', 'ÈÖâ', 'ÂÖÅ', 'Ëá™', 'Ë•ø', 'Ê¥ó', 'Èúá', 'Âëä', 'Âúü', 'Êñπ', 'ÂæÅ',
      '‰∫é', 'Êàë', 'Êù±', 'ÈÑô', 'ÁÉñ', '‰∫å', 'ÈÇë', '‰∫¶', '‰æµ', 'Áî∞', 'Âõõ', 'Â∫ö', 'Áî≥',
      'Âåó', 'Â≠ê', 'ÂïÜ', 'Êòî', 'Áî≤', 'Ëæ∞', '‰øò', '‰∫∫', 'ÂçÅ', 'Âèà', 'ÂÖ≠', 'Êàä', 'Âçà',
      'ÂæÄ', 'ÈÄê', 'ÂÖï', 'Â∞è', 'Ëá£', 'Âè∂', 'Ëªä', 'È¶¨', 'Á°™', 'È¶≠', 'Â§Æ', 'Â¢ú', 'Â©¶',
      'Â•Ω', 'Â®©', 'Ê≠ª', '‰πÉ', 'ÂÖπ', 'ÂÅÅ', '‰∫°', 'Á¶ç', 'ÂÖÅ', 'Èõ®', 'Âçú', 'Áô∏', 'Â∑≥',
      'Âêé', 'Ëá≥', 'Áî®', 'Á§∫', 'Âæ°', 'Èº†', 'ÂÆó', 'ÈñÄ', 'Âü∑', 'Â¢†'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, ru√≤ q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –∏ –µ—Å–ª–∏ –±—É–¥–µ—Ç, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª: ¬´–ù–µ –¥–µ–ª–∞–π —ç—Ç–æ–≥–æ, –Ω–æ –µ—Å–ª–∏ —Å–¥–µ–ª–∞–µ—à—å, —Ç–æ –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          <em>‰∏çÂòâ</em> ‚Äî ¬´–Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª (–æ—Å–Ω–æ–≤–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ),<br>
          <em>Ëã•ÂÖ∂ÂòâÔºå‰∏çÂêâ</em> ‚Äî ¬´–µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª (—É—Å–ª–æ–≤–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ).<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –£—Ä–æ–∫–∞ 10.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É—Å–ª–æ–≤–Ω—É—é —Å–≤—è–∑–∫—É Ëã• –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ–º.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, ru√≤ q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–£—Ä–æ–∂–∞–π –±—É–¥–µ—Ç –ø–ª–æ—Ö–∏–º, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
          ‚Ä¢ <strong>Ëã•ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br>
          –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è <strong>Ëã•...Ôºå‰∏çÂêâ</strong> –≤—ã—Ä–∞–∂–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º ‚Äî —Ç–∏–ø–∏—á–Ω–∞ –¥–ª—è –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –£—Ä–æ–∫–∞ 10.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´‰∏çÂòâ¬ª –∏ ¬´Ëã•ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ–º.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Å–µ–π—á–∞—Å, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
          ‚Ä¢ <strong>ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –£—Ä–æ–∫–∞ 10. –ó–¥–µ—Å—å <strong>ÂÖ∂</strong> –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–∞–∫ –º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤, –∑–∞–º–µ–Ω—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ–º –∏ –º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤–æ–º.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, ru√≤ q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–£—Ä–æ–∂–∞–π –±—É–¥–µ—Ç –ø–ª–æ—Ö–∏–º, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Å–µ–π—á–∞—Å, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
          ‚Ä¢ <strong>Ëã•ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br>
          –ó–¥–µ—Å—å <strong>ÂÖ∂</strong> ‚Äî <em>–º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤</em>, –∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –£—Ä–æ–∫–∞ 10.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´–Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª –∏ ¬´–µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>



