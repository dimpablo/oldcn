=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "‰∏ë", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (2-—è)" },
      { char: "Áà≠", meaning: "–ß–∂—ç–Ω (–∏–º—è —Å–æ–±—Å—Ç–≤.)" },
      { char: "Èõ®", meaning: "–î–æ–∂–¥—å / –î–æ–∂–¥—å –∏–¥–µ—Ç / –î–æ–∂–¥–∏—Ç—å" },
      { char: "ÂÖÅ", meaning: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ!" },
      { char: "‰∫•", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (12-—è)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").innerHTML = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "ÂØÖ", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (3-—è)" },
      { char: "Áô∏", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (10-–π)" },
      { char: "ÂçØ", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (4-—è)" },
      { char: "„±ø", meaning: "–¶–∑—é—ç (–ò–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ)" },
      { char: "Âçà", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (7-—è)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Âçà", meaning: "w«î" },
      { char: "ÂÖ∂", meaning: "q√≠" },
      { char: "„±ø", meaning: "ju√©" },
      { char: "‰∏ô", meaning: "b«êng" },
      { char: "‰∏ç", meaning: "b√π" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Âç†", meaning: "zhƒÅn" },
      { char: "‰∫•", meaning: "h√†i" },
      { char: "Â£¨", meaning: "r√©n" },
      { char: "Èõ®", meaning: "y«î" },
      { char: "ÂØÖ", meaning: "y√≠n" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Êõ∞", meaning: "yuƒì" },
      { char: "ÂÖÅ", meaning: "y«în" },
      { char: "Áô∏", meaning: "gu«ê" },
      { char: "Â∑±", meaning: "j«ê" },
      { char: "Ë≤û", meaning: "zhƒìn" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ö–∞–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –±–µ–∑–ª–∏—á–Ω—ã–µ?</title>
</head>
<body>

  <h2>–ö–∞–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –±–µ–∑–ª–∏—á–Ω—ã–µ?</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ ‚Äî –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–∞–º–∏ (–ø–æ–≥–æ–¥–∞, —Å—É–¥—å–±–∞ –∏ —Ç.–ø.)</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const items = [
      { id: "yu", text: "Èõ®", isImpersonal: true },
      { id: "qi-yu", text: "ÂÖ∂Èõ®", isImpersonal: true },
      { id: "wang-zhan-yue", text: "ÁéãÂç†Êõ∞", isImpersonal: false },
      { id: "bu-yu", text: "‰∏çÈõ®", isImpersonal: true },
      { id: "yun-yu", text: "ÂÖÅÈõ®", isImpersonal: true }
    ];

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    const userSelections = {};

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(items);

      shuffled.forEach(item => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.id = item.id;

        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.id = `chk-${item.id}`;
        checkbox.checked = false;

        checkbox.onchange = () => {
          userSelections[item.id] = checkbox.checked;
          label.classList.toggle("checked", checkbox.checked);
        };

        const textNode = document.createTextNode(item.text);

        label.appendChild(checkbox);
        label.appendChild(textNode);
        container.appendChild(label);

        userSelections[item.id] = false;
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      const allCorrect = items.every(item => {
        const expected = item.isImpersonal;
        const actual = !!userSelections[item.id];
        return expected === actual;
      });

      if (allCorrect) {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ!";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ú–µ–Ω—å—à–µ –¥–æ–∂–¥—è ‚Äî –Ω–µ –∑–Ω–∞—á–∏—Ç –Ω–µ –±–µ–∑–ª–∏—á–Ω–æ–µ.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±–µ–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –±–µ–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã" : "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±–µ–∑–ª–∏—á–Ω–æ—Å—Ç–∏")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂçúÁà≠?</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂçúÁà≠?</h2>
  <p class="instruction">–í –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö ÂçúÁà≠ ‚Äî —ç—Ç–æ –∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è. –ß—Ç–æ –æ–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { value: "wang", text: "–ì–∞–¥–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –í–∞–Ω", correct: false },
      { value: "zheng", text: "–ì–∞–¥–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –ß–∂—ç–Ω", correct: true },
      { value: "ruler-zheng", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ß–∂—ç–Ω", correct: false },
      { value: "repeat", text: "–°–ª–æ–≤–æ ¬´–≥–∞–¥–∞—Ç—å¬ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è", correct: false }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      if (selectedValue === "zheng") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! ÂçúÁà≠ ‚Äî –ß–∂—ç–Ω, –≥–∞–¥–∞—Ç–µ–ª—å.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ—Ç. Áà≠ –∑–¥–µ—Å—å ‚Äî –∏–º—è, –∞ –Ω–µ ¬´—Å–ø–æ—Ä¬ª.";
        resultEl.className = "error";
        sendResult(false);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ: ÂçúÁà≠ ‚Äî –∏–º—è –ß–∂—ç–Ω" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂçúÁà≠")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Áéã", meaning: "w√°ng" },
      { char: "ÂçØ", meaning: "m«éo" },
      { char: "Âçú", meaning: "b«î" },
      { char: "‰∏ë", meaning: "ch«íu" },
      { char: "Áà≠", meaning: "zhƒìng" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã"
      }, "*");
    }

    init();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ì–∞–¥–∞—Ç–µ–ª—å –ß–∂—ç–Ω —Å–∫–∞–∑–∞–ª: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å–æ–≤¬ª.</em></p>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area">
    <!-- –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Âçú', 'Áà≠', 'Êõ∞', 'Áéã', 'ÂÖÅ', '‰∏ç', 'Ë≤û'];

    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      'Áà≠', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âçú', '‰∏ë', '„±ø', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    const isMobileDevice = 'ontouchstart' in window;

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      clone.ontouchstart = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºå') box.classList.add('punctuation');
        box.textContent = char;

        box.style.cursor = 'pointer';
        box.addEventListener('click', function() {
          moveToDropArea(this);
        });

        charPool.appendChild(box);
      });
    }

    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂçúÁà≠Êõ∞ÁéãÂÖÅ‰∏çË≤û';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –≤ –¥–µ–Ω—å Áô∏‰∏ë?</title>
</head>
<body>

  <h2>–ß—Ç–æ –≤ –¥–µ–Ω—å Áô∏‰∏ë?</h2>

  <div class="oracle-text">Áô∏‰∏ëÂÖÅÂÖ∂Èõ®</div>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
      –ü–∏–Ω—å–∏–Ω—å ‚ñº
    </button>
    <div class="pinyin-text">gu«ê ch«íu y«în q√≠ y«î</div>
  </div>

  <div class="options" id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { value: "rain-coming", text: "–ë—É–¥–µ—Ç –¥–æ–∂–¥—å", correct: false },
      { value: "no-rain", text: "–ù–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { value: "rained", text: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—à—ë–ª –¥–æ–∂–¥—å", correct: true },
      { value: "divined", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≥–∞–¥–∞–ª", correct: false }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);
        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      if (!selectedValue) {
        const resultEl = document.getElementById("result");
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      const isCorrect = selectedValue === "rained";
      const resultEl = document.getElementById("result");

      if (isCorrect) {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! ÂÖÅÂÖ∂Èõ® = ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ—à—ë–ª –¥–æ–∂–¥—å¬ª.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå ÂÖÅ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderOptions;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 3: ÂÖ∂</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖ∂?</h2>
  <p><strong>¬´ÂÖ∂Èõ®¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">q√≠ y«î</div>
  </div>

  <label><input type="radio" name="q" value="0"> –î–æ–∂–¥—å –∏–¥—ë—Ç</label>
  <label><input type="radio" name="q" value="1"> –ë—É–¥–µ—Ç –¥–æ–∂–¥—å</label>
  <label><input type="radio" name="q" value="2"> –î–æ–∂–¥—è –Ω–µ –±—É–¥–µ—Ç</label>
  <label><input type="radio" name="q" value="3"> –î–æ–∂–¥—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª</label>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.value === "1") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖ∂");
      }
    }
  </script>

</body>
</html>

<script>
  window.parent.postMessage({
    type: "TASK_EXISTS",
    valid: true
  }, "*");
</script>



=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å:</p>
    <p><em>"–ó–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: ¬´–ë—ã–ª –ª–∏ –¥–æ–∂–¥—å?¬ª"</em></p>
    <p class="hint">–ö–∞–∫ –±—É–¥–µ—Ç "–∑–∞–¥–∞–≤–∞–ª–∏ –≤–æ–ø—Ä–æ—Å?"</p>
    <p class="hint">–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–æ—Å–≤–µ–Ω–Ω–æ</p>

  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Ë≤û', 'Êõ∞', 'ÂÖÅ', 'Èõ®'];

    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      '‰∏ô', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âç†', '‰∏ë', '„±ø', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    const isMobileDevice = 'ontouchstart' in window;

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      clone.ontouchstart = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºå') box.classList.add('punctuation');
        box.textContent = char;

        box.style.cursor = 'pointer';
        box.addEventListener('click', () => moveToDropArea(box));

        charPool.appendChild(box);
      });
    }

    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ë≤ûÊõ∞ÂÖÅÈõ® = "–ó–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å ¬´–ë—ã–ª –ª–∏ –¥–æ–∂–¥—å?"¬ª';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å:</p>
    <p><em>¬´–ù–∞ —à–µ—Å—Ç–æ–π –¥–µ–Ω—å –ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤¬ª</em></p>
    <p class="hint">üî∏ 6-–π –¥–µ–Ω—å: Â∑± + Â∑≥</p>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Â∑±', 'Â∑≥', 'Áéã', '‰∏ç', 'Ë≤û'];

    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      '‰∏ô', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âç†', '‰∏ë', '„±ø', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    const isMobileDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      clone.ontouchstart = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.style.cursor = 'pointer';
        box.addEventListener('click', () => moveToDropArea(box));

        charPool.appendChild(box);
      });
    }

    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∑±Â∑≥Áéã‰∏çË≤û = ¬´–ù–∞ —à–µ—Å—Ç–æ–π –¥–µ–Ω—å...¬ª';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message error';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞</p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const wordBank = [
      { char: "‰∏ô", correct: "3-–π –Ω–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª" },
      { char: "Âçú", correct: "–≥–∞–¥–∞—Ç—å" },
      { char: "Èõ®", correct: "–¥–æ–∂–¥—å" },
      { char: "Áéã", correct: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å" },
      { char: "Ë≤û", correct: "–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–∞–∫—É–ª—É" },
      { char: "Êõ∞", correct: "—Å–∫–∞–∑–∞—Ç—å, –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏" },
      { char: "ÂÖÅ", correct: "–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ" },
      { char: "Âç†", correct: "–∏—Å—Ç–æ–ª–∫–æ–≤—ã–≤–∞—Ç—å" }
    ];

    const allValues = wordBank.map(item => item.correct);

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(wordBank);

      shuffled.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        const options = shuffleArray([...allValues]);

        let selectHTML = `<select id="char_${item.char}">
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      let allFilled = true;
      let correctCount = 0;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      const resultEl = document.getElementById("result");

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Âçú ‚Äî –≥–∞–¥–∞—Ç—å, Ë≤û ‚Äî –≤–æ–ø—Ä–æ—Å, ÂÖÅ ‚Äî –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderPairs;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ü–µ—Ä–µ–≤–æ–¥</title>
</head>
<body>

  <h2>–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</h2>

  <div id="questions-container">
    <!-- –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç–æ–º -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const questions = [
      {
        id: "t1",
        text: "‰∏ôÂØÖÂçú",
        pinyin: "b«êng y√≠n bo",
        options: [
          "–≥–∞–¥–∞–ª–∏ –≤ –¥–µ–Ω—å –±–∏–Ω-–∏–Ω—å",
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≥–∞–¥–∞–ª",
          "–≤ –¥–µ–Ω—å –±–∏–Ω—å-–º–∞–æ",
          "–∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ –≤ —Ö—Ä–∞–º–µ"
        ],
        correct: "–≥–∞–¥–∞–ª–∏ –≤ –¥–µ–Ω—å –±–∏–Ω-–∏–Ω—å"
      },
      {
        id: "t2",
        text: "ÁéãÂç†Êõ∞",
        pinyin: "w√°ng zh√†n yuƒì",
        options: [
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª",
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª",
          "—Ü–∞—Ä—å –ø—Ä–∏–∫–∞–∑–∞–ª",
          "–æ–Ω –∑–∞–ø–∏—Å–∞–ª"
        ],
        correct: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª"
      }
    ];

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function loadQuestions() {
      const container = document.getElementById("questions-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(questions);

      shuffled.forEach(q => {
        const questionDiv = document.createElement("div");
        questionDiv.className = "question";
        questionDiv.innerHTML = `
          <p><strong>${q.text}</strong></p>
          <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
              –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">${q.pinyin}</div>
          </div>
          <div class="options">
            ${q.options.map(option => `
              <label>
                <input type="radio" name="${q.id}" value="${option}">
                ${option}
              </label>
            `).join("")}
          </div>
        `;
        container.appendChild(questionDiv);
      });
    }

    function check() {
      const selectedT1 = document.querySelector('input[name="t1"]:checked');
      const selectedT2 = document.querySelector('input[name="t2"]:checked');
      const resultEl = document.getElementById("result");

      if (!selectedT1 || !selectedT2) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      const correctT1 = questions.find(q => q.id === "t1").correct;
      const correctT2 = questions.find(q => q.id === "t2").correct;

      const match1 = selectedT1.value === correctT1;
      const match2 = selectedT2.value === correctT2;

      if (match1 && match2) {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ!";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –û—à–∏–±–∫–∞. Êõ∞ ‚Äî –ø—Ä—è–º–∞—è —Ä–µ—á—å, Âç† ‚Äî –∏—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å.";
        sendResult(false, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    window.onload = loadQuestions;

    // –°–∏–≥–Ω–∞–ª –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ü—Ä—è–º–∞—è —Ä–µ—á—å</title>
</head>
<body>

  <h2>–ü—Ä—è–º–∞—è —Ä–µ—á—å –≤ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö</h2>
  <p class="intro">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.</p>

  <div class="oracle-text">Ë≤û‰∏ÅÂçØÂÖ∂Èõ®ÁéãÂç†Êõ∞ÂÖ∂Èõ®</div>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">zhƒìn dƒ´ng m«éo q√≠ y«î w√°ng zh√†n yuƒì q√≠ y«î</div>
  </div>

  <div class="question">–ö–∞–∫–∞—è —á–∞—Å—Ç—å ‚Äî –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –∫ –æ—Ä–∞–∫—É–ª—É?</div>

  <div id="options-container" class="options"></div>

  <button onclick="checkAnswer()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <div id="result"></div>
  <div id="explanation" style="display: none;">
    <p><strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong></p>
    <ol>
      <li><strong>Ë≤û</strong> –≤–≤–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å ‚Äî —ç—Ç–æ –ø—Ä—è–º–∞—è —Ä–µ—á—å.</li>
      <li><strong>ÁéãÂç†Êõ∞</strong> ‚Äî —Ü–∞—Ä—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª, —Ç–æ–∂–µ –ø—Ä—è–º–∞—è —Ä–µ—á—å, –Ω–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç.</li>
    </ol>
    <p><strong>„ÄåË≤û‰∏ÅÂçØÂÖ∂Èõ®„Äç</strong> ‚Äî –ø–æ–ª–Ω—ã–π –≤–æ–ø—Ä–æ—Å: "–ë—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å?"</p>
  </div>

  <script>
    const options = [
      { id: 1, text: "Ë≤û‰∏ÅÂçØÂÖ∂Èõ®", correct: true },
      { id: 2, text: "ÁéãÂç†Êõ∞ÂÖ∂Èõ®", correct: false },
      { id: 3, text: "‰∏ÅÂçØÂÖ∂Èõ®", correct: false },
      { id: 4, text: "Ë≤û‰∏ÅÂçØ", correct: false }
    ];

    let selectedOptionId = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const optionEl = document.createElement("div");
        optionEl.className = "option";
        optionEl.textContent = option.text;
        optionEl.dataset.id = option.id;
        optionEl.onclick = () => selectOption(option.id);
        container.appendChild(optionEl);
      });
    }

    function selectOption(id) {
      selectedOptionId = id;
      document.querySelectorAll('.option').forEach(el => {
        el.classList.remove('selected');
      });
      document.querySelector(`.option[data-id="${id}"]`).classList.add('selected');
    }

    function checkAnswer() {
      const resultEl = document.getElementById('result');
      const explanationEl = document.getElementById('explanation');

      if (!selectedOptionId) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç";
        resultEl.className = "error";
        return;
      }

      const correct = options.find(o => o.id === selectedOptionId).correct;

      if (correct) {
        resultEl.innerHTML = "‚úÖ <b>–í–µ—Ä–Ω–æ!</b>";
        resultEl.className = "success";
        explanationEl.style.display = "block";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
        resultEl.className = "error";
        explanationEl.style.display = "block";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Ä–µ—á–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderOptions;

    window.parent.postMessage({
      type: "TASK_EXISTS",
      valid: true
    }, "*");
  </script>
</body>
</html>



=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–∫–∞–∑—É–µ–º–æ–µ</title>
</head>
<body>

  <h2>–ù–∞–π–¥–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç</h2>
  <p><strong>Â∑±ÂçØÂçúË≤ûÈõ®Ôºü</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">j«ê m«éo bu zhƒìn y«î?</div>
  </div>

  <p class="question">–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç?</p>

  <div class="buttons">
    <button onclick="answer('Èõ®')">Èõ®</button>
    <button onclick="answer('Ë≤û')">Ë≤û</button>
    <button onclick="answer('Âçú')">Âçú</button>
    <button onclick="answer('Â∑±ÂçØ')">Â∑±ÂçØ</button>
  </div>

  <p id="result"></p>

  <script>
    function answer(sel) {
      const resultEl = document.getElementById("result");
      if (sel === "Èõ®") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! Èõ® ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç: ¬´–±—É–¥–µ—Ç –¥–æ–∂–¥—å?¬ª";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ß—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ¬´—á—Ç–æ –±—É–¥–µ—Ç?¬ª";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–∫–∞–∑—É–µ–º–æ–≥–æ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –°–∏–≥–Ω–∞–ª –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>

</body>
</html>



=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥</title>
</head>
<body>

  <h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥</h2>

  <div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ö–ª–∏–∫ –ø–æ —Å–ª–æ–≤—É –≤ –ø–æ–ª–µ ‚Äî —É–¥–∞–ª–∏—Ç –µ–≥–æ.</p>
  </div>

  <div class="task-container">
    <div class="task-title">1. ‰∏çÂÖ∂Èõ®</div>
    <div class="oracle-text">‰∏çÂÖ∂Èõ®</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
  </div>

  <div class="task-container">
    <div class="task-title">2. Ë≤û‰∏çÈõ®</div>
    <div class="oracle-text">Ë≤û‰∏çÈõ®</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    const expected1 = [
      ['–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è'],
      ['–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['–¥–æ–∂–¥—è', '–Ω–µ', '–±—É–¥–µ—Ç'],
      ['–¥–æ–∂–¥—å', '–Ω–µ', '–ø–æ–π–¥—ë—Ç'],
      ['–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—å'],
      ['–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è']
    ];
    
    const expected2 = [
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è'],
      ['–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–¥–æ–∂–¥—è', '–Ω–µ', '–±—É–¥–µ—Ç'],
      ['–≥–∞–¥–∞–ª–∏', '–¥–æ–∂–¥—å', '–Ω–µ', '–ø–æ–π–¥—ë—Ç'],
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è']
    ];

    const words1 = ['–Ω–µ', '–±—É–¥–µ—Ç', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è', '–¥–æ–∂–¥—å', '–≤–æ–∑–º–æ–∂–Ω–æ', '–º–æ–∂–µ—Ç', '–ª–∏', '–¥–æ–∂–¥–ª–∏–≤–æ'];
    const words2 = ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è', '–¥–æ–∂–¥—å', '–∑–∞–¥–∞–≤–∞–ª–∏', '–ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–ª–∏'];

    const wordPool1 = document.getElementById('word-pool1');
    const wordPool2 = document.getElementById('word-pool2');
    const dropArea1 = document.getElementById('drop-area1');
    const dropArea2 = document.getElementById('drop-area2');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    function createWordBox(word, pool, dropArea) {
      const box = document.createElement('div');
      box.className = 'word-box';
      box.textContent = word;
      box.onclick = () => {
        box.remove();
        const clone = box.cloneNode(true);
        clone.onclick = () => { clone.remove(); updatePlaceholder(dropArea); };
        dropArea.appendChild(clone);
        updatePlaceholder(dropArea);
      };
      pool.appendChild(box);
    }

    function updatePlaceholder(dropArea) {
      const hasWords = dropArea.children.length > 0 && !Array.from(dropArea.children).some(el => el.textContent.includes('[–ø—É—Å—Ç–æ]'));
      if (!hasWords && dropArea.children.length === 0) {
        dropArea.innerHTML = '';
        const placeholder = document.createElement('span');
        placeholder.style.color = '#999';
        placeholder.style.fontStyle = 'italic';
        placeholder.textContent = '[–ø—É—Å—Ç–æ]';
        dropArea.appendChild(placeholder);
      }
    }

    function init() {
      wordPool1.innerHTML = '';
      wordPool2.innerHTML = '';
      dropArea1.innerHTML = '';
      dropArea2.innerHTML = '';
      resultEl.style.display = 'none';
      updatePlaceholder(dropArea1);
      updatePlaceholder(dropArea2);

      const shuffled1 = [...words1].sort(() => Math.random() - 0.5);
      const shuffled2 = [...words2].sort(() => Math.random() - 0.5);

      shuffled1.forEach(word => createWordBox(word, wordPool1, dropArea1));
      shuffled2.forEach(word => createWordBox(word, wordPool2, dropArea2));
    }

    function getWords(dropArea) {
      return Array.from(dropArea.children)
        .filter(el => !el.textContent.includes('[–ø—É—Å—Ç–æ]'))
        .map(el => el.textContent.trim());
    }

    checkBtn.addEventListener('click', () => {
      const current1 = getWords(dropArea1);
      const current2 = getWords(dropArea2);

      const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
      const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

      if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `‚úÖ <b>–í–µ—Ä–Ω–æ!</b>`;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
      } else {
        let message = '‚ùå –û—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ.';
        if (isCorrect1 && !isCorrect2) message = '‚ùå –í—Ç–æ—Ä–æ–π –Ω–µ–≤–µ—Ä–µ–Ω.';
        else if (!isCorrect1 && isCorrect2) message = '‚ùå –ü–µ—Ä–≤—ã–π –Ω–µ–≤–µ—Ä–µ–Ω.';
        resultEl.textContent = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, '–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–ª–æ–≤');
      }
    });

    resetBtn.addEventListener('click', init);

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = init;

    // –°–∏–≥–Ω–∞–ª –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖÅ?</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖÅ?</h2>

  <div class="oracle-text">Áô∏‰∏ëÂÖÅÂÖ∂Èõ®</div>
<div class="pinyin-container">
  <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å ‚ñº
  </button>
  <div class="pinyin-text">
    gu«ê ch«íu y«în q√≠ y«î
  </div>
</div>

  <div class="options" id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    const options = [
      { value: "correct", text: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—à—ë–ª –¥–æ–∂–¥—å", correct: true },
      { value: "rain", text: "–ë—É–¥–µ—Ç –¥–æ–∂–¥—å", correct: false },
      { value: "no-rain", text: "–ù–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { value: "said", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª", correct: false }
    ];

    let selectedValue = null;

    // –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
          label.classList.add('selected');
        };

        const text = document.createTextNode(option.text);
        label.appendChild(input);
        label.appendChild(text);
        container.appendChild(label);
      });
    }

    function check() {
      if (!selectedValue) {
        document.getElementById("result").textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.";
        document.getElementById("result").className = "error";
        return;
      }

      const isCorrect = selectedValue === "correct";

      const resultEl = document.getElementById("result");
      if (isCorrect) {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ÂÖÅ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ—à—ë–ª –¥–æ–∂–¥—å¬ª.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. ÂÖÅ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ¬ª, ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ¬ª ‚Äî —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage(
        {
          type: "TASK_RESULT",
          success,
          message: message || (success ? "–í–µ—Ä–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ ÂÖÅ" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ")
        },
        "*"
      );
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;

    // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ</p>

  <div class="column">
    <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
    <div id="words"></div>
  </div>

  <div class="column">
    <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
    <div id="defs"></div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Â£¨", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (9-–π);" },
      { char: "ÂÖ∂", meaning: "–°–ª—É–∂–µ–±–Ω–æ–µ –Ω–∞—Ä–µ—á–∏–µ: ¬´–±—É–¥–µ—Ç –ª–∏?¬ª" },
      { char: "Â∑±", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (6-–π);" },
      { char: "Âçú", meaning: "–ì–∞–¥–∞—Ç—å" },
      { char: "ÂÖÅ", meaning: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ; –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ</p>

  <div class="column">
    <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
    <div id="words"></div>
  </div>

  <div class="column">
    <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
    <div id="defs"></div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "‰∏ç", meaning: "–ù–µ; –∫–∞–∫ –≤ ¬´–Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è¬ª" },
      { char: "Áéã", meaning: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å / –¶–∞—Ä—å" },
      { char: "‰∏ô", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (3-–π)" },
      { char: "Âç†", meaning: "–ò—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ" },
      { char: "Êõ∞", meaning: "–ì–æ–≤–æ—Ä–∏—Ç—å; –≤–≤–æ–¥–∏—Ç —Ä–µ—á—å" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



