=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>
</head>
<body>

<div id="character-target-div"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  function sendResult(success, message) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
  }

  window.onload = function() {
    const char = window.location.hash.slice(1);
    
    if (!char) {
      console.warn("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ –≤ —Ö—ç—à–µ");
      sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ");
      return;
    }

    const writer = HanziWriter.create('character-target-div', char, {
      width: 300,
      height: 300,
      showCharacter: false,
      showOutline: false,
      showHintAfterMisses: 1,
      highlightOnComplete: false,
      padding: 5
    });

    writer.quiz({
      onComplete: function(summaryData) {
        console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ 100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        sendResult(true, "–ò–µ—Ä–æ–≥–ª–∏—Ñ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ");
      },
      onIncorrectStroke: function(strokeData) {
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      }
    });
  };
</script>

<!-- –°–∏–≥–Ω–∞–ª: —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ -->
<script>
  window.parent.postMessage({
    type: "TASK_EXISTS",
    valid: true
  }, "*");
</script>

<!-- –°–∏–≥–Ω–∞–ª: —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å hanziwriter -->
<script>
  window.parent.postMessage({
    type: "DO_HANZI",
    valid: true
  }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
      line-height: 1.6;
      background: #f7f9fc;
      color: #333;
    }

    h2 {
      color: #2c3e50;
      text-align: center;
      margin: 20px 0;
      font-size: 28px;
    }

    p {
      text-align: center;
      font-size: 18px;
      color: #555;
      margin: 10px 0 20px;
    }

    .match-container {
      display: flex;
      justify-content: center;
      gap: 40px;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .column {
      width: 45%;
      min-width: 280px;
      max-width: 500px;
    }

    .column h3 {
      text-align: center;
      margin-bottom: 15px;
      color: #333;
      font-size: 20px;
      font-weight: bold;
    }

    .word-item, .def-item {
      padding: 14px 16px;
      margin: 10px 0;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: center;
      font-size: 20px;
      font-weight: bold;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .word-item:hover, .def-item:hover {
      background: #eef5ff;
      border-color: #66aaff;
      transform: translateY(-1px);
      box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }

    .word-item.selected {
      background: #bbdefb;
      border-color: #1976d2;
      transform: scale(1.05);
    }

    .def-item.selected {
      background: #c8e6c9;
      border-color: #43a047;
      transform: scale(1.05);
    }

    .matched {
      background: #d4edda;
      border: 2px solid #28a745 !important;
      color: #155724;
      opacity: 0.95;
      cursor: default;
      font-weight: bold;
      transform: scale(1.02) !important;
      box-shadow: 0 2px 6px rgba(40, 167, 69, 0.2);
    }

    button {
      display: block;
      margin: 30px auto;
      padding: 12px 24px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s;
    }

    button:hover {
      background: #2980b9;
    }

    #result {
      text-align: center;
      margin-top: 25px;
      font-weight: bold;
      font-size: 18px;
      padding: 12px;
      border-radius: 6px;
    }

    /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
    @media (max-width: 768px) {
      body {
        padding: 15px;
      }
      .match-container {
        gap: 20px;
        flex-direction: column;
        align-items: center;
      }
      .column {
        width: 100%;
      }
      h2 {
        font-size: 24px;
      }
      p {
        font-size: 16px;
      }
      .word-item, .def-item {
        font-size: 18px;
        padding: 12px;
      }
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∑–Ω–∞—á–µ–Ω–∏—è -->
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "‰∏ë", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (2-—è)" },
      { char: "Áà≠", meaning: "–ß–∂—ç–Ω (–∏–º—è —Å–æ–±—Å—Ç–≤.)" },
      { char: "Èõ®", meaning: "–î–æ–∂–¥—å / –î–æ–∂–¥—å –∏–¥–µ—Ç / –î–æ–∂–¥–∏—Ç—å" },
      { char: "ÂÖÅ", meaning: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ!" },
      { char: "‰∫•", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (12-—è)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;

      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;

      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").innerHTML = "‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–∞—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.</strong>";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
      line-height: 1.6;
      background: #f8f9fc;
      color: #333;
    }

    h2 {
      color: #2c3e50;
      text-align: center;
      margin: 20px 0;
      font-size: 28px;
    }

    p {
      text-align: center;
      font-size: 18px;
      color: #555;
      margin: 10px 0 25px;
    }

    .match-container {
      display: flex;
      justify-content: center;
      gap: 40px;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .column {
      width: 45%;
      min-width: 280px;
      max-width: 500px;
    }

    .column h3 {
      text-align: center;
      margin-bottom: 15px;
      color: #333;
      font-size: 20px;
      font-weight: bold;
    }

    .word-item, .def-item {
      padding: 14px 16px;
      margin: 10px 0;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: center;
      font-size: 20px;
      font-weight: bold;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .word-item:hover, .def-item:hover {
      background: #eef5ff;
      border-color: #66aaff;
      transform: translateY(-1px);
      box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }

    .word-item.selected {
      background: #bbdefb;
      border-color: #1976d2;
      transform: scale(1.05);
    }

    .def-item.selected {
      background: #c8e6c9;
      border-color: #43a047;
      transform: scale(1.05);
    }

    .matched {
      background: #d4edda;
      border: 2px solid #28a745 !important;
      color: #155724;
      opacity: 0.95;
      cursor: default;
      font-weight: bold;
      transform: scale(1.02) !important;
      box-shadow: 0 2px 6px rgba(40, 167, 69, 0.2);
    }

    button {
      display: block;
      margin: 30px auto;
      padding: 12px 24px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s;
    }

    button:hover {
      background: #2980b9;
    }

    #result {
      text-align: center;
      margin-top: 25px;
      font-weight: bold;
      font-size: 18px;
      padding: 12px;
      border-radius: 6px;
    }

    /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */
    @media (max-width: 768px) {
      body {
        padding: 15px;
      }
      .match-container {
        gap: 20px;
        flex-direction: column;
        align-items: center;
      }
      .column {
        width: 100%;
      }
      h2 {
        font-size: 24px;
      }
      p {
        font-size: 16px;
      }
      .word-item, .def-item {
        font-size: 18px;
        padding: 12px;
      }
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∑–Ω–∞—á–µ–Ω–∏—è -->
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "ÂØÖ", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (3-—è)" },
      { char: "Áô∏", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (10-–π)" },
      { char: "ÂçØ", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (4-—è)" },
      { char: "Áèè", meaning: "–¶–∑—é—ç (–ò–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ)" },
      { char: "Âçà", meaning: "–ó–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (7-—è)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;

      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;

      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").innerHTML = "‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–∞—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.</strong>";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
      line-height: 1.6;
      background: #f8f9fc;
      color: #333;
    }

    h2 {
      color: #2c3e50;
      text-align: center;
      margin: 20px 0;
      font-size: 28px;
    }

    p {
      text-align: center;
      font-size: 18px;
      color: #555;
      margin: 10px 0 25px;
    }

    .match-container {
      display: flex;
      justify-content: center;
      gap: 40px;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .column {
      width: 45%;
      min-width: 280px;
      max-width: 500px;
    }

    .column h3 {
      text-align: center;
      margin-bottom: 15px;
      color: #333;
      font-size: 20px;
      font-weight: bold;
    }

    .word-item, .def-item {
      padding: 14px 16px;
      margin: 10px 0;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: center;
      font-size: 20px;
      font-weight: bold;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .word-item:hover, .def-item:hover {
      background: #eef5ff;
      border-color: #66aaff;
      transform: translateY(-1px);
      box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }

    .word-item.selected {
      background: #bbdefb;
      border-color: #1976d2;
      transform: scale(1.05);
    }

    .def-item.selected {
      background: #c8e6c9;
      border-color: #43a047;
      transform: scale(1.05);
    }

    .matched {
      background: #d4edda;
      border: 2px solid #28a745 !important;
      color: #155724;
      opacity: 0.95;
      cursor: default;
      font-weight: bold;
      transform: scale(1.02) !important;
      box-shadow: 0 2px 6px rgba(40, 167, 69, 0.2);
    }

    button {
      display: block;
      margin: 30px auto;
      padding: 12px 24px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s;
    }

    button:hover {
      background: #2980b9;
    }

    #result {
      text-align: center;
      margin-top: 25px;
      font-weight: bold;
      font-size: 18px;
      padding: 12px;
      border-radius: 6px;
    }

    /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */
    @media (max-width: 768px) {
      body {
        padding: 15px;
      }
      .match-container {
        gap: 20px;
        flex-direction: column;
        align-items: center;
      }
      .column {
        width: 100%;
      }
      h2 {
        font-size: 24px;
      }
      p {
        font-size: 16px;
      }
      .word-item, .def-item {
        font-size: 18px;
        padding: 12px;
      }
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∑–Ω–∞—á–µ–Ω–∏—è -->
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Âçà", meaning: "w«î" },
      { char: "ÂÖ∂", meaning: "q√≠" },
      { char: "Áèè", meaning: "ju√©" },
      { char: "‰∏ô", meaning: "b«êng" },
      { char: "‰∏ç", meaning: "b√π" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;

      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;

      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").innerHTML = "‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–∞—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.</strong>";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
      line-height: 1.6;
      background: #f8f9fc;
      color: #333;
    }

    h2 {
      color: #2c3e50;
      text-align: center;
      margin: 20px 0;
      font-size: 28px;
    }

    p {
      text-align: center;
      font-size: 18px;
      color: #555;
      margin: 10px 0 25px;
    }

    .match-container {
      display: flex;
      justify-content: center;
      gap: 40px;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .column {
      width: 45%;
      min-width: 280px;
      max-width: 500px;
    }

    .column h3 {
      text-align: center;
      margin-bottom: 15px;
      color: #333;
      font-size: 20px;
      font-weight: bold;
    }

    .word-item, .def-item {
      padding: 14px 16px;
      margin: 10px 0;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: center;
      font-size: 20px;
      font-weight: bold;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .word-item:hover, .def-item:hover {
      background: #eef5ff;
      border-color: #66aaff;
      transform: translateY(-1px);
      box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }

    .word-item.selected {
      background: #bbdefb;
      border-color: #1976d2;
      transform: scale(1.05);
    }

    .def-item.selected {
      background: #c8e6c9;
      border-color: #43a047;
      transform: scale(1.05);
    }

    .matched {
      background: #d4edda;
      border: 2px solid #28a745 !important;
      color: #155724;
      opacity: 0.95;
      cursor: default;
      font-weight: bold;
      transform: scale(1.02) !important;
      box-shadow: 0 2px 6px rgba(40, 167, 69, 0.2);
    }

    button {
      display: block;
      margin: 30px auto;
      padding: 12px 24px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s;
    }

    button:hover {
      background: #2980b9;
    }

    #result {
      text-align: center;
      margin-top: 25px;
      font-weight: bold;
      font-size: 18px;
      padding: 12px;
      border-radius: 6px;
    }

    /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */
    @media (max-width: 768px) {
      body {
        padding: 15px;
      }
      .match-container {
        gap: 20px;
        flex-direction: column;
        align-items: center;
      }
      .column {
        width: 100%;
      }
      h2 {
        font-size: 24px;
      }
      p {
        font-size: 16px;
      }
      .word-item, .def-item {
        font-size: 18px;
        padding: 12px;
      }
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ -->
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Âç†", meaning: "zhƒÅn" },
      { char: "‰∫•", meaning: "h√†i" },
      { char: "Â£¨", meaning: "r√©n" },
      { char: "Èõ®", meaning: "y«î" },
      { char: "ÂØÖ", meaning: "y√≠n" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;

      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;

      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").innerHTML = "‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–∞—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.</strong>";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
      line-height: 1.6;
      background: #f8f9fc;
      color: #333;
    }

    h2 {
      color: #2c3e50;
      text-align: center;
      margin: 20px 0;
      font-size: 28px;
    }

    p {
      text-align: center;
      font-size: 18px;
      color: #555;
      margin: 10px 0 25px;
    }

    .match-container {
      display: flex;
      justify-content: center;
      gap: 40px;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .column {
      width: 45%;
      min-width: 280px;
      max-width: 500px;
    }

    .column h3 {
      text-align: center;
      margin-bottom: 15px;
      color: #333;
      font-size: 20px;
      font-weight: bold;
    }

    .word-item, .def-item {
      padding: 14px 16px;
      margin: 10px 0;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: center;
      font-size: 20px;
      font-weight: bold;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .word-item:hover, .def-item:hover {
      background: #eef5ff;
      border-color: #66aaff;
      transform: translateY(-1px);
      box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }

    .word-item.selected {
      background: #bbdefb;
      border-color: #1976d2;
      transform: scale(1.05);
    }

    .def-item.selected {
      background: #c8e6c9;
      border-color: #43a047;
      transform: scale(1.05);
    }

    .matched {
      background: #d4edda;
      border: 2px solid #28a745 !important;
      color: #155724;
      opacity: 0.95;
      cursor: default;
      font-weight: bold;
      transform: scale(1.02) !important;
      box-shadow: 0 2px 6px rgba(40, 167, 69, 0.2);
    }

    button {
      display: block;
      margin: 30px auto;
      padding: 12px 24px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s;
    }

    button:hover {
      background: #2980b9;
    }

    #result {
      text-align: center;
      margin-top: 25px;
      font-weight: bold;
      font-size: 18px;
      padding: 12px;
      border-radius: 6px;
    }

    /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */
    @media (max-width: 768px) {
      body {
        padding: 15px;
      }
      .match-container {
        gap: 20px;
        flex-direction: column;
        align-items: center;
      }
      .column {
        width: 100%;
      }
      h2 {
        font-size: 24px;
      }
      p {
        font-size: 16px;
      }
      .word-item, .def-item {
        font-size: 18px;
        padding: 12px;
      }
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ -->
    <div class="column">
      <h3>–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const pairs = [
      { char: "Êõ∞", meaning: "yuƒì" },
      { char: "ÂÖÅ", meaning: "y«în" },
      { char: "Áô∏", meaning: "gu«ê" },
      { char: "Â∑±", meaning: "j«ê" },
      { char: "Ë≤û", meaning: "zhƒìn" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;

      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;

      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").innerHTML = "‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–∞—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.</strong>";
          document.getElementById("result").style.color = "#27ae60";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        document.getElementById("result").style.color = "#e74c3c";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã" : "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ö–∞–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –±–µ–∑–ª–∏—á–Ω—ã–µ?</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
      line-height: 1.6;
      background: #f8f9fc;
      color: #333;
    }

    h2 {
      text-align: center;
      color: #2c3e50;
      margin-bottom: 15px;
      font-size: 28px;
    }

    .instruction {
      text-align: center;
      margin-bottom: 25px;
      color: #555;
      font-style: italic;
      font-size: 17px;
      max-width: 900px;
      margin-left: auto;
      margin-right: auto;
    }

    #options-container {
      margin: 20px auto;
      max-width: 800px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 12px;
    }

    .option {
      width: 100%;
      max-width: 600px;
      display: flex;
      align-items: center;
      margin: 6px 0;
      padding: 14px;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .option:hover {
      background: #f0f8ff;
      border-color: #007cba;
      transform: translateY(-1px);
      box-shadow: 0 3px 10px rgba(0, 124, 186, 0.1);
    }

    .option.checked {
      background: #e1f3ff;
      border-color: #007cba;
      box-shadow: 0 2px 8px rgba(0, 124, 186, 0.15);
    }

    .option input {
      margin-right: 12px;
      accent-color: #007cba;
      transform: scale(1.1);
    }

    button {
      display: block;
      margin: 30px auto;
      padding: 12px 24px;
      font-size: 16px;
      background: #007cba;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    button:hover {
      background: #005a87;
      transform: translateY(-1px);
    }

    #result {
      margin-top: 25px;
      padding: 16px;
      text-align: center;
      font-weight: bold;
      font-size: 16px;
      max-width: 800px;
      margin-left: auto;
      margin-right: auto;
      border-radius: 6px;
    }

    .success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6c3;
    }

    .error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f1b1b7;
    }

    /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
    @media (max-width: 600px) {
      body {
        padding: 15px;
      }
      h2 {
        font-size: 24px;
      }
      .instruction {
        font-size: 15px;
        padding: 0 10px;
      }
      #options-container {
        padding: 0 10px;
      }
      .option {
        padding: 12px;
        font-size: 15px;
      }
      button {
        padding: 10px 18px;
        font-size: 15px;
      }
    }
  </style>
</head>
<body>

  <h2>–ö–∞–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –±–µ–∑–ª–∏—á–Ω—ã–µ?</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ ‚Äî —Ç–æ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–∞–º–∏ –ø–æ —Å–µ–±–µ (—á–∞—â–µ –≤—Å–µ–≥–æ ‚Äî –æ –ø–æ–≥–æ–¥–µ, —Å—É–¥—å–±–µ –∏ —Ç.–ø.).</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const items = [
      { id: "yu", text: "Èõ®", isImpersonal: true },
      { id: "qi-yu", text: "ÂÖ∂Èõ®", isImpersonal: true },
      { id: "wang-zhan-yue", text: "ÁéãÂç†Êõ∞", isImpersonal: false },
      { id: "bu-yu", text: "‰∏çÈõ®", isImpersonal: true },
      { id: "yun-yu", text: "ÂÖÅÈõ®", isImpersonal: true }
    ];

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    const userSelections = {};

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(items);

      shuffled.forEach(item => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.id = item.id;

        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.id = `chk-${item.id}`;
        checkbox.checked = false;

        checkbox.onchange = () => {
          userSelections[item.id] = checkbox.checked;
          if (checkbox.checked) {
            label.classList.add("checked");
          } else {
            label.classList.remove("checked");
          }
        };

        const textNode = document.createTextNode(item.text);

        label.appendChild(checkbox);
        label.appendChild(textNode);
        container.appendChild(label);

        userSelections[item.id] = false;
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      const allCorrect = items.every(item => {
        const expected = item.isImpersonal;
        const actual = !!userSelections[item.id];
        return expected === actual;
      });

      if (allCorrect) {
        resultEl.innerHTML = "‚úÖ <strong>–í–µ—Ä–Ω–æ!</strong> –ë–µ–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —Ç–µ, –≥–¥–µ –Ω–µ—Ç –¥–µ—è—Ç–µ–ª—è: –ø–æ–≥–æ–¥–∞, —Å—É–¥—å–±–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ü–æ–¥—É–º–∞–π—Ç–µ: ÁéãÂç†Êõ∞ ‚Äî —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å—É–±—ä–µ–∫—Ç–∞ (–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç), –∑–Ω–∞—á–∏—Ç ‚Äî –Ω–µ –±–µ–∑–ª–∏—á–Ω–æ–µ.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±–µ–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –±–µ–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã" : "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±–µ–∑–ª–∏—á–Ω–æ—Å—Ç–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    renderOptions();

    // –°–∏–≥–Ω–∞–ª —Ä–æ–¥–∏—Ç–µ–ª—é
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂçúÁà≠?</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 800px;
      margin: 0 auto;
      line-height: 1.6;
    }
    h2 {
      text-align: center;
      color: #333;
      margin-bottom: 20px;
    }
    .instruction {
      text-align: center;
      margin-bottom: 25px;
      color: #555;
      font-style: italic;
    }
    #options-container {
      margin: 20px 0;
    }
    .option {
      display: block;
      margin: 12px 0;
      padding: 14px;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s, border-color 0.2s;
    }
    .option:hover {
      background: #f0f8ff;
      border-color: #007cba;
    }
    .option.selected {
      background: #e1f3ff;
      border-color: #007cba;
      box-shadow: 0 0 0 2px #b3d7ff;
    }
    .option input {
      margin-right: 10px;
      vertical-align: middle;
    }
    button {
      display: block;
      margin: 25px auto;
      padding: 12px 20px;
      font-size: 16px;
      background: #007cba;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background: #005a87;
    }
    #result {
      margin-top: 20px;
      padding: 15px;
      text-align: center;
      font-weight: bold;
      border-radius: 5px;
    }
    .success {
      background: #d4edda;
      color: #155724;
    }
    .error {
      background: #f8d7da;
      color: #721c24;
    }
  </style>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂçúÁà≠?</h2>
  <p class="instruction">–í –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ–Ω–∞ –≥–∞–¥–∞—Ç–µ–ª–µ–π –∑–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤. –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂçúÁà≠?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    const options = [
      { value: "wang", text: "–ì–∞–¥–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –í–∞–Ω", correct: false },
      { value: "zheng", text: "–ì–∞–¥–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –ß–∂—ç–Ω", correct: true },
      { value: "ruler-zheng", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ß–∂—ç–Ω", correct: false },
      { value: "repeat", text: "–°–ª–æ–≤–æ ¬´–≥–∞–¥–∞—Ç—å¬ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è", correct: false }
    ];

    let selectedValue = null;

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–§–∏—à–µ—Ä-–ô–µ–π—Ç—Å)
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = ""; // üî¥ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—á–∏—â–∞–µ–º
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.";
        resultEl.className = "error";
        return;
      }

      if (selectedValue === "zheng") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! ÂçúÁà≠ ‚Äî —ç—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ –ß–∂—ç–Ω. –ò–µ—Ä–æ–≥–ª–∏—Ñ Áà≠ –∑–¥–µ—Å—å —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ ¬´–ß–∂—ç–Ω¬ª.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: Áà≠ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Äî –Ω–µ ¬´—Å–ø–æ—Ä¬ª, –∞ –∏–º—è ‚Äî –ß–∂—ç–Ω.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ Áà≠");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ ÂçúÁà≠" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")
      }, "*");
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    renderOptions();

    // –°–∏–≥–Ω–∞–ª —Ä–æ–¥–∏—Ç–µ–ª—é
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 900px;
      margin: 0 auto;
    }
    h2, p {
      text-align: center;
    }
    .match-container {
      display: flex;
      justify-content: space-around;
      gap: 30px;
      margin-top: 30px;
    }
    .column {
      width: 45%;
    }
    .column h3 {
      text-align: center;
      margin-bottom: 15px;
      color: #333;
    }
    .word-item, .def-item {
      padding: 12px 16px;
      margin: 8px 0;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s;
      text-align: center;
      font-size: 18px;
      font-weight: bold;
    }
    .word-item:hover, .def-item:hover {
      background: #eef5ff;
      border-color: #66aaff;
    }
    .word-item.selected {
      background: #bbdefb;
      border-color: #1976d2;
      transform: scale(1.05);
    }
    .def-item.selected {
      background: #c8e6c9;
      border-color: #43a047;
      transform: scale(1.05);
    }
    .matched {
      background: #d4edda;
      border: 2px solid #28a745 !important;
      color: #155724;
      opacity: 0.9;
      cursor: default;
      font-weight: bold;
    }
    button {
      display: block;
      margin: 20px auto;
      padding: 10px 20px;
      font-size: 16px;
    }
    #result {
      text-align: center;
      margin-top: 20px;
      font-weight: bold;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∑–Ω–∞—á–µ–Ω–∏—è -->
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –ü—è—Ç—å –ø–∞—Ä –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
const pairs = [
  { char: "Áéã", meaning: "w√°ng" },
  { char: "ÂçØ", meaning: "m«éo" },
  { char: "Âçú", meaning: "b«î" },
  { char: "‰∏ë", meaning: "ch«íu" },
  { char: "Áà≠", meaning: "zhƒìng" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, –∏ –∑–Ω–∞—á–µ–Ω–∏—è
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∏–µ—Ä–æ–≥–ª–∏—Ñ—ã)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∑–Ω–∞—á–µ–Ω–∏—è)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;

      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;

      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–∞—Ä—É
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–∞—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ!" : "–ï—Å—Ç—å –æ—à–∏–±–∫–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    .hint-list {
      margin: 5px 0 0;
      padding-left: 20px;
      color: #7f8c8d;
      font-size: 14px;
      list-style-type: "üî∏ ";
    }

    .hint-list li {
      margin: 3px 0;
    }

    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      line-height: 1.6;
    }

    h2 {
      color: #2c3e50;
    }

    .instructions {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-size: 16px;
    }

    .drop-area {
      min-height: 60px;
      border: 2px dashed #3498db;
      border-radius: 8px;
      padding: 10px;
      margin: 20px 0;
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      background: #eef7ff;
      font-size: 24px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin: 15px 0;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 8px;
      min-height: 60px;
      background: #f9f9f9;
    }

    .char-box {
      width: 45px;
      height: 45px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: grab;
      font-size: 24px;
      user-select: none;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
      transition: all 0.2s;
    }

    .char-box:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 5px rgba(0,0,0,0.15);
    }

    .char-box.dragging {
      opacity: 0.7;
      transform: scale(1.05);
    }

    .punctuation {
      font-size: 20px;
      color: #7f8c8d;
    }

    .controls {
      margin-top: 20px;
    }

    button {
      padding: 10px 18px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-right: 10px;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 15px;
      font-weight: bold;
      color: #e74c3c;
    }

    .success {
      color: #27ae60;
    }

    .hint {
      font-style: italic;
      color: #7f8c8d;
      margin-top: 5px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</strong>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É:</p>
    <p><em>–ì–∞–¥–∞—Ç–µ–ª—å –ß–∂—ç–Ω —Å–∫–∞–∑–∞–ª: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å–æ–≤¬ª.</em></p>
  </div>

  <p><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area">
    <!-- –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const expected = ['Âçú', 'Áà≠', 'Êõ∞', 'Áéã', 'ÂÖÅ', '‰∏ç', 'Ë≤û'];

    // –í—Å–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã: –Ω—É–∂–Ω—ã–µ + –æ–±–º–∞–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ –∏–∑ —É—Ä–æ–∫–∞ 1)
    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      'Áà≠', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âçú', '‰∏ë', 'Áèè', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const isMobileDevice = 'ontouchstart' in window;

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.classList.remove('dragging');
      clone.onclick = null;
      clone.ontouchstart = null;
      clone.removeEventListener('dragstart', handleDragStart);
      clone.removeEventListener('dragend', handleDragEnd);

      // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
      box.remove();

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞
    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºå') {
          box.classList.add('punctuation');
        }
        box.textContent = char;

        if (isMobileDevice) {
          // –¢–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö ‚Äî –∫–ª–∏–∫
          box.style.cursor = 'pointer';
          box.addEventListener('click', function() {
            moveToDropArea(this);
          });
        } else {
          // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ ‚Äî drag and drop
          box.draggable = true;
          box.addEventListener('dragstart', function(e) {
            e.dataTransfer.setData('text/plain', this.textContent);
            this.classList.add('dragging');
          });
          box.addEventListener('dragend', function() {
            this.classList.remove('dragging');
          });
        }

        charPool.appendChild(box);
      });
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ drop ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    if (!isMobileDevice) {
      dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.style.borderColor = '#e67e22';
      });

      dropArea.addEventListener('dragleave', () => {
        dropArea.style.borderColor = '#3498db';
      });

      dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.style.borderColor = '#3498db';

        const char = e.dataTransfer.getData('text/plain');
        const sourceBox = [...document.querySelectorAll('#char-pool .char-box')]
          .find(b => b.textContent === char && b.draggable);

        if (sourceBox) {
          moveToDropArea(sourceBox);
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong> –≠—Ç–æ –ø–æ–¥–ª–∏–Ω–Ω–∞—è –æ—Ä–∞–∫—É–ª—å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å.<br>ÂçúÁà≠Êõ∞ÁéãÂÖÅ‰∏çË≤û = "–ì–∞–¥–∞—Ç–µ–ª—å –ß–∂—ç–Ω —Å–∫–∞–∑–∞–ª: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å–æ–≤¬ª."';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å
    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –°–∏–≥–Ω–∞–ª: –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({
      type: "TASK_EXISTS",
      valid: true
    }, "*");
  </script>
</body>
</html>

=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –¥–µ–Ω—å Áô∏‰∏ë?</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 800px;
      margin: 0 auto;
      line-height: 1.6;
    }
    h2 {
      color: #2c3e50;
      text-align: center;
      margin-bottom: 20px;
    }
    .oracle-text {
      font-size: 24px;
      text-align: center;
      margin: 20px 0;
      font-weight: bold;
      letter-spacing: 1px;
    }
    .pinyin-container {
      margin: 15px 0;
      border: 1px solid #eee;
      border-radius: 8px;
      overflow: hidden;
    }
    .pinyin-toggle {
      background: #f5f5f5;
      border: none;
      padding: 8px 15px;
      width: 100%;
      text-align: left;
      cursor: pointer;
      font-size: 14px;
      color: #555;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .pinyin-toggle:hover {
      background: #eef7ff;
    }
    .pinyin-toggle::after {
      content: '‚ñº';
      font-size: 12px;
      transition: transform 0.2s;
    }
    .pinyin-text {
      padding: 0 15px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease, padding 0.3s ease;
      background: #fafafa;
      font-style: italic;
      color: #666;
      font-size: 15px;
    }
    .pinyin-text.expanded {
      padding: 12px 15px;
      max-height: 100px;
    }
    .pinyin-toggle.expanded::after {
      transform: rotate(180deg);
    }
    .options {
      margin: 20px 0;
    }
    .option {
      margin: 10px 0;
      padding: 12px;
      background: #f8f9fa;
      border: 1px solid #ddd;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s;
    }
    .option:hover {
      background: #eef7ff;
      border-color: #3498db;
    }
    .option.selected {
      background: #d4edff;
      border-color: #3498db;
      box-shadow: 0 0 0 2px #b3d7ff;
    }
    .option input {
      margin-right: 10px;
    }
    button {
      padding: 12px 20px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      display: block;
      margin: 20px auto;
    }
    button:hover {
      background: #2980b9;
    }
    #result {
      margin-top: 20px;
      padding: 15px;
      border-radius: 5px;
      text-align: center;
      font-weight: bold;
    }
    .success {
      background: #e8f5e9;
      color: #27ae60;
    }
    .error {
      background: #ffebee;
      color: #e74c3c;
    }
  </style>
</head>
<body>

  <h2>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –¥–µ–Ω—å Áô∏‰∏ë?</h2>

  <div class="oracle-text">Áô∏‰∏ëÂÖÅÂÖ∂Èõ®</div>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å ‚ñº
    </button>
    <div class="pinyin-text">gu«ê ch«íu y«în q√≠ y«î</div>
  </div>

  <div class="options" id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è (–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π)
    const options = [
      { value: "rain-coming", text: "–ë—É–¥–µ—Ç –¥–æ–∂–¥—å", correct: false },
      { value: "no-rain", text: "–ù–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { value: "rained", text: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—à—ë–ª –¥–æ–∂–¥—å", correct: true },
      { value: "divined", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≥–∞–¥–∞–ª", correct: false }
    ];

    let selectedValue = null;

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (–§–∏—à–µ—Ä-–ô–µ–π—Ç—Å)
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);
        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      if (!selectedValue) {
        document.getElementById("result").textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.";
        document.getElementById("result").className = "error";
        return;
      }

      const isCorrect = selectedValue === "rained";

      const resultEl = document.getElementById("result");
      if (isCorrect) {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! ÂÖÅÂÖ∂Èõ® –æ–∑–Ω–∞—á–∞–µ—Ç: ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ—à—ë–ª –¥–æ–∂–¥—å¬ª ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ü–æ–¥—É–º–∞–π—Ç–µ: ÂÖÅ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ ÂÖÅ" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;

    // –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—é
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 3: –ó–Ω–∞—á–µ–Ω–∏–µ ÂÖ∂</title>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    label { display: block; margin: 10px 0; }
    button { padding: 10px; }
  </style>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖ∂?</h2>
  <p><strong>¬´ÂÖ∂Èõ®¬ª ‚Äî —ç—Ç–æ:</strong></p>
  <div class="pinyin-container">
  <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å ‚ñº
  </button>
  <div class="pinyin-text">
    q√≠ y«î
  </div>
</div>

<style>
  .pinyin-container {
    margin: 15px 0;
    border: 1px solid #eee;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .pinyin-toggle {
    background: #f5f5f5;
    border: none;
    padding: 8px 15px;
    width: 100%;
    text-align: left;
    cursor: pointer;
    font-size: 14px;
    color: #555;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .pinyin-toggle:hover {
    background: #eef7ff;
  }
  
  .pinyin-toggle::after {
    content: '‚ñº';
    font-size: 12px;
    transition: transform 0.2s;
  }
  
  .pinyin-text {
    padding: 0 15px;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
    background: #fafafa;
    font-style: italic;
    color: #666;
    font-size: 15px;
  }
  
  .pinyin-text.expanded {
    padding: 12px 15px;
    max-height: 100px;
  }
  
  .pinyin-toggle.expanded::after {
    transform: rotate(180deg);
  }
</style>
  <label><input type="radio" name="q" value="0"> –î–æ–∂–¥—å –∏–¥—ë—Ç</label>
  <label><input type="radio" name="q" value="1"> –ë—É–¥–µ—Ç –¥–æ–∂–¥—å</label>
  <label><input type="radio" name="q" value="2"> –î–æ–∂–¥—è –Ω–µ –±—É–¥–µ—Ç</label>
  <label><input type="radio" name="q" value="3"> –î–æ–∂–¥—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª</label>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      if (!selected) {
        document.getElementById("result").textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.value === "1") {
        document.getElementById("result").textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ÂÖ∂ ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –±—É–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.";
        sendResult(true);
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. ÂÖ∂ ‚Äî —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ –±—É–¥—É—â–µ–≥–æ/–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è.";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖ∂");
      }
    }
  </script>
</body>
</html><script>// –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é, —á—Ç–æ —ç—Ç–æ ‚Äî –Ω–∞—Å—Ç–æ—è—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
window.parent.postMessage({
  type: "TASK_EXISTS",
  valid: true
}, "*");
</script>


=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    .hint-list {
      margin: 5px 0 0;
      padding-left: 20px;
      color: #7f8c8d;
      font-size: 14px;
      list-style-type: "üî∏ ";
    }

    .hint-list li {
      margin: 3px 0;
    }

    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      line-height: 1.6;
    }

    h2 {
      color: #2c3e50;
    }

    .instructions {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-size: 16px;
    }

    .drop-area {
      min-height: 60px;
      border: 2px dashed #3498db;
      border-radius: 8px;
      padding: 10px;
      margin: 20px 0;
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      background: #eef7ff;
      font-size: 24px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin: 15px 0;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 8px;
      min-height: 60px;
      background: #f9f9f9;
    }

    .char-box {
      width: 45px;
      height: 45px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: grab;
      font-size: 24px;
      user-select: none;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
      transition: all 0.2s;
    }

    .char-box:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 5px rgba(0,0,0,0.15);
    }

    .char-box.dragging {
      opacity: 0.7;
      transform: scale(1.05);
    }

    .punctuation {
      font-size: 20px;
      color: #7f8c8d;
    }

    .controls {
      margin-top: 20px;
    }

    button {
      padding: 10px 18px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-right: 10px;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 15px;
      font-weight: bold;
      color: #e74c3c;
    }

    .success {
      color: #27ae60;
    }

    .hint {
      font-style: italic;
      color: #7f8c8d;
      margin-top: 5px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</strong>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É:</p>
    <p><em>"–í–æ–ø—Ä–æ—Å –≥–ª–∞—Å–∏—Ç: ¬´–ë—ã–ª –ª–∏ –¥–æ–∂–¥—å?¬ª"</em></p>
    
    <p class="hint">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—Ä–µ–º–µ–Ω–∏</p>
  </div>

  <p><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area">
    <!-- –°—é–¥–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const expected = ['Ë≤û', 'Êõ∞', 'ÂÖÅ', 'Èõ®'];

    // –í—Å–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã: –Ω—É–∂–Ω—ã–µ + –æ–±–º–∞–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ –∏–∑ —É—Ä–æ–∫–∞ 1)
    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      '‰∏ô', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âç†', '‰∏ë', 'Áèè', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ø–æ —Å–µ–Ω—Å–æ—Ä—É)
    const isMobileDevice = 'ontouchstart' in window;

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const char = box.textContent;
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.classList.remove('dragging');
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      clone.onclick = null;
      clone.ontouchstart = null;
      clone.removeEventListener('dragstart', handleDragStart);
      clone.removeEventListener('dragend', handleDragEnd);

      // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
      box.remove();

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞
    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºå') {
          box.classList.add('punctuation');
        }
        box.textContent = char;

        if (isMobileDevice) {
          // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö ‚Äî –∫–ª–∏–∫
          box.style.cursor = 'pointer';
          box.addEventListener('click', function() {
            moveToDropArea(this);
          });
        } else {
          // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ ‚Äî drag and drop
          box.draggable = true;
          box.addEventListener('dragstart', function(e) {
            e.dataTransfer.setData('text/plain', this.textContent);
            this.classList.add('dragging');
          });
          box.addEventListener('dragend', function() {
            this.classList.remove('dragging');
          });
        }

        charPool.appendChild(box);
      });
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ drop ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    if (!isMobileDevice) {
      dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.style.borderColor = '#e67e22';
      });

      dropArea.addEventListener('dragleave', () => {
        dropArea.style.borderColor = '#3498db';
      });

      dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.style.borderColor = '#3498db';

        const char = e.dataTransfer.getData('text/plain');
        const sourceBox = [...document.querySelectorAll('#char-pool .char-box')]
          .find(b => b.textContent === char && b.draggable);

        if (sourceBox) {
          moveToDropArea(sourceBox);
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong> –≠—Ç–æ –ø–æ–¥–ª–∏–Ω–Ω–∞—è –æ—Ä–∞–∫—É–ª—å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å.<br>Ë≤ûÊõ∞ÂÖÅÈõ® = –í–æ–ø—Ä–æ—Å –≥–ª–∞—Å–∏—Ç: ¬´–ë—ã–ª –ª–∏ –¥–æ–∂–¥—å?¬ª';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å
    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –°–∏–≥–Ω–∞–ª: –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({
      type: "TASK_EXISTS",
      valid: true
    }, "*");
  </script>
</body>
</html>

=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    .hint-list {
      margin: 5px 0 0;
      padding-left: 20px;
      color: #7f8c8d;
      font-size: 14px;
      list-style-type: "üî∏ ";
    }

    .hint-list li {
      margin: 3px 0;
    }

    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      line-height: 1.6;
    }

    h2 {
      color: #2c3e50;
    }

    .instructions {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-size: 16px;
    }

    .drop-area {
      min-height: 60px;
      border: 2px dashed #3498db;
      border-radius: 8px;
      padding: 10px;
      margin: 20px 0;
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      background: #eef7ff;
      font-size: 24px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin: 15px 0;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 8px;
      min-height: 60px;
      background: #f9f9f9;
    }

    .char-box {
      width: 45px;
      height: 45px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: grab;
      font-size: 24px;
      user-select: none;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
      transition: all 0.2s;
    }

    .char-box:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 5px rgba(0,0,0,0.15);
    }

    .char-box.dragging {
      opacity: 0.7;
      transform: scale(1.05);
    }

    .punctuation {
      font-size: 20px;
      color: #7f8c8d;
    }

    .controls {
      margin-top: 20px;
    }

    button {
      padding: 10px 18px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-right: 10px;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 15px;
      font-weight: bold;
      color: #e74c3c;
    }

    .success {
      color: #27ae60;
    }

    .hint {
      font-style: italic;
      color: #7f8c8d;
      margin-top: 5px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</strong>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É:</p>
    <p><em>¬´–ù–∞ —à–µ—Å—Ç–æ–π –¥–µ–Ω—å –ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤¬ª</em></p>
    
    <p class="hint">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤—Å–ø–æ–º–Ω–∏—Ç–µ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –∑–Ω–∞–∫–∞–º</p>
    <ul class="hint-list">
      <li>–î–µ–Ω—å 1: Áî≤ + Â≠ê ‚Üí Áî≤Â≠ê</li>
      <li>–î–µ–Ω—å 2: ‰πô + ‰∏ë ‚Üí ‰πô‰∏ë</li>
      <li>etc...</li>
    </ul>
  </div>

  <p><strong>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area" class="drop-area">
    <!-- –°—é–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—é—Ç—Å—è –∏–ª–∏ –∫–ª–∏–∫–∞—é—Ç—Å—è –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const expected = ['Â∑±', 'Â∑≥', 'Áéã', '‰∏ç', 'Ë≤û'];

    // –í—Å–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã: –Ω—É–∂–Ω—ã–µ + –æ–±–º–∞–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ –∏–∑ —É—Ä–æ–∫–∞ 1)
    const allChars = [
      'Â∑±', 'ÂçØ', 'Áéã', '‰∏ç', 'Ë≤û', 'Â∑≥',
      '‰∏ô', 'ÂØÖ', 'Áà≠', 'Èõ®', 'Êõ∞', 'ÂÖ∂', 
      'Áô∏', '‰∫•', 'ÂÖÅ', 'Âç†', '‰∏ë', 'Áèè', 'Â£¨', 'Âçà'
    ];

    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    function isMobile() {
      return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || window.innerWidth <= 768;
    }

    const isMobileDevice = isMobile();

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const char = box.textContent;
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.classList.remove('dragging');
      clone.onmousedown = null;
      clone.ontouchstart = null;
      clone.removeEventListener('dragstart', handleDragStart);
      clone.removeEventListener('dragend', handleDragEnd);
      clone.removeEventListener('click', handleClick);

      // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
      box.remove();

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
    function initCharPool(shuffled) {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      shuffled.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºå') {
          box.classList.add('punctuation');
        }
        box.textContent = char;

        if (isMobileDevice) {
          // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö ‚Äî –∫–ª–∏–∫
          box.style.cursor = 'pointer';
          box.addEventListener('click', function handleClick() {
            moveToDropArea(this);
          });
        } else {
          // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ ‚Äî drag and drop
          box.draggable = true;
          box.addEventListener('dragstart', function handleDragStart(e) {
            e.dataTransfer.setData('text/plain', this.textContent);
            this.classList.add('dragging');
          });
          box.addEventListener('dragend', function handleDragEnd() {
            this.classList.remove('dragging');
          });
        }

        charPool.appendChild(box);
      });
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    let shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
    initCharPool(shuffledChars);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag and drop ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    if (!isMobileDevice) {
      dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.style.borderColor = '#e67e22';
      });

      dropArea.addEventListener('dragleave', () => {
        dropArea.style.borderColor = '#3498db';
      });

      dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.style.borderColor = '#3498db';

        const char = e.dataTransfer.getData('text/plain');
        const sourceBox = [...document.querySelectorAll('#char-pool .char-box')].find(b => b.textContent === char && b.draggable);
        if (sourceBox) {
          moveToDropArea(sourceBox);
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong> –≠—Ç–æ –ø–æ–¥–ª–∏–Ω–Ω–∞—è –æ—Ä–∞–∫—É–ª—å–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å.<br>Â∑±Â∑≥Áéã‰∏çË≤û = "–ù–∞ —à–µ—Å—Ç–æ–π –¥–µ–Ω—å –ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤"';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å
    resetBtn.addEventListener('click', () => {
      shuffledChars = [...allChars].sort(() => Math.random() - 0.5);
      initCharPool(shuffledChars);
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –°–∏–≥–Ω–∞–ª: –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({
      type: "TASK_EXISTS",
      valid: true
    }, "*");
  </script>
</body>
</html>

=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
    line-height: 1.6;
  }
  h2 {
    color: #2c3e50;
    text-align: center;
    margin-bottom: 20px;
  }
  .instruction {
    text-align: center;
    margin-bottom: 25px;
    color: #555;
  }
  .pair {
    margin: 15px 0;
    padding: 12px;
    background: #f9f9f9;
    border-radius: 8px;
    border: 1px solid #eee;
  }
  label {
    font-weight: bold;
    color: #333;
  }
  select {
    width: 100%;
    max-width: 300px;
    padding: 8px;
    margin-top: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 15px;
  }
  button {
    padding: 12px 20px;
    font-size: 16px;
    background: #3498db;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    display: block;
    margin: 30px auto;
  }
  button:hover {
    background: #2980b9;
  }
  #result {
    margin-top: 20px;
    padding: 15px;
    border-radius: 5px;
    text-align: center;
    font-weight: bold;
  }
  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
  .error {
    background: #ffebee;
    color: #e74c3c;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π —ç–ø–æ—Ö–∏ –ò–Ω—å.</p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üí –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π)
    const wordBank = [
      { char: "‰∏ô", correct: "3-–π –Ω–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª" },
      { char: "Âçú", correct: "–≥–∞–¥–∞—Ç—å" },
      { char: "Èõ®", correct: "–¥–æ–∂–¥—å" },
      { char: "Áéã", correct: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å" },
      { char: "Ë≤û", correct: "–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–∞–∫—É–ª—É" },
      { char: "Êõ∞", correct: "—Å–∫–∞–∑–∞—Ç—å, –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ (–≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å)" },
      { char: "ÂÖÅ", correct: "–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)" },
      { char: "Âç†", correct: "–∏—Å—Ç–æ–ª–∫–æ–≤—ã–≤–∞—Ç—å, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å" }
    ];

    // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    const allValues = wordBank.map(item => item.correct);

    // –§—É–Ω–∫—Ü–∏—è –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –ø–∞—Ä
    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
      const shuffledChars = shuffleArray(wordBank);

      shuffledChars.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—É–¥–µ—Ç
        const options = shuffleArray([...new Set([...allValues])]); // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º <select>
        let selectHTML = `<select id="char_${item.char}">
          <option value="">-- –≤—ã–±–µ—Ä–∏—Ç–µ --</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      const results = {};
      let allFilled = true;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) {
          allFilled = false;
        }
        results[item.char] = select?.value || null;
      });

      if (!allFilled) {
        document.getElementById("result").textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.";
        document.getElementById("result").className = "error";
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã
      const isCorrect = wordBank.every(item => results[item.char] === item.correct);

      const resultEl = document.getElementById("result");
      if (isCorrect) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ! –í—ã —Ç–æ—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Âçú ‚Äî –≥–∞–¥–∞—Ç—å, Áéã ‚Äî –ø—Ä–∞–≤–∏—Ç–µ–ª—å, Ë≤û ‚Äî –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, ÂÖÅ ‚Äî –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ.";
        resultEl.textContent = "‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã. " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.onload = renderPairs;

    // –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—é
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ü–µ—Ä–µ–≤–æ–¥</title>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      padding: 20px; 
    }
    .question {
      margin-bottom: 20px;
    }
    .options {
      margin-left: 20px;
    }
    .options label {
      display: block;
      margin: 8px 0;
      cursor: pointer;
      color: #333;
    }
    .options input {
      margin-right: 8px;
    }
    button { 
      padding: 10px; 
      margin-top: 20px; 
    }
    .pinyin-container {
      margin: 15px 0;
      border: 1px solid #eee;
      border-radius: 8px;
      overflow: hidden;
    }
    .pinyin-toggle {
      background: #f5f5f5;
      border: none;
      padding: 8px 15px;
      width: 100%;
      text-align: left;
      cursor: pointer;
      font-size: 14px;
      color: #555;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .pinyin-toggle:hover {
      background: #eef7ff;
    }
    .pinyin-toggle::after {
      content: '‚ñº';
      font-size: 12px;
      transition: transform 0.2s;
    }
    .pinyin-text {
      padding: 0 15px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease, padding 0.3s ease;
      background: #fafafa;
      font-style: italic;
      color: #666;
      font-size: 15px;
    }
    .pinyin-text.expanded {
      padding: 12px 15px;
      max-height: 100px;
    }
    .pinyin-toggle.expanded::after {
      transform: rotate(180deg);
    }
  </style>
</head>
<body>

  <h2>–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</h2>

  <div id="questions-container">
    <!-- –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    const questions = [
      {
        id: "t1",
        text: "‰∏ôÂØÖÂçú",
        pinyin: "b«êng y√≠n bo",
        options: [
          "–≥–∞–¥–∞–ª–∏ –≤ –¥–µ–Ω—å –±–∏–Ω-–∏–Ω—å",
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≥–∞–¥–∞–ª",
          "–≤ –¥–µ–Ω—å –±–∏–Ω—å-–º–∞–æ",
          "–∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ –≤ —Ö—Ä–∞–º–µ"
        ],
        correct: "–≥–∞–¥–∞–ª–∏ –≤ –¥–µ–Ω—å –±–∏–Ω-–∏–Ω—å"
      },
      {
        id: "t2",
        text: "ÁéãÂç†Êõ∞",
        pinyin: "w√°ng zh√†n yuƒì",
        options: [
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª",
          "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª",
          "—Ü–∞—Ä—å –ø—Ä–∏–∫–∞–∑–∞–ª",
          "–æ–Ω –∑–∞–ø–∏—Å–∞–ª"
        ],
        correct: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª"
      }
    ];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    function loadQuestions() {
      const container = document.getElementById("questions-container");
      container.innerHTML = ""; // –æ—á–∏—Å—Ç–∏–º

      const shuffled = shuffleArray(questions);

      shuffled.forEach(q => {
        const questionDiv = document.createElement("div");
        questionDiv.className = "question";
        questionDiv.innerHTML = `
          <p><strong>${q.text}</strong></p>
          <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
              –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å ‚ñº
            </button>
            <div class="pinyin-text">${q.pinyin}</div>
          </div>
          <div class="options">
            ${q.options.map(option => `
              <label>
                <input type="radio" name="${q.id}" value="${option}">
                ${option}
              </label>
            `).join("")}
          </div>
        `;
        container.appendChild(questionDiv);
      });
    }

    function check() {
      const selectedT1 = document.querySelector('input[name="t1"]:checked');
      const selectedT2 = document.querySelector('input[name="t2"]:checked');

      if (!selectedT1 || !selectedT2) {
        document.getElementById("result").textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      const correctT1 = questions.find(q => q.id === "t1").correct;
      const correctT2 = questions.find(q => q.id === "t2").correct;

      const match1 = selectedT1.value === correctT1;
      const match2 = selectedT2.value === correctT2;

      if (match1 && match2) {
        document.getElementById("result").textContent = "‚úÖ –í–µ—Ä–Ω–æ!";
        sendResult(true);
      } else {
        document.getElementById("result").textContent = "‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü–æ–¥—Å–∫–∞–∑–∫–∞: Êõ∞ ‚Äî –≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å, Âç† ‚Äî –∏—Å—Ç–æ–ª–∫–æ–≤—ã–≤–∞—Ç—å.";
        sendResult(false, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    window.onload = loadQuestions;

    // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({
      type: "TASK_EXISTS",
      valid: true
    }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ü—Ä—è–º–∞—è —Ä–µ—á—å –≤ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
      line-height: 1.6;
      background: #f8f9fa;
      color: #333;
    }

    h2 {
      color: #2c3e50;
      text-align: center;
      margin: 20px 0;
      font-size: 28px;
    }

    /* –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */
    .task {
      padding: 20px;
      background: white;
      border-radius: 0;
      box-shadow: none;
      margin: 0 auto;
      width: 100%;
    }

    .oracle-text {
      font-size: 32px;
      text-align: center;
      margin: 30px 0;
      font-weight: bold;
      letter-spacing: 1px;
      color: #1a1a1a;
    }

    .question {
      font-weight: bold;
      margin: 20px 0 10px;
      font-size: 18px;
      text-align: center;
    }

    .options {
      display: flex;
      flex-direction: column;
      align-items: stretch;
      max-width: 600px;
      margin: 20px auto;
    }

    .option {
      margin: 8px 0;
      padding: 14px;
      border-radius: 6px;
      background: #f0f4f8;
      cursor: pointer;
      transition: all 0.2s;
      border: 1px solid #d0d8e0;
      font-size: 16px;
      text-align: center;
    }

    .option:hover {
      background: #e1effc;
      transform: scale(1.02);
    }

    .option.selected {
      background: #d4edff;
      border-color: #3498db;
      border-width: 2px;
      font-weight: bold;
    }

    button {
      padding: 14px 24px;
      font-size: 18px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      margin: 30px auto;
      display: block;
      transition: background 0.2s;
    }

    button:hover {
      background: #2980b9;
    }

    #result {
      margin: 25px auto;
      padding: 16px;
      border-radius: 6px;
      text-align: center;
      font-weight: bold;
      max-width: 600px;
      font-size: 16px;
    }

    .success {
      background: #e8f5e9;
      color: #27ae60;
      border: 1px solid #a5d6a7;
    }

    .error {
      background: #ffebee;
      color: #e74c3c;
      border: 1px solid #ef9a9a;
    }

    .explanation {
      margin: 20px auto;
      padding: 20px;
      background: #fffde7;
      border-radius: 6px;
      font-size: 16px;
      max-width: 700px;
      line-height: 1.7;
      border-left: 4px solid #ffb300;
    }

    /* –ü–∏–Ω—å–∏–Ω—å ‚Äî —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –ª–æ–º–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å */
    .pinyin-container {
      margin: 20px auto;
      border: 1px solid #ddd;
      border-radius: 0;
      overflow: hidden;
      max-width: 600px;
    }

    .pinyin-toggle {
      background: #f5f5f5;
      border: none;
      padding: 12px 16px;
      width: 100%;
      text-align: left;
      cursor: pointer;
      font-size: 14px;
      color: #555;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .pinyin-toggle:hover {
      background: #eef7ff;
    }

    .pinyin-toggle::after {
      content: '‚ñº';
      font-size: 12px;
      transition: transform 0.2s;
    }

    .pinyin-toggle.expanded::after {
      transform: rotate(180deg);
    }

    .pinyin-text {
      padding: 0 16px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease, padding 0.3s ease;
      background: #fafafa;
      font-style: italic;
      color: #666;
      font-size: 15px;
      border-top: 1px solid #eee;
    }

    .pinyin-text.expanded {
      padding: 12px 16px;
      max-height: 100px;
    }

    /* –ù–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö ‚Äî –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
    @media (max-width: 600px) {
      body {
        padding: 10px;
      }
      .oracle-text {
        font-size: 24px;
      }
      .options, #result, .explanation, .pinyin-container {
        max-width: 100%;
      }
      .task {
        padding: 15px;
      }
    }
  </style>
</head>
<body>
  <h2>–ü—Ä—è–º–∞—è —Ä–µ—á—å –≤ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö</h2>

  <div class="task">
    <p style="text-align: center; font-size: 18px;">–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –Ω–∞–¥–ø–∏—Å—å –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å:</p>
    
    <div class="oracle-text">Ë≤û‰∏ÅÂçØÂÖ∂Èõ®ÁéãÂç†Êõ∞ÂÖ∂Èõ®</div>
    
    <div class="pinyin-container">
      <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å ‚ñº
      </button>
      <div class="pinyin-text">zhƒìn dƒ´ng m«éo q√≠ y«î w√°ng zh√†n yuƒì q√≠ y«î</div>
    </div>

    <div class="question">–ö–∞–∫–∞—è —á–∞—Å—Ç—å —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞–Ω–Ω—ã–π –æ—Ä–∞–∫—É–ª—É?</div>
    
    <div id="options-container" class="options">
      <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã -->
    </div>
    
    <button onclick="checkAnswer()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    
    <div id="result"></div>
    
    <div id="explanation" class="explanation" style="display: none;">
      <p><strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> –í –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ã—á–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç:</p>
      <ol>
        <li><strong>–í–æ–ø—Ä–æ—Å –∫ –æ—Ä–∞–∫—É–ª—É</strong> ‚Äî –≤–≤–æ–¥–∏—Ç—Å—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–º <strong>Ë≤û</strong> ‚Äî —ç—Ç–æ –ø—Ä—è–º–∞—è —Ä–µ—á—å</li>
        <li><strong>–û—Ç–≤–µ—Ç</strong> ‚Äî –≤–≤–æ–¥–∏—Ç—Å—è —Ñ—Ä–∞–∑–æ–π <strong>ÁéãÂç†Êõ∞</strong> ‚Äî "—Ü–∞—Ä—å –∏—Å—Ç–æ–ª–∫–æ–≤–∞–ª" ‚Äî —Ç–æ–∂–µ –ø—Ä—è–º–∞—è —Ä–µ—á—å</li>
      </ol>
      <p>–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ <strong>„ÄåË≤û‰∏ÅÂçØÂÖ∂Èõ®„Äç</strong> ‚Äî —ç—Ç–æ –ø–æ–ª–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: "–ì–∞–¥–∞–Ω–∏–µ: –±—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å –Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –¥–µ–Ω—å?"</p>
    </div>
  </div>

  <script>
    const options = [
      { id: 1, text: "Ë≤û‰∏ÅÂçØÂÖ∂Èõ®", correct: true },
      { id: 2, text: "ÁéãÂç†Êõ∞ÂÖ∂Èõ®", correct: false },
      { id: 3, text: "‰∏ÅÂçØÂÖ∂Èõ®", correct: false },
      { id: 4, text: "Ë≤û‰∏ÅÂçØ", correct: false }
    ];

    let selectedOptionId = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const optionEl = document.createElement("div");
        optionEl.className = "option";
        optionEl.textContent = option.text;
        optionEl.dataset.id = option.id;
        optionEl.onclick = () => selectOption(option.id);
        container.appendChild(optionEl);
      });
    }

    function selectOption(id) {
      selectedOptionId = id;
      document.querySelectorAll('.option').forEach(opt => {
        opt.classList.remove('selected');
      });
      document.querySelector(`.option[data-id="${id}"]`).classList.add('selected');
    }

    function checkAnswer() {
      const resultEl = document.getElementById('result');
      const explanationEl = document.getElementById('explanation');

      if (!selectedOptionId) {
        resultEl.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞";
        resultEl.className = "error";
        return;
      }

      const selectedOption = options.find(opt => opt.id === selectedOptionId);

      if (selectedOption.correct) {
        resultEl.innerHTML = "‚úÖ <strong>–í–µ—Ä–Ω–æ!</strong> –≠—Ç–æ –ø–æ–ª–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –æ—Ä–∞–∫—É–ª—É.";
        resultEl.className = "success";
        explanationEl.style.display = 'block';
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        resultEl.className = "error";
        explanationEl.style.display = 'block';
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Ä–µ—á–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø—Ä—è–º–∞—è —Ä–µ—á—å" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderOptions;

    window.parent.postMessage({
      type: "TASK_EXISTS",
      valid: true
    }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–°–∫–∞–∑—É–µ–º–æ–µ</title>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    button { padding: 10px; }
  </style>
</head>
<body>
  <h2>–ù–∞–π–¥–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç</h2>
  <p><strong>Â∑±ÂçØÂçúË≤ûÈõ®Ôºü</strong></p>
  <div class="pinyin-container">
  <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å ‚ñº
  </button>
  <div class="pinyin-text">
    j«ê m«éo bu zhƒìn y«î?
  </div>
</div>

<style>
  .pinyin-container {
    margin: 15px 0;
    border: 1px solid #eee;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .pinyin-toggle {
    background: #f5f5f5;
    border: none;
    padding: 8px 15px;
    width: 100%;
    text-align: left;
    cursor: pointer;
    font-size: 14px;
    color: #555;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .pinyin-toggle:hover {
    background: #eef7ff;
  }
  
  .pinyin-toggle::after {
    content: '‚ñº';
    font-size: 12px;
    transition: transform 0.2s;
  }
  
  .pinyin-text {
    padding: 0 15px;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
    background: #fafafa;
    font-style: italic;
    color: #666;
    font-size: 15px;
  }
  
  .pinyin-text.expanded {
    padding: 12px 15px;
    max-height: 100px;
  }
  
  .pinyin-toggle.expanded::after {
    transform: rotate(180deg);
  }
</style>
  <p>–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–∏–∫–∞—Ç–æ–º?</p>
  <button onclick="answer('Èõ®')">Èõ®</button>
  <button onclick="answer('Ë≤û')">Ë≤û</button>
  <button onclick="answer('Âçú')">Âçú</button>
  <button onclick="answer('Â∑±ÂçØ')">Â∑±ÂçØ</button>

  <p id="result"></p>

  <script>
    function answer(sel) {
      if (sel === "Èõ®") {
        document.getElementById("result").textContent = "‚úÖ –í–µ—Ä–Ω–æ! Èõ® ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç: ¬´–±—É–¥–µ—Ç –¥–æ–∂–¥—å?¬ª";
        sendResult(true);
      } else {
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ: —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ¬´—á—Ç–æ –±—É–¥–µ—Ç?¬ª";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–∫–∞–∑—É–µ–º–æ–≥–æ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }
  </script>
</body>
</html><script>// –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é, —á—Ç–æ —ç—Ç–æ ‚Äî –Ω–∞—Å—Ç–æ—è—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
window.parent.postMessage({
  type: "TASK_EXISTS",
  valid: true
}, "*");
</script>


=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ä–∞–∫—É–ª—å–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      line-height: 1.6;
      margin: 0;
      background: #f7f9fc;
      color: #333;
    }

    h2 {
      color: #2c3e50;
      text-align: center;
      margin: 20px 0;
      font-size: 28px;
    }

    .instructions {
      background: #f8f9fa;
      padding: 18px;
      border-radius: 8px;
      margin-bottom: 25px;
      font-size: 17px;
      border: 1px solid #e0e0e0;
    }

    .drop-area {
      min-height: 60px;
      border: 2px dashed #3498db;
      border-radius: 8px;
      padding: 12px;
      margin: 20px 0;
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      background: #eef7ff;
      font-size: 24px;
      align-items: center;
      justify-content: center;
    }

    .word-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin: 15px 0;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 8px;
      min-height: 60px;
      background: #f9f9f9;
      align-items: center;
      justify-content: center;
    }

    .word-box {
      background: white;
      border: 1px solid #ccc;
      border-radius: 6px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      cursor: grab;
      font-size: 18px;
      padding: 10px 14px;
      user-select: none;
      box-shadow: 0 1px 3px rgba(0,0,0,0.08);
      transition: all 0.2s;
      white-space: nowrap;
    }

    .word-box:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 5px rgba(0,0,0,0.15);
    }

    .word-box.dragging {
      opacity: 0.7;
      transform: scale(1.05);
    }

    .controls {
      margin-top: 30px;
      text-align: center;
    }

    button {
      padding: 12px 20px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      margin: 0 10px;
      transition: background 0.2s;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 20px;
      font-weight: bold;
      color: #e74c3c;
      text-align: center;
      padding: 12px;
      border-radius: 6px;
    }

    .success {
      color: #27ae60;
      background: #e8f5e9;
      border: 1px solid #a5d6a7;
    }

    .oracle-text {
      font-size: 30px;
      text-align: center;
      margin: 25px 0;
      font-weight: bold;
      color: #1a1a1a;
    }

    .task-container {
      margin-bottom: 40px;
      border-bottom: 1px solid #eee;
      padding-bottom: 20px;
    }

    .task-title {
      font-weight: bold;
      font-size: 18px;
      text-align: center;
      margin-bottom: 10px;
    }

    /* –ú–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –∫–ª–∏–∫ –≤–º–µ—Å—Ç–æ drag */
    @media (max-width: 768px) {
      body {
        padding: 15px;
      }
      .oracle-text {
        font-size: 26px;
      }
      .drop-area, .word-pool {
        font-size: 20px;
      }
      .word-box {
        padding: 10px 12px;
        font-size: 16px;
      }
      .instructions, .task-container {
        padding: 12px;
      }
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ä–∞–∫—É–ª—å–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏</h2>

  <div class="instructions">
    <p><strong>–ù–∞ –ü–ö:</strong> –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.</p>
    <p><strong>–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:</strong> –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ø–µ—Ä–µ–≤–æ–¥. –ö–ª–∏–∫ –ø–æ —Å–ª–æ–≤—É –≤ –ø–æ–ª–µ ‚Äî —É–¥–∞–ª–∏—Ç –µ–≥–æ.</p>
  </div>

  <div class="task-container">
    <div class="task-title">1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å:</div>
    <div class="oracle-text">‰∏çÂÖ∂Èõ®</div>
    
    <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:</p>
    <div id="word-pool1" class="word-pool"></div>

    <p>–°–æ–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∑–¥–µ—Å—å:</p>
    <div id="drop-area1" class="drop-area">[–ø—É—Å—Ç–æ]</div>
  </div>

  <div class="task-container">
    <div class="task-title">2. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å:</div>
    <div class="oracle-text">Ë≤û‰∏çÈõ®</div>
    
    <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:</p>
    <div id="word-pool2" class="word-pool"></div>

    <p>–°–æ–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∑–¥–µ—Å—å:</p>
    <div id="drop-area2" class="drop-area">[–ø—É—Å—Ç–æ]</div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message" style="display: none;"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const expected1 = [
      ['–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è'],
      ['–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['–¥–æ–∂–¥—è', '–Ω–µ', '–±—É–¥–µ—Ç'],
      ['–¥–æ–∂–¥—å', '–Ω–µ', '–ø–æ–π–¥—ë—Ç'],
      ['–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—å'],
      ['–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è']
    ];
    
    const expected2 = [
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è'],
      ['–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–¥–æ–∂–¥—è', '–Ω–µ', '–±—É–¥–µ—Ç'],
      ['–≥–∞–¥–∞–ª–∏', '–¥–æ–∂–¥—å', '–Ω–µ', '–ø–æ–π–¥—ë—Ç'],
      ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–Ω–µ', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—å'],
      ['–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–¥–æ–∂–¥—è']
    ];

    const words1 = ['–Ω–µ', '–±—É–¥–µ—Ç', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è', '–¥–æ–∂–¥—å', '–≤–æ–∑–º–æ–∂–Ω–æ', '–º–æ–∂–µ—Ç', '–ª–∏', '–¥–æ–∂–¥–ª–∏–≤–æ'];
    const words2 = ['—Å–ø—Ä–∞—à–∏–≤–∞–ª–∏', '–≥–∞–¥–∞–ª–∏', '–Ω–µ', '–±—É–¥–µ—Ç', '–ø–æ–π–¥—ë—Ç', '–¥–æ–∂–¥—è', '–¥–æ–∂–¥—å', '–∑–∞–¥–∞–≤–∞–ª–∏', '–ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–ª–∏'];

    const wordPool1 = document.getElementById('word-pool1');
    const wordPool2 = document.getElementById('word-pool2');
    const dropArea1 = document.getElementById('drop-area1');
    const dropArea2 = document.getElementById('drop-area2');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    const isMobile = () => {
      return (
        navigator.maxTouchPoints > 1 ||
        /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
      );
    };

    // –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–æ
    function createWordBox(word, pool, dropArea, isMobileMode) {
      const box = document.createElement('div');
      box.className = 'word-box';
      box.textContent = word;

      if (isMobileMode) {
        box.style.cursor = 'pointer';
        box.onclick = () => {
          // –£–¥–∞–ª—è–µ–º –∏–∑ –ø—É–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∞
          box.remove();
          const clone = box.cloneNode(true);
          clone.onclick = () => {
            clone.remove();
            if (dropArea.children.length === 0) {
              const placeholder = document.createElement('span');
              placeholder.textContent = '[–ø—É—Å—Ç–æ]';
              placeholder.style.color = '#999';
              dropArea.appendChild(placeholder);
            }
          };
          // –£–±–∏—Ä–∞–µ–º placeholder
          if (dropArea.textContent.trim() === '[–ø—É—Å—Ç–æ]') {
            dropArea.innerHTML = '';
          }
          dropArea.appendChild(clone);
        };
      } else {
        box.draggable = true;
        box.addEventListener('dragstart', (e) => {
          e.dataTransfer.setData('text/plain', word);
          box.classList.add('dragging');
        });
        box.addEventListener('dragend', () => {
          box.classList.remove('dragging');
        });
      }

      pool.appendChild(box);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
      wordPool1.innerHTML = '';
      wordPool2.innerHTML = '';
      dropArea1.innerHTML = '<span style="color:#999">[–ø—É—Å—Ç–æ]</span>';
      dropArea2.innerHTML = '<span style="color:#999">[–ø—É—Å—Ç–æ]</span>';
      resultEl.style.display = 'none';

      const isMobileMode = isMobile();

      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
      const shuffled1 = [...words1].sort(() => Math.random() - 0.5);
      const shuffled2 = [...words2].sort(() => Math.random() - 0.5);

      shuffled1.forEach(word => {
        createWordBox(word, wordPool1, dropArea1, isMobileMode);
      });
      shuffled2.forEach(word => {
        createWordBox(word, wordPool2, dropArea2, isMobileMode);
      });

      // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö ‚Äî —É–±–∏—Ä–∞–µ–º dragover/leave/drop
      if (!isMobileMode) {
        setupDragDrop(dropArea1, wordPool1);
        setupDragDrop(dropArea2, wordPool2);
      }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag-and-drop (—Ç–æ–ª—å–∫–æ –¥–ª—è –ü–ö)
    function setupDragDrop(dropArea, pool) {
      dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.style.borderColor = '#e67e22';
      });

      dropArea.addEventListener('dragleave', () => {
        dropArea.style.borderColor = '#3498db';
      });

      dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.style.borderColor = '#3498db';

        const word = e.dataTransfer.getData('text/plain');
        const draggedBox = [...pool.children].find(b => b.textContent === word && b.draggable);

        if (draggedBox) {
          const clone = draggedBox.cloneNode(true);
          clone.draggable = false;
          clone.style.cursor = 'default';
          draggedBox.remove();
          // –£–±–∏—Ä–∞–µ–º placeholder
          if (dropArea.textContent.trim() === '[–ø—É—Å—Ç–æ]') {
            dropArea.innerHTML = '';
          }
          dropArea.appendChild(clone);
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    checkBtn.addEventListener('click', () => {
      const current1 = Array.from(dropArea1.children)
        .filter(el => !el.textContent.includes('[–ø—É—Å—Ç–æ]'))
        .map(el => el.textContent.trim());
      const current2 = Array.from(dropArea2.children)
        .filter(el => !el.textContent.includes('[–ø—É—Å—Ç–æ]'))
        .map(el => el.textContent.trim());

      const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
      const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

      if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `‚úÖ <strong>–í–µ—Ä–Ω–æ!</strong> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ –æ–±–µ –Ω–∞–¥–ø–∏—Å–∏.<br>
          <em>‰∏çÂÖ∂Èõ®</em> = ¬´${current1.join(' ')}¬ª<br>
          <em>Ë≤û ‰∏çÈõ®</em> = ¬´${current2.join(' ')}¬ª`;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
      } else {
        let message = '‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
        if (!isCorrect1 && isCorrect2) {
          message = '‚ùå –ü–µ—Ä–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω. –í—Ç–æ—Ä–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.';
        } else if (isCorrect1 && !isCorrect2) {
          message = '‚ùå –í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω. –ü–µ—Ä–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.';
        }
        resultEl.textContent = message;
        resultEl.className = 'message';
        resultEl.style.display = 'block';
        sendResult(false, '–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ');
      }
    });

    // –°–±—Ä–æ—Å
    resetBtn.addEventListener('click', init);

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–±—Ä–∞–Ω –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–ª–æ–≤")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª: –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖÅ?</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 800px;
      margin: 0 auto;
      line-height: 1.6;
    }
    h2 {
      color: #2c3e50;
      text-align: center;
      margin-bottom: 20px;
    }
    .oracle-text {
      font-size: 24px;
      text-align: center;
      margin: 20px 0;
      font-weight: bold;
      letter-spacing: 1px;
    }
    .options {
      margin: 20px 0;
      display: flex;
      flex-direction: column;
    }
    .option {
      margin: 8px 0;
      padding: 12px;
      background: #f8f9fa;
      border: 1px solid #ddd;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s;
    }
    .option:hover {
      background: #eef7ff;
      border-color: #3498db;
    }
    .option.selected {
      background: #d4edff;
      border-color: #3498db;
      box-shadow: 0 0 0 2px #b3d7ff;
    }
    .option input {
      margin-right: 10px;
    }
    button {
      padding: 12px 20px;
      font-size: 16px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin: 20px auto;
      display: block;
      transition: background 0.2s;
    }
    button:hover {
      background: #2980b9;
    }
    #result {
      margin-top: 20px;
      padding: 15px;
      border-radius: 5px;
      text-align: center;
      font-weight: bold;
    }
    .success {
      background: #e8f5e9;
      color: #27ae60;
    }
    .error {
      background: #ffebee;
      color: #e74c3c;
    }
  </style>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖÅ?</h2>

  <div class="oracle-text">Áô∏‰∏ëÂÖÅÂÖ∂Èõ®</div>
<div class="pinyin-container">
  <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded')">
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å ‚ñº
  </button>
  <div class="pinyin-text">
    gu«ê ch«íu y«în q√≠ y«î
  </div>
</div>

<style>
  .pinyin-container {
    margin: 15px 0;
    border: 1px solid #eee;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .pinyin-toggle {
    background: #f5f5f5;
    border: none;
    padding: 8px 15px;
    width: 100%;
    text-align: left;
    cursor: pointer;
    font-size: 14px;
    color: #555;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .pinyin-toggle:hover {
    background: #eef7ff;
  }
  
  .pinyin-toggle::after {
    content: '‚ñº';
    font-size: 12px;
    transition: transform 0.2s;
  }
  
  .pinyin-text {
    padding: 0 15px;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
    background: #fafafa;
    font-style: italic;
    color: #666;
    font-size: 15px;
  }
  
  .pinyin-text.expanded {
    padding: 12px 15px;
    max-height: 100px;
  }
  
  .pinyin-toggle.expanded::after {
    transform: rotate(180deg);
  }
</style>
  <div class="options" id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    const options = [
      { value: "correct", text: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—à—ë–ª –¥–æ–∂–¥—å", correct: true },
      { value: "rain", text: "–ë—É–¥–µ—Ç –¥–æ–∂–¥—å", correct: false },
      { value: "no-rain", text: "–ù–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { value: "said", text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª", correct: false }
    ];

    let selectedValue = null;

    // –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
          label.classList.add('selected');
        };

        const text = document.createTextNode(option.text);
        label.appendChild(input);
        label.appendChild(text);
        container.appendChild(label);
      });
    }

    function check() {
      if (!selectedValue) {
        document.getElementById("result").textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.";
        document.getElementById("result").className = "error";
        return;
      }

      const isCorrect = selectedValue === "correct";

      const resultEl = document.getElementById("result");
      if (isCorrect) {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ÂÖÅ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ—à—ë–ª –¥–æ–∂–¥—å¬ª.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. ÂÖÅ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ¬ª, ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ¬ª ‚Äî —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.";
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage(
        {
          type: "TASK_RESULT",
          success,
          message: message || (success ? "–í–µ—Ä–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ ÂÖÅ" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖÅ")
        },
        "*"
      );
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;

    // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 900px;
      margin: 0 auto;
    }
    h2, p {
      text-align: center;
    }
    .match-container {
      display: flex;
      justify-content: space-around;
      gap: 30px;
      margin-top: 30px;
    }
    .column {
      width: 45%;
    }
    .column h3 {
      text-align: center;
      margin-bottom: 15px;
      color: #333;
    }
    .word-item, .def-item {
      padding: 12px 16px;
      margin: 8px 0;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s;
      text-align: center;
      font-size: 18px;
      font-weight: bold;
    }
    .word-item:hover, .def-item:hover {
      background: #eef5ff;
      border-color: #66aaff;
    }
    .word-item.selected {
      background: #bbdefb;
      border-color: #1976d2;
      transform: scale(1.05);
    }
    .def-item.selected {
      background: #c8e6c9;
      border-color: #43a047;
      transform: scale(1.05);
    }
    .matched {
      background: #d4edda;
      border: 2px solid #28a745 !important;
      color: #155724;
      opacity: 0.9;
      cursor: default;
      font-weight: bold;
    }
    button {
      display: block;
      margin: 20px auto;
      padding: 10px 20px;
      font-size: 16px;
    }
    #result {
      text-align: center;
      margin-top: 20px;
      font-weight: bold;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∑–Ω–∞—á–µ–Ω–∏—è -->
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –ü—è—Ç—å –ø–∞—Ä –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const pairs = [
      { char: "Â£¨", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (9-–π);" },
      { char: "ÂÖ∂", meaning: "–°–ª—É–∂–µ–±–Ω–æ–µ –Ω–∞—Ä–µ—á–∏–µ; —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –±—É–¥—É—â–µ–µ/–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: ¬´–±—É–¥–µ—Ç –ª–∏?¬ª" },
      { char: "Â∑±", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (6-–π);" },
      { char: "Âçú", meaning: "–ì–∞–¥–∞—Ç—å/–ì–∞–¥–∞—Ç–µ–ª—å" },
      { char: "ÂÖÅ", meaning: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ; –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç: ¬´–∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–æ—à—ë–ª –¥–æ–∂–¥—å¬ª" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, –∏ –∑–Ω–∞—á–µ–Ω–∏—è
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∏–µ—Ä–æ–≥–ª–∏—Ñ—ã)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∑–Ω–∞—á–µ–Ω–∏—è)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;

      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;

      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–∞—Ä—É
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–∞—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ!" : "–ï—Å—Ç—å –æ—à–∏–±–∫–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –∏–µ—Ä–æ–≥–ª–∏—Ñ ‚Üî –∑–Ω–∞—á–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 900px;
      margin: 0 auto;
    }
    h2, p {
      text-align: center;
    }
    .match-container {
      display: flex;
      justify-content: space-around;
      gap: 30px;
      margin-top: 30px;
    }
    .column {
      width: 45%;
    }
    .column h3 {
      text-align: center;
      margin-bottom: 15px;
      color: #333;
    }
    .word-item, .def-item {
      padding: 12px 16px;
      margin: 8px 0;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s;
      text-align: center;
      font-size: 18px;
      font-weight: bold;
    }
    .word-item:hover, .def-item:hover {
      background: #eef5ff;
      border-color: #66aaff;
    }
    .word-item.selected {
      background: #bbdefb;
      border-color: #1976d2;
      transform: scale(1.05);
    }
    .def-item.selected {
      background: #c8e6c9;
      border-color: #43a047;
      transform: scale(1.05);
    }
    .matched {
      background: #d4edda;
      border: 2px solid #28a745 !important;
      color: #155724;
      opacity: 0.9;
      cursor: default;
      font-weight: bold;
    }
    button {
      display: block;
      margin: 20px auto;
      padding: 10px 20px;
      font-size: 16px;
    }
    #result {
      text-align: center;
      margin-top: 20px;
      font-weight: bold;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã -->
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∑–Ω–∞—á–µ–Ω–∏—è -->
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –ü—è—Ç—å –ø–∞—Ä –∏–∑ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
const pairs = [
  { char: "‰∏ç", meaning: "–ù–µ; –ö–∞–∫ –≤ ¬´–Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è¬ª" },
  { char: "Áéã", meaning: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å / –¶–∞—Ä—å" },
  { char: "‰∏ô", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (3-–π)" },
  { char: "Âç†", meaning: "–ò—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ / –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ" },
  { char: "Êõ∞", meaning: "–ì–æ–≤–æ—Ä–∏—Ç—å; –≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, –∏ –∑–Ω–∞—á–µ–Ω–∏—è
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∏–µ—Ä–æ–≥–ª–∏—Ñ—ã)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∑–Ω–∞—á–µ–Ω–∏—è)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;

      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;

      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–∞—Ä—É
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          document.getElementById("result").textContent = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–∞—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –≤–µ—Ä–Ω–æ.";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);

        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      init();
    }

    function sendResult(success, message = "") {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ!" : "–ï—Å—Ç—å –æ—à–∏–±–∫–∏")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

