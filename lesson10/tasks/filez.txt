=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ ¬´ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª —É—Ç–æ—á–Ω—è–µ—Ç —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Å–µ–π—á–∞—Å, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
          ‚Ä¢ <strong>ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br>
          –ó–¥–µ—Å—å <strong>ÂÖ∂</strong> ‚Äî <em>–º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤</em>, –∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –£—Ä–æ–∫–∞ 10.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´–Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª –∏ ¬´–µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 10: –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 10 —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú¬ª ‚Äî –≤–µ—Ä–Ω–æ: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ ¬´ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª —É—Ç–æ—á–Ω—è–µ—Ç —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é ¬´‰∏çÂòâ¬ª", 
      correct: true 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ‚Äû–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ‚Äú¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´‰∏çÂêâ¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª, –∞ –Ω–µ ¬´—Ö–æ—Ä–æ—à–æ¬ª", 
      correct: false 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ‚Äû–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?‚Äú¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Âç†Êõ∞¬ª –≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å (–æ—Ç–≤–µ—Ç), –∞ –Ω–µ –≤–æ–ø—Ä–æ—Å", 
      correct: false 
    },
    { 
      text: "¬´–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Å–µ–π—á–∞—Å, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Ä–µ—á—å –∏–¥—ë—Ç –æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ –≥–∞–¥–∞–Ω–∏—è, –∞ –Ω–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è¬ª, 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –£—Ä–æ–∫–∞ 10, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ <strong>—Å–ª–æ–∂–Ω—É—é —É—Å–ª–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É</strong>:<br>
        ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
        ‚Ä¢ <strong>ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br><br>
        –ó–¥–µ—Å—å <strong>ÂÖ∂</strong> ‚Äî <em>–º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤</em>, –∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –í—Å—è —Ñ—Ä–∞–∑–∞ ‚Äî –ø—Ä–∏–º–µ—Ä —Å–ª–æ–∂–Ω–æ–≥–æ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –±–µ–∑ —Å–æ—é–∑–æ–≤, –≥–¥–µ —Å–≤—è–∑—å –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ —Å–º—ã—Å–ª—É.<br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´Âç†Êõ∞¬ª –≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å, –∞ ¬´ÂÖ∂¬ª –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–≤–∞—è —É—Å–ª–æ–≤–Ω—É—é —Å–≤—è–∑—å.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>Ëã•Ëå≤‰πÉÊ≠ª</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>ÊúâÁ•üÂÖ∂Êúâ‰æÜËâ±</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>‰πÉËå≤‰∫¶ÊúâÁ•ü</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª</label>
            <label><input type="radio" name="q1" value="–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç">–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">Ëã•Ëå≤‰πÉÊ≠ª</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">ru√≤ zƒ´, n«éi s«ê</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç">–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç</label>
            <label><input type="radio" name="q2" value="–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç">–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç</label>
            <label><input type="radio" name="q2" value="–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–æ –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ —Å—á–∞—Å—Ç—å—é">–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–æ –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ —Å—á–∞—Å—Ç—å—é</label>
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ö –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ö –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÊúâÁ•üÂÖ∂Êúâ‰æÜËâ±</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">y«íu su√¨ q√≠ y«íu l√°i jiƒÅn</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏">–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</label>
            <label><input type="radio" name="q3" value="–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏">–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</label>
            <label><input type="radio" name="q3" value="–ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–¥, —Ç–æ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏">–ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–¥, —Ç–æ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</label>
            <label><input type="radio" name="q3" value="–ù–µ—Ç –≤—Ä–µ–¥–∞, –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–∏–¥—É—Ç">–ù–µ—Ç –≤—Ä–µ–¥–∞, –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–∏–¥—É—Ç</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰πÉËå≤‰∫¶ÊúâÁ•ü</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">n«éi zƒ´ y√¨ y«íu su√¨</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–ò –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ç–æ–∂–µ –µ—Å—Ç—å –≤—Ä–µ–¥">–ò –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ç–æ–∂–µ –µ—Å—Ç—å –≤—Ä–µ–¥</label>
            <label><input type="radio" name="q4" value="–ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–¥, —Ç–æ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏">–ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–¥, —Ç–æ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏</label>
            <label><input type="radio" name="q4" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª</label>
            <label><input type="radio" name="q4" value="–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç">–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª",
        q2: "–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç",
        q3: "–ï—Å—Ç—å –≤—Ä–µ–¥, –∏ –ø—Ä–∏–¥—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏",
        q4: "–ò –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ç–æ–∂–µ –µ—Å—Ç—å –≤—Ä–µ–¥"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 10:<br>
                ‚Ä¢ <strong>Âç†Êõ∞</strong> ‚Äî –≤–≤–æ–¥ –ø—Ä—è–º–æ–π —Ä–µ—á–∏ –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è<br>
                ‚Ä¢ <strong>ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ<br>
                ‚Ä¢ <strong>Ëã•Ëå≤‰πÉÊ≠ª</strong> ‚Äî ¬´–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ —É–º—Ä—ë—Ç¬ª (—É—Å–ª–æ–≤–∏–µ + —Å–ª–µ–¥—Å—Ç–≤–∏–µ)<br>
                ‚Ä¢ <strong>‰πÉ</strong> ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è<br>
                ‚Ä¢ <strong>ÊúâÁ•ü</strong> ‚Äî ¬´–µ—Å—Ç—å –≤—Ä–µ–¥¬ª ‚Äî –∫–ª—é—á–µ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 10</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 10</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ó–∞–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤–æ–π —Ç–µ–º–µ –£—Ä–æ–∫–∞ 10: <strong>—Å–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∏–ª–∏ —É—Å–ª–æ–≤–∏–µ!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ</div>
    <div class="oracle-text">ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Âç†Êõ∞</strong> –≤–≤–æ–¥–∏—Ç –ø—Ä—è–º—É—é —Ä–µ—á—å. <strong>ÂÖ∂Âòâ</strong> ‚Äî —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ: ¬´–µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. Ëã•Ëå≤‰πÉÊ≠ª</div>
    <div class="oracle-text">Ëã•Ëå≤‰πÉÊ≠ª</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Ëã•</strong> = ¬´–µ—Å–ª–∏¬ª, <strong>‰πÉ</strong> = ¬´—Ç–æ–≥–¥–∞, –∏ —Ç–æ–≥–¥–∞¬ª ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—Å—Ç–≤–∏–µ</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–µ–ª: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª']
];

const expected2 = [
    ['–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç'],
    ['–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ–≥–¥–∞ –æ–Ω–∞ —É–º—Ä—ë—Ç'],
    ['–ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ –æ–Ω–∞ —É–º—Ä—ë—Ç']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å', '–ø—Ä–æ—á–∏—Ç–∞–ª', '–æ—Ç–≤–µ—Ç', '–ù–µ', '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ', '–ê', '–µ—Å–ª–∏', '–∏', '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ', '—Ç–æ', '–∫', '–Ω–µ—Å—á–∞—Å—Ç—å—é', '—É—Ä–æ–∂–∞–π', '–¥–æ–∂–¥—å', '–∏', '—Å–æ–ª–Ω—Ü–µ', '–æ–Ω–∏', '–º–æ–ª–∏–ª–∏—Å—å', '–≤', '—Ö—Ä–∞–º'];
const words2 = ['–ï—Å–ª–∏', '–±—É–¥–µ—Ç', '—Ç–∞–∫', '—Ç–æ', '–æ–Ω–∞', '—É–º—Ä—ë—Ç', '–º—ã', '–ø—Ä–∏—à–ª–∏', '–Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫', '—Ü–∞—Ä—å', '–æ—Ç–ø—Ä–∞–≤–∏–ª', '–≤–µ—Å—Ç–Ω–∏–∫–∞', '–≤—á–µ—Ä–∞', '–ø—Ä–∏–∫–∞–∑–∞–ª', '–æ—Ö–æ—Ç–∏—Ç—å—Å—è', '–≤', '–≥–æ—Ä–∞—Ö'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option.split(' ')));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option.split(' ')));

    if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é —Ç–µ–º—É –£—Ä–æ–∫–∞ 10:<br>
            ‚Ä¢ <strong>–°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
            &nbsp;&nbsp;–ß–∞—Å—Ç–∏ —Å–≤—è–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —Å–º—ã—Å–ª—É, –±–µ–∑ —Å–æ—é–∑–æ–≤.<br>
            ‚Ä¢ <em>ÂÖ∂ÂòâÔºå‰∏çÂêâ</em> ‚Äî —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ<br>
            ‚Ä¢ <em>Ëã•Ëå≤‰πÉÊ≠ª</em> ‚Äî ¬´–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫, —Ç–æ —É–º—Ä—ë—Ç¬ª<br>
            ‚Ä¢ <em>Âç†Êõ∞</em> ‚Äî –≤–≤–æ–¥ –ø—Ä—è–º–æ–π —Ä–µ—á–∏ –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:';
        if (!isCorrect1) message += '<br>‚Ä¢ ¬´ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∞ —É—Å–ª–æ–≤–Ω–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –∫ ¬´‰∏çÂòâ¬ª';
        if (!isCorrect2) message += '<br>‚Ä¢ ¬´‰πÉ¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—Å—Ç–≤–∏–µ: ¬´—Ç–æ–≥–¥–∞¬ª, ¬´–∏ —Ç–æ–≥–¥–∞¬ª';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: –£—Ä–æ–∫ 10</title>
</head>
<body>

<h2>–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: –°–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ vs –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö, —É—Å–ª–æ–≤–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂÖ∂ (q√≠)</strong>. –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ –£—Ä–æ–∫–∞ 10.</p>

        <p>üü¢ <strong>–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</strong> ‚Äî –≤—ã—Ä–∞–∂–∞–µ—Ç –ø—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑:</p>
        <ul>
            <li>ÊúâÁ•ü y«íu su√¨ ‚Äî ¬´–µ—Å—Ç—å –∑–Ω–∞–º–µ–Ω–∏–µ¬ª</li>
            <li>‰∫°Á¶ç w√°ng hu√≤ ‚Äî ¬´–Ω–µ—Ç –±–µ–¥—ã¬ª</li>
            <li>–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å–ª–æ–≤–∏–π, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –∏–ª–∏ —Å–æ–º–Ω–µ–Ω–∏–π.</li>
        </ul>

        <p>üî¥ <strong>–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞</strong> ‚Äî –≤—ã—Ä–∞–∂–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ, —É—Å–ª–æ–≤–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –ø–æ–º–æ—â—å—é —á–∞—Å—Ç–∏—Ü—ã <strong>ÂÖ∂ (q√≠)</strong>:</p>
        <ul>
            <li>ÂÖ∂Êúâ‰æÜËâ±ÔºåÂÖ∂‰∫°‰æÜËâ± q√≠ y«íu l√°i jiƒÅn, q√≠ w√°ng l√°i jiƒÅn ‚Äî ¬´[–ï—Å–ª–∏] –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã, [–µ—Å–ª–∏] –Ω–µ –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã¬ª</li>
            <li>‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠ ‚Äî ¬´–ù–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. [–ê –µ—Å–ª–∏ –∏] –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª</li>
            <li>–ß–∞—Å—Ç–∏—Ü–∞ <strong>ÂÖ∂</strong> –≤–≤–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –∏–ª–∏ —É—Å–ª–æ–≤–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.</li>
            <li>–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞.</li>
            <li>–ù–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ ¬´–µ—Å–ª–∏¬ª, ¬´–∞ –µ—Å–ª–∏¬ª, ¬´—Ç–æ... —Ç–æ¬ª.</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "Êó¨‰∫°Á¶ç" ‚Üí üü¢ (–ø—Ä–æ—Å—Ç–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)<br>
        "ÂÖ∂Êúâ‰æÜËâ±ÔºåÂÖ∂‰∫°‰æÜËâ±" ‚Üí üî¥ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å <strong>ÂÖ∂</strong> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
        <ol>
            <li>–î–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è <strong>—É—Å–ª–æ–≤–Ω–æ—Å—Ç–∏</strong> –∏ <strong>–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã</strong> –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö.</li>
            <li>–° —á–∞—Å—Ç–∏—Ü–µ–π <strong>ÂÖ∂ (q√≠)</strong>, –∫–æ—Ç–æ—Ä–∞—è –≤–≤–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é.</li>
            <li>–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å <strong>–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å</strong> –æ–¥–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ (¬´–µ—Å–ª–∏... —Ç–æ¬ª).</li>
            <li>–í –æ—Ç–≤–µ—Ç–∞—Ö –ø—Ä–∞–≤–∏—Ç–µ–ª—è (<strong>ÁéãÂç†Êõ∞</strong>) –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.</li>
        </ol>
        –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –£—Ä–æ–∫–∞ 10.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Êó¨‰∫°Á¶ç", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–ó–∞ –¥–µ—Å—è—Ç–∏–¥–Ω–µ–≤–∫—É –Ω–µ –±—É–¥–µ—Ç –±–µ–¥—ã¬ª ‚Äî –ø—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" },
    { text: "ÂÖ∂Êúâ‰æÜËâ±ÔºåÂÖ∂‰∫°‰æÜËâ±", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´[–ï—Å–ª–∏] –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã, [–µ—Å–ª–∏] –Ω–µ –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã¬ª ‚Äî —á–∞—Å—Ç–∏—Ü–∞ ÂÖ∂ –≤–≤–æ–¥–∏—Ç –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏" },
    { text: "ÊúâÁ•ü", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–ï—Å—Ç—å –∑–Ω–∞–º–µ–Ω–∏–µ¬ª ‚Äî –ø—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ —É—Å–ª–æ–≤–∏–π" },
    { text: "ÂÖ∂Êúâ‰æÜËâ±", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´[–ï—Å–ª–∏] –ø—Ä–∏–¥—É—Ç –±–µ–¥—ã¬ª ‚Äî –≤–≤–µ–¥–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é ÂÖ∂" },
    { text: "ÁéãÂç†Êõ∞ÊúâÁ•ü", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–µ–ª –æ—Ç–≤–µ—Ç: –µ—Å—Ç—å –∑–Ω–∞–º–µ–Ω–∏–µ¬ª ‚Äî –ø—Ä—è–º–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" },
    { text: "ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–µ–ª –æ—Ç–≤–µ—Ç: –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. [–ê –µ—Å–ª–∏ –∏] –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–æ–≤" },
    { text: "ÂÖÅÊúâ‰æÜËâ±", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∏ –±–µ–¥—ã¬ª ‚Äî –∫–æ–Ω—Å—Ç–∞—Ç–∞—Ü–∏—è —Ñ–∞–∫—Ç–∞" },
    { text: "ÂÖ∂ÊúâË®≠Ôºå‰∏çÂêâÔºåÂÖ∂ÂîØÁî≤ÊúâË®≠ÔºåÂêâ", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´[–ï—Å–ª–∏] –±—É–¥–µ—Ç –∑–Ω–∞–º–µ–Ω–∏–µ, –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é; [–µ—Å–ª–∏] –∑–Ω–∞–º–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ –¥–µ–Ω—å —Ü–∑—è, –∫ —Å—á–∞—Å—Ç—å—é¬ª ‚Äî —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º" },
    { text: "ÂúüÊñπÂæÅ‰∫éÊàëÊù±ÈÑô", type: "direct", explanation: "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ¬´–ü–ª–µ–º—è –¢—É –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ –Ω–∞—à—É –≤–æ—Å—Ç–æ—á–Ω—É—é –æ–∫—Ä–∞–∏–Ω—É¬ª ‚Äî –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" },
    { text: "ÂÖ∂ÂîØËæõÊúâË®≠Ôºå‰∫¶‰∏çÂêâ", type: "chain", explanation: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ¬´[–ï—Å–ª–∏] –∑–Ω–∞–º–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ –¥–µ–Ω—å —Å–∏–Ω—å, [—Ç–æ] —Ç–∞–∫–∂–µ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª ‚Äî –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">–ü—Ä–æ—Å—Ç–æ–µ</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "chain") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: —á–∞—Å—Ç–∏—Ü–∞ ÂÖ∂ ‚Äî –∫–ª—é—á–µ–≤–æ–π –º–∞—Ä–∫–µ—Ä —É—Å–ª–æ–≤–Ω—ã—Ö –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs4;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
const pairs1 = [
  { char: "ËøÑ", meaning: "—Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –≤–ø–ª–æ—Ç—å –¥–æ" },
  { char: "Ëá£", meaning: "–ø–æ–¥–¥–∞–Ω–Ω—ã–π" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Ëªä", meaning: "–∫–æ–ª–µ—Å–Ω–∏—Ü–∞, –ø–æ–≤–æ–∑–∫–∞" },
  { char: "‰∫¶", meaning: "—Å–ª—É–∂. –Ω–∞—Ä–µ—á–∏–µ —Ç–∞–∫–∂–µ" }
];

const pairs2 = [
  { char: "‰æµ", meaning: "–≤—Ç–æ—Ä–≥–∞—Ç—å—Å—è" },
  { char: "Áî∞", meaning: "–ø–æ–ª–µ" },
  { char: "Âõõ", meaning: "—á–µ—Ç—ã—Ä–µ" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "‰øò", meaning: "–±—Ä–∞—Ç—å –≤ –ø–ª–µ–Ω" }
];

const pairs3 = [
  { char: "ÂçÅ", meaning: "–¥–µ—Å—è—Ç—å" },
  { char: "Ëã•", meaning: "–±—ã—Ç—å –ø–æ–¥–æ–±–Ω—ã–º; —Å–ª—É–∂. –µ—Å–ª–∏" },
  { char: "ÂæÄ", meaning: "–∏–¥—Ç–∏ —Ç—É–¥–∞, —É—Ö–æ–¥–∏—Ç—å" },
  { char: "Â®©", meaning: "—Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –æ—Ç –±—Ä–µ–º–µ–Ω–∏" },
  { char: "Âòâ", meaning: "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π, —Å—á–∞—Å—Ç–ª–∏–≤—ã–π, —Ö–æ—Ä–æ—à–∏–π" }
];

const pairs4 = [
  { char: "Ê≠ª", meaning: "—É–º–∏—Ä–∞—Ç—å" },
  { char: "ÂÅÅ", meaning: "—Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "È¶≠", meaning: "—É–ø—Ä–∞–≤–ª—è—Ç—å (–ª–æ—à–∞–¥—å–º–∏)" },
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" }
];

const pairs5 = [
  { char: "Â§Æ", meaning: "—Å–æ–±—Å—Ç–≤. –Ø–Ω" },
  { char: "Êòî", meaning: "–≤—á–µ—Ä–∞; –≤ –ø—Ä–æ—à–ª–æ–º" },
  { char: "ÈÑô", meaning: "–æ–∫—Ä–∞–∏–Ω–∞; –≥—Ä—É–±—ã–π" },
  { char: "Â¢ú", meaning: "–ø–∞–¥–∞—Ç—å, —Å–≤–∞–ª–∏–≤–∞—Ç—å—Å—è" },
  { char: "Á°™", meaning: "—Å–æ–±—Å—Ç–≤. –í–æ" }
];


pairs = pairs5;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ—Å—Ç–∏: ‚Äû–ù–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. –ê –µ—Å–ª–∏ –∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âç†Êõ∞ ‚Äî –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç (–≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –∞–∫—Ç, "–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª")</li>
      <li>‰∏çÂòâ ‚Äî –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è / –Ω–µ –±—É–¥–µ—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>ÂÖ∂Âòâ ‚Äî –µ—Å–ª–∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è</li>
      <li>‰∏çÂêâ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é</li>
      <li>Ëã• ‚Äî –µ—Å–ª–∏, –≤ —Å–ª—É—á–∞–µ</li>
      <li>‰πÉ ‚Äî —Ç–æ–≥–¥–∞, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âòâ', '‰∏ç', 'Âêâ'];
    const allChars = [
      'Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âêâ', '‰πÉ',
      'Áô∏', 'Â∑≥', 'Âçú', '„±ø', 'Ë¥û', 'Êó¨', '‰∫°', 'Á•∏', 'Êúâ', 'Êù•', 'Ëâ∞', 'ËøÑ', 'Ëá≥', '‰∫î', 'Êó•', '‰∏Å', 'ÈÖâ', 'ÂÖÅ', 'Ëá™', 'Ë•ø', 'Ê¥ó', 'Èúá', 'Âëä', 'Âúü', 'Êñπ', 'ÂæÅ', '‰∫é', 'Êàë', '‰∏ú', 'ÈÑô', 'ÁÉñ', '‰∫å', 'ÈÇë', 'Â∑•', '‰∫¶', '‰æµ', 'Áî∞', 'Âõõ', 'Â∫ö', 'Áî≥', 'Âåó', 'Â≠ê', 'ÂïÜ', 'Êòî', 'Áî≤', 'Ëæ∞', '‰øò', '‰∫∫', 'ÂçÅ', 'Êúâ', 'ÂÖ≠', 'Êàä', 'Âçà', 'ÂæÄ', 'ÈÄê', 'ÂÖï', 'Â∞è', 'Ëá£', 'Âè∂', 'ËΩ¶', 'È©¨', 'Á°™', 'È©≠', 'Â§Æ', 'Âù†', 'Â¶á', 'Â•Ω', 'Â®©', 'Ê≠ª', 'Âêé'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs2

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs3

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs5

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
const pairs1 = [
  { char: "ËøÑ", pinyin: "q√¨" },
  { char: "Ëá£", pinyin: "ch√©n" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Ëªä", pinyin: "j≈´" }, // –æ—Å–Ω–æ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
  { char: "‰∫¶", pinyin: "y√¨" }
];

const pairs2 = [
  { char: "‰æµ", pinyin: "qƒ´n" },
  { char: "Áî∞", pinyin: "ti√°n" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "Êòî", pinyin: "xƒ´" },
  { char: "‰øò", pinyin: "f√∫" }
];

const pairs3 = [
  { char: "ÂçÅ", pinyin: "sh√≠" },
  { char: "Ëã•", pinyin: "ru√≤" },
  { char: "ÂæÄ", pinyin: "w«éng" },
  { char: "Â®©", pinyin: "mi«én" },
  { char: "Âòâ", pinyin: "jiƒÅ" }
];

const pairs4 = [
  { char: "Ê≠ª", pinyin: "s«ê" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "È¶≠", pinyin: "y√π" },
  { char: "Â§Æ", pinyin: "yƒÅng" },
  { char: "Â¢ú", pinyin: "zhu√¨" }
];

const pairs5 = [
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "ÂÅÅ", pinyin: "chƒìng" },
  { char: "Âõõ", pinyin: "s√¨" },
  { char: "ÈÑô", pinyin: "b«ê" },
  { char: "Á°™", pinyin: "w√≤" }
];


pairs = pairs4

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. –ê –µ—Å–ª–∏ –∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âç†Êõ∞ ‚Äî (–≥–∞–¥–∞—Ç–µ–ª—å) —Å–∫–∞–∑–∞–ª, –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç</li>
      <li>‰∏çÂòâ ‚Äî –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è</li>
      <li>ÂÖ∂Âòâ ‚Äî –µ—Å–ª–∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è</li>
      <li>‰∏çÂêâ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é</li>
      <li>Ëã• ‚Äî –µ—Å–ª–∏</li>
      <li>Ôºå ‚Äî (–∑–∞–ø—è—Ç–∞—è, –ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ
    // –ü–µ—Ä–µ–≤–æ–¥: –ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: "–ù–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è. –ï—Å–ª–∏ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é"
    const expected = ['Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âòâ', '‰∏ç', 'Âêâ'];

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ ‚Äî –∏–∑ –£—Ä–æ–∫–∞ 10 –∏ –±–∞–∑–æ–≤–æ–π –ª–µ–∫—Å–∏–∫–∏
    const allChars = [
      'Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âêâ', '‰πÉ', 'Ëå≤', 'Êúâ', 'Á•ü',
      'Êù•', 'Ëâ∞', 'ËøÑ', 'Ëá≥', '‰∫î', 'Êó•', '‰∏Å', 'ÈÖâ', 'ÂÖÅ', 'Ëá™', 'Ë•ø', 'Ê¥ó',
      'Èúá', 'Âëä', 'Âúü', 'Êñπ', 'ÂæÅ', '‰∫é', 'Êàë', '‰∏ú', 'ÈÑô', 'ÁÉñ', '‰∫å', 'ÈÇë',
      '‰∫¶', '‰æµ', 'Áî∞', 'Âõõ', 'Â∫ö', 'Áî≥', 'Âåó', 'Â≠ê', 'ÂïÜ', 'Êòî', 'Áî≤', 'Ëæ∞',
      '‰øò', '‰∫∫', 'ÂçÅ', 'Êúâ', 'ÂÖ≠', 'Êàä', 'Âçà', 'ÂæÄ', 'ÈÄê', 'ÂÖï', 'Â∞è', 'Ëá£',
      'Âè∂', 'Ëªä', 'È¶¨', 'Á°™', 'È¶≠', 'Â§Æ', 'Âù†', 'Â¶á', 'Â•Ω', 'Â®©', 'Ê≠ª', 'ÂÅÅ',
      'Èõ®', 'Ë¥û', 'Âçú', 'Áô∏', 'Â∑≥', 'ÂÖÅ', '‰∫°', 'Á•∏', '‰ªä', 'Êó¨', 'Âêé', 'Ëá≥'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âç†Êõ∞ ‚Äî (–≥–∞–¥–∞—Ç–µ–ª—å) —Å–∫–∞–∑–∞–ª, –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç</li>
      <li>‰∏çÂòâ ‚Äî –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>ÂÖ∂Âòâ ‚Äî –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>‰∏çÂêâ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é</li>
      <li>Ëã• ‚Äî –µ—Å–ª–∏</li>
      <li>Ôºå ‚Äî (–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞, –∑–∞–ø—è—Ç–∞—è)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ
    // –ü–µ—Ä–µ–≤–æ–¥: –ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: "–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é"
    const expected = ['Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âòâ', '‰∏ç', 'Âêâ'];

    // –í—Å–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏–∑ –£—Ä–æ–∫–∞ 10 –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤ (–¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
    const allChars = [
      'Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âêâ', 'Êúâ', 'Á•ü', '‰æÜ', 'Ëâ±', 'ËøÑ', 'Ëá≥',
      '‰∫î', 'Êó•', '‰∏Å', 'ÈÖâ', 'ÂÖÅ', 'Ëá™', 'Ë•ø', 'Ê¥ó', 'Èúá', 'Âëä', 'Âúü', 'Êñπ', 'ÂæÅ',
      '‰∫é', 'Êàë', 'Êù±', 'ÈÑô', 'ÁÉñ', '‰∫å', 'ÈÇë', '‰∫¶', '‰æµ', 'Áî∞', 'Âõõ', 'Â∫ö', 'Áî≥',
      'Âåó', 'Â≠ê', 'ÂïÜ', 'Êòî', 'Áî≤', 'Ëæ∞', '‰øò', '‰∫∫', 'ÂçÅ', 'Âèà', 'ÂÖ≠', 'Êàä', 'Âçà',
      'ÂæÄ', 'ÈÄê', 'ÂÖï', 'Â∞è', 'Ëá£', 'Âè∂', 'Ëªä', 'È¶¨', 'Á°™', 'È¶≠', 'Â§Æ', 'Â¢ú', 'Â©¶',
      'Â•Ω', 'Â®©', 'Ê≠ª', '‰πÉ', 'ÂÖπ', 'ÂÅÅ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é‚Äú.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>Âç†Êõ∞ ‚Äî (–≥–∞–¥–∞—Ç–µ–ª—å) —Å–∫–∞–∑–∞–ª, –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç</li>
      <li>‰∏çÂòâ ‚Äî –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>ÂÖ∂Âòâ ‚Äî –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ</li>
      <li>‰∏çÂêâ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é</li>
      <li>Ëã• ‚Äî –µ—Å–ª–∏</li>
      <li>‰πÉ ‚Äî —Ç–æ–≥–¥–∞, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ</li>
      <li>Ê≠ª ‚Äî —É–º–µ—Ä–µ—Ç—å</li>
      <li>Ëå≤ ‚Äî –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ, –ø—Ä–∏ —ç—Ç–æ–º</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ
    // –ü–µ—Ä–µ–≤–æ–¥: –ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: "–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é"
    const expected = ['Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âòâ', '‰∏ç', 'Âêâ'];

    // –í—Å–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 10 –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤
    const allChars = [
      'Áéã', 'Âç†', 'Êõ∞', '‰∏ç', 'Âòâ', 'Ëã•', 'ÂÖ∂', 'Âêâ', 'Êúâ', 'Á•ü', '‰æÜ', 'Ëâ±', 'ËøÑ', 'Ëá≥',
      '‰∫î', 'Êó•', '‰∏Å', 'ÈÖâ', 'ÂÖÅ', 'Ëá™', 'Ë•ø', 'Ê¥ó', 'Èúá', 'Âëä', 'Âúü', 'Êñπ', 'ÂæÅ',
      '‰∫é', 'Êàë', 'Êù±', 'ÈÑô', 'ÁÉñ', '‰∫å', 'ÈÇë', '‰∫¶', '‰æµ', 'Áî∞', 'Âõõ', 'Â∫ö', 'Áî≥',
      'Âåó', 'Â≠ê', 'ÂïÜ', 'Êòî', 'Áî≤', 'Ëæ∞', '‰øò', '‰∫∫', 'ÂçÅ', 'Âèà', 'ÂÖ≠', 'Êàä', 'Âçà',
      'ÂæÄ', 'ÈÄê', 'ÂÖï', 'Â∞è', 'Ëá£', 'Âè∂', 'Ëªä', 'È¶¨', 'Á°™', 'È¶≠', 'Â§Æ', 'Â¢ú', 'Â©¶',
      'Â•Ω', 'Â®©', 'Ê≠ª', '‰πÉ', 'ÂÖπ', 'ÂÅÅ', '‰∫°', 'Á¶ç', 'ÂÖÅ', 'Èõ®', 'Âçú', 'Áô∏', 'Â∑≥',
      'Âêé', 'Ëá≥', 'Áî®', 'Á§∫', 'Âæ°', 'Èº†', 'ÂÆó', 'ÈñÄ', 'Âü∑', 'Â¢†'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, ru√≤ q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –∏ –µ—Å–ª–∏ –±—É–¥–µ—Ç, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª: ¬´–ù–µ –¥–µ–ª–∞–π —ç—Ç–æ–≥–æ, –Ω–æ –µ—Å–ª–∏ —Å–¥–µ–ª–∞–µ—à—å, —Ç–æ –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          <em>‰∏çÂòâ</em> ‚Äî ¬´–Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª (–æ—Å–Ω–æ–≤–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ),<br>
          <em>Ëã•ÂÖ∂ÂòâÔºå‰∏çÂêâ</em> ‚Äî ¬´–µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª (—É—Å–ª–æ–≤–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ).<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –£—Ä–æ–∫–∞ 10.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É—Å–ª–æ–≤–Ω—É—é —Å–≤—è–∑–∫—É Ëã• –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ–º.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, ru√≤ q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–£—Ä–æ–∂–∞–π –±—É–¥–µ—Ç –ø–ª–æ—Ö–∏–º, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
          ‚Ä¢ <strong>Ëã•ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br>
          –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è <strong>Ëã•...Ôºå‰∏çÂêâ</strong> –≤—ã—Ä–∞–∂–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º ‚Äî —Ç–∏–ø–∏—á–Ω–∞ –¥–ª—è –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –£—Ä–æ–∫–∞ 10.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´‰∏çÂòâ¬ª –∏ ¬´Ëã•ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ–º.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–ù–µ –±—É–¥–µ—Ç —É—Ä–æ–∂–∞—è, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Å–µ–π—á–∞—Å, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
          ‚Ä¢ <strong>ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –£—Ä–æ–∫–∞ 10. –ó–¥–µ—Å—å <strong>ÂÖ∂</strong> –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–∞–∫ –º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤, –∑–∞–º–µ–Ω—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 10 ‚Äî –°–ª–æ–∂–Ω—ã–µ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´ÁéãÂç†Êõ∞‰∏çÂòâÔºåËã•ÂÖ∂ÂòâÔºå‰∏çÂêâ¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —ç—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ —Å —É—Å–ª–æ–≤–Ω—ã–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ–º –∏ –º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤–æ–º.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng zhƒÅn yuƒì b√π jiƒÅ, ru√≤ q√≠ jiƒÅ, b√π j√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: ¬´–£—Ä–æ–∂–∞–π –±—É–¥–µ—Ç –ø–ª–æ—Ö–∏–º, –Ω–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ö–æ—Ä–æ—à–æ¬ª.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ¬´–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ. –ê –µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: ¬´–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π? –ï—Å–ª–∏ –±—É–¥–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ?¬ª", correct: false },
      { text: "–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ —Å–µ–π—á–∞—Å, —Ç–æ –æ–Ω–∞ –Ω–µ —É–º—Ä—ë—Ç.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Å–ª–æ–∂–Ω–æ–≥–æ —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>:<br>
          ‚Ä¢ <strong>ÁéãÂç†Êõ∞‰∏çÂòâ</strong> ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–ª –æ—Ç–≤–µ—Ç: ‚Äû–ù–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ‚Äú¬ª<br>
          ‚Ä¢ <strong>Ëã•ÂÖ∂ÂòâÔºå‰∏çÂêâ</strong> ‚Äî ¬´–ï—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ç–æ –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª<br>
          –ó–¥–µ—Å—å <strong>ÂÖ∂</strong> ‚Äî <em>–º–µ—Å—Ç–æ–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤</em>, –∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –£—Ä–æ–∫–∞ 10.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ¬´–Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ¬ª –∏ ¬´–µ—Å–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ ‚Äî –∫ –Ω–µ—Å—á–∞—Å—Ç—å—é¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

