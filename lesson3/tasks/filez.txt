=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰∫é –≤ ¬´Âëä‰∫éÁéã¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Âëä‰∫éÁéã¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">g√†o y√∫ w√°ng</div>
  </div>


  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–û—Ç–∫—É–¥–∞: ¬´–≤—ã–π—Ç–∏ –∏–∑ –®–∞–Ω¬ª", correct: false },
    { text: "–ö–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç: ¬´–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω¬ª", correct: true },
    { text: "–ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –®–∞–Ω¬ª", correct: false },
    { text: "–°—Ä–µ–¥—Å—Ç–≤–æ: ¬´—Å –ø–æ–º–æ—â—å—é –®–∞–Ω¬ª", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰∫é –≤ ¬´ÂÖ•‰∫éÂïÜ¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂÖ•‰∫éÂïÜ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">r√π y√∫ shƒÅng</div>
  </div>


  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–û—Ç–∫—É–¥–∞: ¬´–≤—ã–π—Ç–∏ –∏–∑ –®–∞–Ω¬ª", correct: false },
    { text: "–ö–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç: ¬´–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω¬ª", correct: true },
    { text: "–ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –®–∞–Ω¬ª", correct: false },
    { text: "–°—Ä–µ–¥—Å—Ç–≤–æ: ¬´—Å –ø–æ–º–æ—â—å—é –®–∞–Ω¬ª", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Áøå –≤ ¬´ÁøåÂ∫öÂØÖ¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÁøåÂ∫öÂØÖ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">y√¨ gƒìng y√≠n</div>
  </div>


  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–ü—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å", correct: false },
    { text: "–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å", correct: true },
    { text: "–í–µ–ª–∏–∫–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å", correct: false },
    { text: "–ù–∞—Å—Ç—É–ø–∞—é—â–∏–π –º–µ—Å—è—Ü –≥—ç–Ω-–∏–Ω—å", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰∏ä –≤ ¬´‰∏äÁî≤¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰∏äÁî≤¬ª ‚Äî —ç—Ç–æ:</strong></p>



  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">sh√†ng ji«é</div>
  </div>


  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)", correct: true },
    { text: "–ú–ª–∞–¥—à–∏–π –¶–∑—è", correct: false },
    { text: "–¶–∑—è –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –®–∞–Ω", correct: false },
    { text: "–¶–∑—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª –≤–µ—Å–Ω–æ–π", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–£—Ä–æ–∫ 3 ‚Äî –ß–∞—Å—Ç–∏—Ü—ã –∏ –ø—Ä–µ–¥–ª–æ–≥–∏</title>
</head>
<body>

  <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>

  <div class="grid">
    <div class="cell" onclick="openModal('q1')">
      <strong>ÂÖ•‰∫éÂïÜ</strong>
      <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
      <strong>ÁéãÂãøÂÖ•‰∫éÂïÜ</strong>
      <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
      <strong>ÁøåÂ∫öÂØÖ</strong>
      <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
      <strong>‰∏äÁî≤</strong>
      <span class="status" id="status-q4">?</span>
    </div>
  </div>

  <button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
  <div id="modal-q1" class="modal">
    <div class="modal-content">
      <div class="modal-header">ÂÖ•‰∫éÂïÜ</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">r√π y√∫ shƒÅng</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q1" value="–≤—ã–π—Ç–∏ –∏–∑ –®–∞–Ω">–≤—ã–π—Ç–∏ –∏–∑ –®–∞–Ω</label>
        <label><input type="radio" name="q1" value="–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω">–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q1" value="–æ—Ö–æ—Ç–∏—Ç—å—Å—è –≤ –®–∞–Ω">–æ—Ö–æ—Ç–∏—Ç—å—Å—è –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q1" value="—Å–æ–æ–±—â–∏—Ç—å –≤ –®–∞–Ω">—Å–æ–æ–±—â–∏—Ç—å –≤ –®–∞–Ω</label>
      </div>
      <button onclick="closeModal('q1')">OK</button>
    </div>
  </div>

  <div id="modal-q2" class="modal">
    <div class="modal-content">
      <div class="modal-header">ÁéãÂãøÂÖ•‰∫éÂïÜ</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">w√°ng w√π r√π y√∫ shƒÅng</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω">–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏—Ç –Ω–µ –≤ –®–∞–Ω">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏—Ç –Ω–µ –≤ –®–∞–Ω</label>
        <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω</label>
      </div>
      <button onclick="closeModal('q2')">OK</button>
    </div>
  </div>

  <div id="modal-q3" class="modal">
    <div class="modal-content">
      <div class="modal-header">ÁøåÂ∫öÂØÖ</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">y√¨ gƒìng y√≠n</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q3" value="–ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å">–ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å</label>
        <label><input type="radio" name="q3" value="—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å">—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å</label>
        <label><input type="radio" name="q3" value="–≤–µ–ª–∏–∫–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å">–≤–µ–ª–∏–∫–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å</label>
        <label><input type="radio" name="q3" value="–Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π –º–µ—Å—è—Ü –≥—ç–Ω-–∏–Ω—å">–Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π –º–µ—Å—è—Ü –≥—ç–Ω-–∏–Ω—å</label>
      </div>
      <button onclick="closeModal('q3')">OK</button>
    </div>
  </div>

  <div id="modal-q4" class="modal">
    <div class="modal-content">
      <div class="modal-header">‰∏äÁî≤</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">sh√†ng ji«é</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q4" value="–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)">–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)</label>
        <label><input type="radio" name="q4" value="–ú–ª–∞–¥—à–∏–π –¶–∑—è">–ú–ª–∞–¥—à–∏–π –¶–∑—è</label>
        <label><input type="radio" name="q4" value="–¶–∑—è –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –®–∞–Ω">–¶–∑—è –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –®–∞–Ω</label>
        <label><input type="radio" name="q4" value="–¶–∑—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª –≤–µ—Å–Ω–æ–π">–¶–∑—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª –≤–µ—Å–Ω–æ–π</label>
      </div>
      <button onclick="closeModal('q4')">OK</button>
    </div>
  </div>

  <script>
    const correctAnswers = {
      q1: "–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω",
      q2: "–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω",
      q3: "—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å",
      q4: "–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
      document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
      const selected = document.querySelector(`input[name="${id}"]:checked`);
      if (selected) {
        userAnswers[id] = selected.value;
        document.getElementById(`status-${id}`).textContent = "‚úì";
        document.getElementById(`status-${id}`).style.color = "green";
      }
      document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
      const resultEl = document.getElementById("result");
      const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

      if (!allAnswered) {
        resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
        return;
      }

      let correctCount = 0;
      for (const id in correctAnswers) {
        if (userAnswers[id] === correctAnswers[id]) correctCount++;
      }

      if (correctCount === 4) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
        sendResult(true);
      } else {
        const wrong = 4 - correctCount;
        resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
        sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 3</title>
</head>
<body>

  <h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 3</h2>

  <div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –£—Ä–æ–∫–∞ 3.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–≥ ‰∫é –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âãø!</em></p>
  </div>

  <div class="task-container">
    <div class="task-title">1. ÂÖ•‰∫éÂïÜÔºü</div>
    <div class="oracle-text">ÂÖ•‰∫éÂïÜÔºü</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
      <p>üí° –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç <strong>–ø—Ä–µ–¥–ª–æ–≥ ‰∫é</strong> –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ <strong>–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è</strong> (3.1)</p>
    </div>
  </div>

  <div class="task-container">
    <div class="task-title">2. ÁéãÂãøÂÖ•‰∫éÂïÜ</div>
    <div class="oracle-text">ÁéãÂãøÂÖ•‰∫éÂïÜ</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
      <p>üí° –ó–¥–µ—Å—å –≤–∞–∂–Ω–æ <strong>–º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âãø</strong> (3.5) –∏ <strong>–ø—Ä–µ–¥–ª–æ–≥ ‰∫é</strong> –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞</p>
    </div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const expected1 = [
      ['–≤—Å—Ç—É–ø–∏—Ç—å', '–≤', '–®–∞–Ω'],
      ['–≤–æ–π—Ç–∏', '–≤', '–®–∞–Ω'],
      ['–≤—Å—Ç—É–ø–ª—é', '–ª–∏', '–≤', '–®–∞–Ω'],
      ['–≤', '–®–∞–Ω', '–≤—Å—Ç—É–ø–∏—Ç—å']
    ];

    const expected2 = [
      ['–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '—Å–ª–µ–¥—É–µ—Ç', '–≤—Å—Ç—É–ø–∞—Ç—å', '–≤', '–®–∞–Ω'],
      ['–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '–Ω–∞–¥–æ', '–≤—Å—Ç—É–ø–∞—Ç—å', '–≤', '–®–∞–Ω'],
      ['–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '—Å—Ç–æ–∏—Ç', '–≤—Å—Ç—É–ø–∞—Ç—å', '–≤', '–®–∞–Ω'],
      ['–≤', '–®–∞–Ω', '–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '—Å–ª–µ–¥—É–µ—Ç', '–≤—Å—Ç—É–ø–∞—Ç—å']
    ];

    const words1 = ['–≤', '–®–∞–Ω', '–≤—Å—Ç—É–ø–∏—Ç—å', '–ª–∏', '–≤–æ–π—Ç–∏', '–∏–∑', '—Å–µ–π—á–∞—Å', '–º—ã', '–≤—ã–π—Ç–∏', '–∏–∑', '–Ω–µ–≥–æ', '–Ω–∞', '–∑–∞–ø–∞–¥'];
    const words2 = ['–ø—Ä–∞–≤–∏—Ç–µ–ª—é', '–Ω–µ', '—Å–ª–µ–¥—É–µ—Ç', '–≤—Å—Ç—É–ø–∞—Ç—å', '–≤', '–®–∞–Ω', '–Ω–∞–¥–æ', '—Å—Ç–æ–∏—Ç', '–æ–Ω', '–≤–æ–π–¥–µ—Ç', '—Å–µ–π—á–∞—Å', '–≤–µ—Å–Ω–æ–π'];

    const wordPool1 = document.getElementById('word-pool1');
    const wordPool2 = document.getElementById('word-pool2');
    const dropArea1 = document.getElementById('drop-area1');
    const dropArea2 = document.getElementById('drop-area2');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –°–æ–∑–¥–∞—ë–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤
    function createWordElements(words, pool, dropArea) {
      const shuffledWords = shuffleArray(words); // üîÅ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
      return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ drop-area
          box.remove();
          dropArea.appendChild(box);
          updatePlaceholder(dropArea); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        };

        return box;
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å [–ø—É—Å—Ç–æ]
    function updatePlaceholder(dropArea) {
      const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
      dropArea.classList.toggle('has-words', hasWords);
    }

    let wordElements1 = [];
    let wordElements2 = [];

    function init() {
      // –û—á–∏—â–∞–µ–º
      wordPool1.innerHTML = '';
      wordPool2.innerHTML = '';
      dropArea1.innerHTML = '';
      dropArea2.innerHTML = '';
      resultEl.style.display = 'none';

      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
      wordElements1 = createWordElements(words1, wordPool1, dropArea1);
      wordElements2 = createWordElements(words2, wordPool2, dropArea2);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª—ã
      wordElements1.forEach(el => wordPool1.appendChild(el));
      wordElements2.forEach(el => wordPool2.appendChild(el));

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
      updatePlaceholder(dropArea1);
      updatePlaceholder(dropArea2);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤ drop-area: –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—É–ª
    dropArea1.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool1.appendChild(wordBox);
        updatePlaceholder(dropArea1);
      }
    });

    dropArea2.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool2.appendChild(wordBox);
        updatePlaceholder(dropArea2);
      }
    });

    function getWords(dropArea) {
      return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
    }

    checkBtn.addEventListener('click', () => {
      const current1 = getWords(dropArea1);
      const current2 = getWords(dropArea2);

      const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
      const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

      if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –£—Ä–æ–∫–∞ 3: –ø—Ä–µ–¥–ª–æ–≥ ‰∫é –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âãø.`;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
      } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü:';
        if (!isCorrect1) message += '<br>‚Ä¢ –í –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏: –ø—Ä–µ–¥–ª–æ–≥ ‰∫é –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è';
        if (!isCorrect2) message += '<br>‚Ä¢ –í–æ –≤—Ç–æ—Ä–æ–º: –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âãø ("–Ω–µ —Å–ª–µ–¥—É–µ—Ç")';
        
        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
      }
    });

    resetBtn.addEventListener('click', init);

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ vs –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</title>
</head>
<body>

  <h2>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ/–í—Ä–µ–º—è vs –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</h2>

<div class="instructions">
  <div class="instructions-header" onclick="toggleInstructions()">
    <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
    <span class="arrow">‚ñº</span>
  </div>
  <div class="instructions-content" style="display:none">
    <p><strong>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ/–í—Ä–µ–º—è vs –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</strong></p>
    <p>–í –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑—É—é—Ç—Å—è –≤–æ–∫—Ä—É–≥ –¥–≤—É—Ö –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤:</p>
    
    <p>üîµ <strong>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ/–í—Ä–µ–º—è</strong> (—Å–∏–Ω–∏–π):</p>
    <ul>
      <li>–ü—Ä–µ–¥–ª–æ–≥ ‰∫é (y√∫) —É–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—Ç–æ/–≤—Ä–µ–º—è: <em>"‰∫éÂïÜ"</em> = "–≤ –®–∞–Ω"</li>
      <li>–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã: <em>"Áî≤Â≠ê"</em> = "–¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã"</li>
      <li>–û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è—Ç –î–û —Å–∫–∞–∑—É–µ–º–æ–≥–æ</li>
    </ul>
    
    <p>üü£ <strong>–ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</strong> (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π):</p>
    <ul>
      <li>Âãø (w√π)/ÊØã (w√∫) = –∑–∞–ø—Ä–µ—Ç: <em>"ÂãøÂÖ•"</em> = "–Ω–µ –≤—Ö–æ–¥–∏!"</li>
      <li>Áøå (y√¨)/Áîü (shƒìng) = –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è: <em>"ÁøåÂ∫öÂØÖ"</em> = "—Å–ª–µ–¥. –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å"</li>
      <li>–°—Ç–æ—è—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º</li>
    </ul>
    
    <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
      "‰∫éÂïÜÂÖ•" ‚Üí üîµ (–º–µ—Å—Ç–æ)<br>
      "ÂãøÂëä" ‚Üí üü£ (–∑–∞–ø—Ä–µ—Ç)</p>
  </div>
</div>


<script>
function toggleInstructions() {
  const header = document.querySelector('.instructions-header');
  const content = document.querySelector('.instructions-content');
  const isHidden = content.style.display === 'none';
  
  content.style.display = isHidden ? 'block' : 'none';
  header.classList.toggle('collapsed', !isHidden);
  
  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è iframe (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä)
  setTimeout(() => {
    window.parent.postMessage({
      type: "UPDATE_HEIGHT",
      height: document.body.scrollHeight
    }, "*");
  }, 100);
}
</script>

  <div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    const sentences = [
      { text: "‰∫éÂïÜÂÖ•", type: "space", explanation: "–≤—Å—Ç—É–ø–∏—Ç—å –≤ –®–∞–Ω (–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)" },
      { text: "ÂãøÂëäÁéã", type: "mod", explanation: "–Ω–µ —Å–æ–æ–±—â–∞–π –ø—Ä–∞–≤–∏—Ç–µ–ª—é (–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å)" },
      { text: "‰∫éÁî≤Â≠êÁî∞", type: "space", explanation: "–æ—Ö–æ—Ç–∏—Ç—å—Å—è –≤ –¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã (–≤—Ä–µ–º—è)" },
      { text: "ÁøåÂ∫öÂØÖ", type: "mod", explanation: "–≤ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å (–±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è)" },
      { text: "Âëä‰∫é‰∏äÁî≤", type: "space", explanation: "—Å–æ–æ–±—â–∏—Ç—å –í–µ—Ä—Ö–Ω–µ–º—É –¶–∑—è (–∞–¥—Ä–µ—Å–∞—Ç)" },
      { text: "ÁéãÊØãÂÖ•", type: "mod", explanation: "–ø—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Ö–æ–¥–∏—Ç—å (–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å)" },
      { text: "‰∫éÂ§ßÈÇëÂïÜ", type: "space", explanation: "–≤ –í–µ–ª–∏–∫–æ–º –≥–æ—Ä–æ–¥–µ –®–∞–Ω (–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)" },
      { text: "Áîü‰∏ÉÊúà", type: "mod", explanation: "–Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π —Å–µ–¥—å–º–æ–π –º–µ—Å—è—Ü (–±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è)" },
      { text: "‰∫éÊ≤≥Âëä", type: "space", explanation: "—Å–æ–æ–±—â–∏—Ç—å —É —Ä–µ–∫–∏ (–º–µ—Å—Ç–æ)" },
      { text: "ÂºóÂÖ∂‰æÜ", type: "mod", explanation: "–Ω–µ –ø—Ä–∏–¥–µ—Ç (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)" }
    ];

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

    function createSentenceElement(sentence, index) {
      const item = document.createElement('div');
      item.className = 'sentence-item';
      item.dataset.index = index;
      
      item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
          <span class="toggle-text">–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</span>
          <label class="toggle-switch">
            <input type="checkbox">
            <span class="slider"></span>
          </label>
          <span class="toggle-text">–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å</span>
        </div>
      `;
      
      return item;
    }

    function init() {
      const shuffled = shuffleArray([...sentences]);
      const column1 = document.getElementById('column1');
      const column2 = document.getElementById('column2');
      
      column1.innerHTML = '';
      column2.innerHTML = '';
      document.getElementById('result').style.display = 'none';
      
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π
      document.querySelectorAll('.sentence-item').forEach(el => {
        el.classList.remove('correct', 'incorrect');
      });

      shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
      });
      
      shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
      });
    }

    function checkAnswers() {
      const items = document.querySelectorAll('.sentence-item');
      let allCorrect = true;
      
      items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "mod") || 
                          (!input.checked && expectedType === "space");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
          item.classList.add('correct');
        } else {
          item.classList.add('incorrect');
          allCorrect = false;
        }
      });
      
      const resultEl = document.getElementById('result');
      if (allCorrect) {
        resultEl.innerHTML = `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—Å–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ.`;
        resultEl.className = 'success';
        sendResult(true);
      } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
      }
      resultEl.style.display = 'block';
    }

    function reset() {
      document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
      });
      document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
      });
      document.getElementById('result').style.display = 'none';
    }

    function sendResult(success) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

    document.getElementById('check-btn').addEventListener('click', checkAnswers);
    document.getElementById('reset-btn').addEventListener('click', reset);
  </script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Â∫ö", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (7-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
  { char: "‰πô", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (2-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
  { char: "Âãø", meaning: "–°–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ: –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º" },
  { char: "ÂÖ•", meaning: "–í—Ö–æ–¥–∏—Ç—å, –≤—Å—Ç—É–ø–∞—Ç—å" },
  { char: "‰∫é", meaning: "–ü—Ä–µ–¥–ª–æ–≥: –≤, –Ω–∞, –∫ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥)" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Ëæõ", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (8-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
  { char: "Â§ß", meaning: "–ë–æ–ª—å—à–æ–π, –≤–µ–ª–∏–∫–∏–π" },
  { char: "ÈÇë", meaning: "–ì–æ—Ä–æ–¥, –ø–æ—Å–µ–ª–µ–Ω–∏–µ" },
  { char: "ÂÖ≠", meaning: "–®–µ—Å—Ç—å; —à–µ—Å—Ç–æ–π" },
  { char: "Êúà", meaning: "–ú–µ—Å—è—Ü; –ª—É–Ω–∞" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Áîü", meaning: "–†–æ–∂–¥–∞—Ç—å—Å—è; –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π (–æ –≤—Ä–µ–º–µ–Ω–∏)" },
  { char: "‰∏É", meaning: "–°–µ–º—å; —Å–µ–¥—å–º–æ–π" },
  { char: "‰πù", meaning: "–î–µ–≤—è—Ç—å; –¥–µ–≤—è—Ç—ã–π" },
  { char: "Ê±Ç", meaning: "–ü—Ä–æ—Å–∏—Ç—å, –º–æ–ª–∏—Ç—å" },
  { char: "Â¶£", meaning: "–£–º–µ—Ä—à–∞—è –º–∞—Ç—å, –ø—Ä–∞—Ä–æ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü–∞" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–°–µ–≥–æ–¥–Ω—è –ø–ª–µ–º—è –ì—É–Ω –ø—Ä–∏—Å–ª–∞–ª–æ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π –≤ –í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Â∑•Êñπ ‚Äî –ø–ª–µ–º—è –ì—É–Ω</li>
      <li>Êù• ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å</li>
      <li>ÁôΩÈ©¨ ‚Äî –±–µ–ª—ã–µ –ª–æ—à–∞–¥–∏</li>
      <li>‰∫é ‚Äî –≤ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)</li>
      <li>Â§ßÈÇëÂïÜ ‚Äî –í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['‰ªä', 'Â∑•', 'Êñπ', 'Êù•', 'ÁôΩ', 'È©¨', '‰∫é', 'Â§ß', 'ÈÇë', 'ÂïÜ'];

    const allChars = [
      '‰ªä', 'Â∑•', 'Êñπ', 'Êù•', 'ÁôΩ', 'È©¨', '‰∫é', 'Â§ß', 'ÈÇë', 'ÂïÜ',
      'Êàë', 'Âèó', 'Á®ª', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'Áéã', 'Âçú', 'Ë≤û',
      'Èõ®', 'ÂÖ∂', '‰∫â', 'Âêâ', 'Áä¨', 'Â≤Å', 'ÂÖ•', 'Âëä', 'Âãø', '‰∏ä'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰ªäÂ∑•ÊñπÊù•ÁôΩÈ©¨‰∫éÂ§ßÈÇëÂïÜ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Êó•", meaning: "–î–µ–Ω—å; —Å–æ–ª–Ω—Ü–µ" },
  { char: "Áøå", meaning: "–°–ª–µ–¥—É—é—â–∏–π, –±—É–¥—É—â–∏–π (–æ –≤—Ä–µ–º–µ–Ω–∏)" },
  { char: "Âëä", meaning: "–°–æ–æ–±—â–∞—Ç—å, –¥–æ–∫–ª–∞–¥—ã–≤–∞—Ç—å" },
  { char: "‰∏≠", meaning: "–°–µ—Ä–µ–¥–∏–Ω–∞; —Å—Ä–µ–¥–Ω–∏–π" },
  { char: "‰∏Å", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (4-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Êàä", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (5-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
  { char: "Â∑•", meaning: "–†–∞–±–æ—Ç–∞; –ø–ª–µ–º—è –ì—É–Ω" },
  { char: "‰∏ä", meaning: "–í–µ—Ä—Ö; –≤–µ—Ä—Ö–Ω–∏–π" },
  { char: "Ê≤≥", meaning: "–†–µ–∫–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –•—É–∞–Ω—Ö—ç)" },
  { char: "Âîê", meaning: "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è: –¢–∞–Ω (–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–∞–≤–∏—Ç–µ–ª—å)" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === pairs.length) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Ê±Ç", meaning: "qi√∫" },
  { char: "Â§ß", meaning: "d√†" },
  { char: "Êàä", meaning: "w√π" },
  { char: "‰∫é", meaning: "y√∫" },
  { char: "‰∏É", meaning: "qƒ´" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Áîü", meaning: "shƒìng" },
  { char: "Âîê", meaning: "t√°ng" },
  { char: "‰∏ä", meaning: "sh√†ng" },
  { char: "‰πô", meaning: "y«ê" },
  { char: "Âëä", meaning: "g√†o" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Â∑•", meaning: "g≈çng" },
  { char: "ÂÖ≠", meaning: "li√π" },
  { char: "Êó•", meaning: "r√¨" },
  { char: "Âãø", meaning: "w√π" },
  { char: "Â∫ö", meaning: "gƒìng" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task25.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "‰∏≠", meaning: "zh≈çng" },
  { char: "ÈÇë", meaning: "y√¨" },
  { char: "‰πù", meaning: "ji«î" },
  { char: "Ê≤≥", meaning: "h√©" },
  { char: "ÂÖ•", meaning: "r√π" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task26.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 3 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Áøå", meaning: "y√¨" },
  { char: "Êúà", meaning: "yu√®" },
  { char: "‰∏Å", meaning: "dƒ´ng" },
  { char: "Ëæõ", meaning: "xƒ´n" },
  { char: "Â¶£", meaning: "b«ê" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task27.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å –≥–∞–¥–∞—Ç–µ–ª—å –¶–∑—é–π —Å–ø—Ä–æ—Å–∏–ª: –í–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –®–∞–Ω?</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â∫öÂØÖÂçú„±øË≤û ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–∞—á–∞–ª–∞ –≥–∞–¥–∞–Ω–∏—è (–¥–∞—Ç–∞ + –≥–∞–¥–∞—Ç–µ–ª—å)</li>
      <li>ÂÖ•‰∫éÂïÜ ‚Äî ¬´–≤–æ–π—Ç–∏ –≤ –®–∞–Ω¬ª (ÂÖ• = –≤–æ–π—Ç–∏, ‰∫é = –≤)</li>
      <li>Áéã ‚Äî ¬´–ø—Ä–∞–≤–∏—Ç–µ–ª—å¬ª, –ø–æ–¥–ª–µ–∂–∞—â–µ–µ</li>
      <li>‰∫é ‚Äî –ø—Ä–µ–¥–ª–æ–≥, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤, –∫, –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –º–µ—Å—Ç–∞)</li>
      <li>–ü–æ—Ä—è–¥–æ–∫: –¥–∞—Ç–∞ ‚Üí –≥–∞–¥–∞–Ω–∏–µ ‚Üí –≤–æ–ø—Ä–æ—Å –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å –∫–æ—Å–≤–µ–Ω–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –º–µ—Å—Ç–∞</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –¶–µ–ª–µ–≤–∞—è —Ñ—Ä–∞–∑–∞: "–í –¥–µ–Ω—å –≥—ç–Ω-–∏–Ω—å –≥–∞–¥–∞—Ç–µ–ª—å –¶–∑—é–π —Å–ø—Ä–æ—Å–∏–ª: –≤–æ–π–¥—ë—Ç –ª–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –®–∞–Ω?"
    // –ë–µ–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –∫–∞–∫ –≤ –æ—Ä–∞–∫—É–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö
    const expected = ['Â∫ö', 'ÂØÖ', 'Âçú', '„±ø', 'Ë≤û', 'Áéã', 'ÂÖ•', '‰∫é', 'ÂïÜ'];

    // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (–∏–∑ –£—Ä–æ–∫–∞ 3 –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–∫–æ–≤)
    const allChars = [
      'Â∫ö', 'ÂØÖ', 'Âçú', '„±ø', 'Ë≤û', 'Áéã', 'ÂÖ•', '‰∫é', 'ÂïÜ',
      'Ëæõ', '‰∏ë', 'Âãø', 'Â§ß', 'ÈÇë', 'ÂÖ≠', 'Êúà', 'Áîü', '‰∏É', '‰πù',
      'Ê±Ç', 'Â¶£', 'Êó•', 'Áøå', 'Âëä', '‰∏≠', '‰∏Å', 'Êàä', 'Â∑•', '‰∏ä',
      'Ê≤≥', 'Âîê', '‰πô', 'Â∑≥', 'ÂÖ∂', '‰ªä', 'Êù•', 'Áî≤', 'Âçà', 'Â§ß'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∫öÂØÖÂçú„±øË≤ûÁéãÂÖ•‰∫éÂïÜ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task28.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 2</p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –£—Ä–æ–∫–∞ 2 —Å –∫—Ä–∞—Ç–∫–∏–º–∏, —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const wordBank = [
  { char: "Ê±Ç", correct: "–∏—Å–∫–∞—Ç—å, –ø—Ä–æ—Å–∏—Ç—å (—á–∞—Å—Ç–æ —Å ‰∫é ‚Äî –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–æ–º—É-–ª–∏–±–æ)" },
  { char: "Âëä", correct: "—Å–æ–æ–±—â–∞—Ç—å, –¥–æ–∫–ª–∞–¥—ã–≤–∞—Ç—å (—á–∞—Å—Ç–æ —Å ‰∫é ‚Äî –∫–æ–º—É-–ª–∏–±–æ)" },
  { char: "Â§ß", correct: "–≤–µ–ª–∏–∫–∏–π, –±–æ–ª—å—à–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫ –∏–º–µ–Ω–∞–º –ø—Ä–µ–¥–∫–æ–≤, –Ω–∞–ø—Ä. Â§ßÂ∫ö)" },
  { char: "ÈÇë", correct: "–≥–æ—Ä–æ–¥, –ø–æ—Å–µ–ª–µ–Ω–∏–µ (–≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ Â§ßÈÇëÂïÜ ‚Äî –í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω)" },
  { char: "ÂïÜ", correct: "–®–∞–Ω (—Å—Ç–æ–ª–∏—Ü–∞ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, —Ü–µ–Ω—Ç—Ä —ç–π–∫—É–º–µ–Ω—ã)" },
  { char: "Áøå", correct: "—Å–ª–µ–¥—É—é—â–∏–π, –±—É–¥—É—â–∏–π (—É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è —Å –¥–∞—Ç–∞–º–∏, –Ω–∞–ø—Ä. ÁøåÂ∫öÂØÖ)" },
  { char: "Áîü", correct: "–Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π (–æ –º–µ—Å—è—Ü–µ: Áîü‰∏É ‚Äî –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–π —Å–µ–¥—å–º–æ–π –º–µ—Å—è—Ü)" },
  { char: "Êúà", correct: "–º–µ—Å—è—Ü (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–ª–∏ –ø–æ—Ä—è–¥–∫–æ–≤—ã–º: ÂÖ≠Êúà ‚Äî —à–µ—Å—Ç–æ–π –º–µ—Å—è—Ü)" },
  { char: "Êó•", correct: "–¥–µ–Ω—å (–≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª –∏–ª–∏ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏—è—Ö —Å –¥–∞—Ç–∞–º–∏)" },
  { char: "Â¶£", correct: "–ø–æ–∫–æ–π–Ω–∞—è –º–∞—Ç—å, –ø—Ä–µ–¥–æ–∫ –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞" }

    ];

    const allValues = wordBank.map(item => item.correct);

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(wordBank);

      shuffled.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        const options = shuffleArray([...allValues]);

        let selectHTML = `<select id="char_${item.char}">
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      let allFilled = true;
      let correctCount = 0;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      const resultEl = document.getElementById("result");

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ! –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 2.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å/–¥–∞—Ç—å, ‰æÜ ‚Äî –ø—Ä–∏—Ö–æ–¥–∏—Ç—å/–ø—Ä–∏—Å—ã–ª–∞—Ç—å, Âπ¥ ‚Äî —É—Ä–æ–∂–∞–π.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderPairs;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task29.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖ•‰∫éÂïÜÔºü</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂÖ•‰∫éÂïÜÔºü</h2>
  <p class="instruction">–í –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º ‰∫é. –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ÂÖ•‰∫éÂïÜ?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { 
        value: "enter-shang", 
        text: "–≤–æ–π—Ç–∏ –≤ –®–∞–Ω", 
        correct: true,
        explanation: "ÂÖ•‰∫éÂïÜ ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∫–æ—Å–≤–µ–Ω–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Å—Ç–∞ —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º ‰∫é. –°–º. –£—Ä–æ–∫ 3, 3.1 –∏ 3.2."
      },
      { 
        value: "from-shang", 
        text: "–ø—Ä–∏–π—Ç–∏ –∏–∑ –®–∞–Ω", 
        correct: false,
        explanation: "‰∫é –Ω–µ –≤—ã—Ä–∞–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞. –î–ª—è ¬´–∏–∑¬ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä Ëá™ÂïÜ."
      },
      { 
        value: "about-shang", 
        text: "–≥–æ–≤–æ—Ä–∏—Ç—å –æ –®–∞–Ω–µ", 
        correct: false,
        explanation: "‰∫é –º–æ–∂–µ—Ç –≤—ã—Ä–∞–∂–∞—Ç—å –∞–¥—Ä–µ—Å–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –Ω–µ —Ç–µ–º—É —Ä–µ—á–∏. –≠—Ç–æ –Ω–µ ¬´–æ¬ª, –∞ ¬´–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫¬ª."
      },
      { 
        value: "ruler-enter", 
        text: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–æ–π–¥—ë—Ç", 
        correct: false,
        explanation: "Áéã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. ÂÖ•‰∫éÂïÜ ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ –∏ –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—â–µ–µ."
      }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      const selectedOption = options.find(opt => opt.value === selectedValue);

      if (selectedOption.correct) {
        resultEl.innerHTML = '‚úÖ –í–µ—Ä–Ω–æ!<br>ÂÖ•‰∫éÂïÜ ‚Äî ¬´–≤–æ–π—Ç–∏ –≤ –®–∞–Ω¬ª. –ü—Ä–µ–¥–ª–æ–≥ ‰∫é —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –∫–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç –¥–≤–∏–∂–µ–Ω–∏—è. –°–º. –£—Ä–æ–∫ 3: ‰∫é ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥ (3.1), –∫–æ—Å–≤–µ–Ω–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ (3.2).';
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = `‚ùå –ù–µ—Ç. ${selectedOption.explanation} –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ÂÖ•‰∫éÂïÜ = –≤–æ–π—Ç–∏ –≤ –®–∞–Ω.`;
        resultEl.className = "error";
        sendResult(false);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ: ÂÖ•‰∫éÂïÜ = –≤–æ–π—Ç–∏ –≤ –®–∞–Ω" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂÖ•‰∫éÂïÜ")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ú—ã –≤—Å—Ç—É–ø–∏–º –≤ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–º –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áîü‰∫åÊúà ‚Äî –≤ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–º –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ</li>
      <li>Êàë ‚Äî –º—ã</li>
      <li>ÂÖ• ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å</li>
      <li>‰∫é ‚Äî –≤ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)</li>
      <li>ÂïÜ ‚Äî –≥–æ—Ä–æ–¥ (–í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Áîü', '‰∫å', 'Êúà', 'Êàë', 'ÂÖ•', '‰∫é', 'ÂïÜ'];

    const allChars = [
      'Áîü', '‰∫å', 'Êúà', 'Êàë', 'ÂÖ•', '‰∫é', 'ÂïÜ',
      '‰ªä', 'Êù•', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë',
      'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'Èõ®', 'Áéã', 'Âç†', 'Êõ∞',
      'Âëä', 'Âãø', 'Ê±Ç', 'ÂÖ≠', '‰∏É', '‰πù', 'Â∫ö', 'ÂØÖ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áîü‰∫åÊúàÊàëÂÖ•‰∫éÂïÜ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task30.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å, –±—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å? –ó–∞—Ç–µ–º, –Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è —Ü–∑–∏-—Å—ã, –º—ã –±—É–¥–µ–º –º–æ–ª–∏—Ç—å –æ –¥–æ–∂–¥–µ.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å</li>
      <li>ÂÖ∂Èõ®Ôºü ‚Äî –±—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å?</li>
      <li>Ëá™‰∏ÅÂ∑≥ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è —Ü–∑–∏-—Å—ã</li>
      <li>ÊàëÊ±Ç ‚Äî –º—ã –±—É–¥–µ–º –º–æ–ª–∏—Ç—å</li>
      <li>ÂÖ∂ ‚Äî —á–∞—Å—Ç–∏—Ü–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –±—É–¥—É—â–µ–µ/–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å (–≤–æ–ø—Ä–æ—Å)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –ò–∑–º–µ–Ω–µ–Ω–æ: –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–æ–º—É, –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é.
    const expected = ['Ëá™', '‰ªä', 'Ëá≥', '‰∫é', 'Áî≤', 'Ëæ∞', 'ÂÖ∂', 'Èõ®', 'Ëá™', '‰∏Å', 'Â∑≥', 'Êàë', 'Ê±Ç'];

    // –ò–∑–º–µ–Ω–µ–Ω–æ: –ü—É–ª –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    const allChars = [
      'Ëá™', '‰ªä', 'Ëá≥', '‰∫é', 'Áî≤', 'Ëæ∞', 'ÂÖ∂', 'Èõ®', '‰∏Å', 'Â∑≥', 'Êàë', 'Ê±Ç',
      'Â£¨', 'ÂØÖ', 'Âçú', '„±ø', 'Ë≤û', 'Âºó', 'Â≠ê', 'ÂïÜ', 'ÁÉñ', 'Âü∫', 'Êñπ', 'Âºó',
      'Êàä', 'Áî≥', 'Áà≠', 'Â∏ù', 'Èôç', 'È¶¨', '‰Ωë', 'Â∑•', 'Ê¥π', '‰Ωú', 'ÈÇë', 'Âêà',
      '‰πô', '‰∫•', '‰æØ', 'Ëôé', 'Âæó', 'Ê±ù', '‰Ωø', '‰∏ç', 'Êúï', 'Áæå', '‰Ωô', 'Âºó'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');


    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ëá™‰ªäËá≥‰∫éÁô∏‰∫•ÁéãÊ±Ç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task31.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å</title>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥</h2>
  <p class="instruction">–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º. –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ –£—Ä–æ–∫–∞ 4: <em>Ëá™...Ëá≥‰∫é...</em></p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –ö–ª—é—á–µ–≤—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –£—Ä–æ–∫–∞ 4 —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π Ëá™...Ëá≥‰∫é...
    const wordBank = [
      { 
        char: "Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞", 
        correct: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å" 
      },
      { 
        char: "Ëá™‰ªäËá≥‰∫é‰∏ÅÂ∑≥", 
        correct: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º –¥–∏–Ω-—Å—ã" 
      },
      { 
        char: "Ëá™‰∏äÁî≤Ëá≥‰∫é‰∏≠‰∏Å", 
        correct: "–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è –∏ –∫–æ–Ω—á–∞—è –°—Ä–µ–¥–Ω–∏–º –î–∏–Ω–æ–º" 
      },
      { 
        char: "Â£¨ÂØÖËá≥‰∫éÁî≤Ëæ∞", 
        correct: "–æ—Ç –¥–Ω—è –∂—ç–Ω—å-–∏–Ω—å –¥–æ –¥–Ω—è —Ü–∑—è-—á—ç–Ω—å" 
      },
      { 
        char: "Êù•Áî≤Â≠ê", 
        correct: "–≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É –≤ –¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã (—Å–º. Áøå)" 
      }
    ];

    const allValues = wordBank.map(item => item.correct);

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(wordBank);

      shuffled.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        const options = shuffleArray([...allValues]);

        let selectHTML = `<select id="char_${item.char}">
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      let allFilled = true;
      let correctCount = 0;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      const resultEl = document.getElementById("result");

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ! –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é Ëá™...Ëá≥‰∫é... –∏–∑ –£—Ä–æ–∫–∞ 4.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Ëá™ ‚Äî –æ—Ç, —Å; Ëá≥‰∫é ‚Äî –¥–æ; Áøå ‚Äî —Å–ª–µ–¥—É—é—â–∏–π, –±—É–¥—É—â–∏–π.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderPairs;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task32.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞Ôºü</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞Ôºü</h2>
  <p class="instruction">–£—Ä–æ–∫ 4 –ø–æ—Å–≤—è—â–µ–Ω –ø—Ä–µ–¥–ª–æ–≥—É Ëá™ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é... –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { 
        value: "from-now-to-jia-chen", 
        text: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å", 
        correct: true,
        explanation: "–≠—Ç–æ –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é... –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –°–º. –£—Ä–æ–∫ 4, 4.2."
      },
      { 
        value: "from-jia-chen-to-now", 
        text: "–Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è —Ü–∑—è-—á—ç–Ω—å –∏ –∫–æ–Ω—á–∞—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º", 
        correct: false,
        explanation: "–ü–æ—Ä—è–¥–æ–∫ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é... –≤—Å–µ–≥–¥–∞ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ (Ëá™) –∫ –∫–æ–Ω–µ—á–Ω–æ–π (Ëá≥‰∫é). –≠—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–∏."
      },
      { 
        value: "on-jia-chen", 
        text: "–≤ –¥–µ–Ω—å —Ü–∑—è-—á—ç–Ω—å", 
        correct: false,
        explanation: "–û–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞–∫–∞ (Áî≤Ëæ∞) –±—ã–ª–æ –±—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é... –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏."
      },
      { 
        value: "from-shang", 
        text: "–∏–∑ –≥–æ—Ä–æ–¥–∞ –®–∞–Ω", 
        correct: false,
        explanation: "‰∫é –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –º–µ—Å—Ç–æ, –Ω–æ Ëá™ –≤ —ç—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–µ–º—è. ÂÖ•‰∫éÂïÜ ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ, Ëá™‰ªä... ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è."
      }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      const selectedOption = options.find(opt => opt.value === selectedValue);

      if (selectedOption.correct) {
        resultEl.innerHTML = '‚úÖ –í–µ—Ä–Ω–æ!<br>Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞ ‚Äî ¬´–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º —Ü–∑—è-—á—ç–Ω—å¬ª. –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –£—Ä–æ–∫–∞ 4 –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü—Ä–µ–¥–ª–æ–≥ Ëá™ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–∫—É –≤—Ä–µ–º–µ–Ω–∏.';
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = `‚ùå –ù–µ—Ç. ${selectedOption.explanation} –ü—Ä–∞–≤–∏–ª—å–Ω–æ: Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞ = –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ —Ü–∑—è-—á—ç–Ω—å.`;
        resultEl.className = "error";
        sendResult(false);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ: Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞ = –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é...")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–µ —Å–æ–æ–±—â–∞–π –ø—Ä–∞–≤–∏—Ç–µ–ª—é –æ –¥–æ–∂–¥–µ!</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Âãø ‚Äî –Ω–µ (–∑–∞–ø—Ä–µ—Ç)</li>
      <li>Âëä ‚Äî —Å–æ–æ–±—â–∞—Ç—å</li>
      <li>Èõ® ‚Äî –¥–æ–∂–¥—å</li>
      <li>‰∫é ‚Äî –æ, –ø—Ä–∞–≤–∏—Ç–µ–ª—é (–ø—Ä–µ–¥–ª–æ–≥ –¥–ª—è –∞–¥—Ä–µ—Å–∞—Ç–∞)</li>
      <li>Áéã ‚Äî –ø—Ä–∞–≤–∏—Ç–µ–ª—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Âãø', 'Âëä', 'Èõ®', '‰∫é', 'Áéã'];

    const allChars = [
      'Âãø', 'Âëä', 'Èõ®', '‰∫é', 'Áéã',
      '‰ªä', 'Êù•', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë', 'ÂïÜ',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'Ê±Ç', 'ÂÖ≠', 'Êúà', 'ÂÖ•',
      'Áîü', '‰∏É', '‰πù', 'Êó•', 'Áøå', '‰∏≠', '‰∏Å', 'Êàä', '‰∏ä'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂãøÂëäÈõ®‰∫éÁéã';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–Ø –ø–æ–ø—Ä–æ—Å–∏–ª —á—É–º–∏–∑—ã —É –≥–∞–¥–∞—Ç–µ–ª—è. –ì–∞–¥–∞—Ç–µ–ª—å –ø—Ä–∏—à–ª–µ—Ç —á—É–º–∏–∑—É –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Êàë ‚Äî —è</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏—Ç—å</li>
      <li>‰∫é ‚Äî —É (–∞–¥—Ä–µ—Å–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è)</li>
      <li>Âçú ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å</li>
      <li>Êù• ‚Äî –ø—Ä–∏—à–ª–µ—Ç (–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)</li>
      <li>Èªç ‚Äî —á—É–º–∏–∑–∞</li>
      <li>Êù•Â≤Å ‚Äî –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Êàë', 'Ê±Ç', 'Èªç', '‰∫é', 'Âçú', '‰æÜ', 'Ê≠≤', 'Âçú', '‰æÜ', 'Èªç'];

    const allChars = [
      'Êàë', 'Ê±Ç', 'Èªç', '‰∫é', 'Âçú', '‰æÜ', 'Ê≠≤', 'Âçú', '‰æÜ', 'Èªç',
      '‰ªä', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë', 'ÂïÜ', 'ÂÖ•', 'Áéã',
      'Âãø', 'Âëä', 'Èõ®', 'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'ÂÖ≠', 'Êúà', 'Áîü'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÊàëÊ±ÇÈªç‰∫éÂçú„ÄÇ‰æÜÊ≠≤Âçú‰æÜÈªç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ì–∞–¥–∞—Ç–µ–ª—å –ø—Ä–∏—à–ª–µ—Ç –ª–æ—à–∞–¥–µ–π.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>È©¨ ‚Äî –ª–æ—à–∞–¥—å</li>
      <li>Âçú ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å</li>
      <li>Êù• ‚Äî –ø—Ä–∏—à–ª–µ—Ç (–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Âçú', '‰æÜ', 'È©¨'];

    const allChars = [
      'Êàë', 'Ê±Ç', 'Èªç', '‰∫é', 'Âçú', '‰æÜ', 'Ê≠≤', 'Âçú', '‰æÜ', 'Èªç',
      '‰ªä', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë', 'ÂïÜ', 'ÂÖ•', 'Áéã',
      'Âãø', 'Âëä', 'Èõ®', 'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'ÂÖ≠', 'Êúà', 'Áîü'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÊàëÊ±ÇÈªç‰∫éÂçú„ÄÇ‰æÜÊ≠≤Âçú‰æÜÈªç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ÁéãÂãøÂÖ•‰∫éÂïÜ</title>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Âãø –≤ ¬´ÁéãÂãøÂÖ•‰∫éÂïÜ¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÁéãÂãøÂÖ•‰∫éÂïÜ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w√°ng w√π r√π y√∫ shƒÅng</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
    const options = [
      { text: "–ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω¬ª", correct: false },
      { text: "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω¬ª", correct: true },
      { text: "–ë–µ–∑–ª–∏—á–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–ù–µ –±—É–¥–µ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –®–∞–Ω¬ª", correct: false },
      { text: "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏—Ç –Ω–µ –≤ –®–∞–Ω¬ª", correct: false }
    ];

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ ‚Äî –∑–∞–ø—Ä–µ—Ç –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –∫–∞–∫ \"–Ω–µ —Å–ª–µ–¥—É–µ—Ç\".";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –∞ –º–æ–¥–∞–ª—å–Ω–æ–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(false);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>
</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Âãø –≤ ¬´ÁéãÂãøÂÖ•‰∫éÂïÜ¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÁéãÂãøÂÖ•‰∫éÂïÜ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w√°ng w√π r√π y√∫ shƒÅng</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω (–ø—Ä–æ—Å—Ç–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –®–∞–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è/–∑–∞–ø—Ä–µ—Ç)", correct: true },
      { text: "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ –®–∞–Ω", correct: false },
      { text: "–ù–µ –±—ã–ª–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –®–∞–Ω", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰∫é –≤ ¬´Âëä‰∫éÁéã¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Âëä‰∫éÁéã¬ª ‚Äî —ç—Ç–æ:</strong></p>

<div class="pinyin-container">
  <button class="pinyin-toggle" onclick="...">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
  <div class="pinyin-text">g√†o y√∫ w√°ng</div>
</div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
  const options = [
    { text: "–ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´—Å–æ–æ–±—â–∏—Ç—å –≤ –º–µ—Å—Ç–µ –í–∞–Ω¬ª", correct: false },
    { text: "–ê–¥—Ä–µ—Å–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è: ¬´—Å–æ–æ–±—â–∏—Ç—å –ø—Ä–∞–≤–∏—Ç–µ–ª—é¬ª", correct: true },
    { text: "–°—Ä–µ–¥—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´—Å –ø–æ–º–æ—â—å—é –í–∞–Ω¬ª", correct: false },
    { text: "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: ¬´–≤ –¥–µ–Ω—å –í–∞–Ω¬ª", correct: false }
  ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âãø –≤—ã—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª, ¬´–Ω–µ –Ω–∞–¥–æ¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âãø ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–µ¬ª, –∞ ¬´–Ω–µ —Å–ª–µ–¥—É–µ—Ç¬ª.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

