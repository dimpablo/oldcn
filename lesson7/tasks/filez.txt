=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –ø—Ä–µ–¥–ª–æ–≥ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª –∏–ª–∏ ¬´–∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç‚Ä¶¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "Âèä (j√≠) ‚Äî –∫ –º–æ–º–µ–Ω—Ç—É, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç", correct: true },
      { text: "‰∫é (y√∫) ‚Äî –≤ (–º–µ—Å—Ç–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏)", correct: false },
      { text: "Ëá™ (z√¨) ‚Äî –æ—Ç, –Ω–∞—á–∏–Ω–∞—è —Å", correct: false },
      { text: "Ëá≥ (zh√¨) ‚Äî –¥–æ—Å—Ç–∏–≥–∞—Ç—å", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          <strong>Âèä j√≠</strong> ‚Äî —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–≥, –æ–∑–Ω–∞—á–∞—é—â–∏–π ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
          –í —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å <strong>Êúâ</strong> –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:<br>
          <em>–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å</em>.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Âèä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Ä–µ–º–µ–Ω–∏.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 7: –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –£—Ä–æ–∫–∞ 7. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò¬ª ‚Äî –≤–µ—Ä–Ω–æ: —ç—Ç–æ —Ü–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö ‰ª§ ‚Üí Âæû ‚Üí ‰ºê, –≥–¥–µ ¬´Âæû¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ", 
      correct: true 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ, –∞ ¬´ÂúüÊñπ¬ª ‚Äî —ç—Ç–æ ¬´–ø–ª–µ–º—è –¢—É¬ª, –∞ –Ω–µ ¬´Â§∑¬ª", 
      correct: false 
    },
    { 
      text: "¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–µ, ¬´‰ª§¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–ø—Ä–∏–∫–∞–∑–∞–ª¬ª", 
      correct: false 
    },
    { 
      text: "¬´–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: —Å—É–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—è ‚Äî ¬´Áéã¬ª, –∞ –Ω–µ ¬´‰æØÈ´ò¬ª", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –£—Ä–æ–∫–∞ 7, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ <strong>—Ü–µ–ø–æ—á–∫—É —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
        ‚Ä¢ <strong>‰ª§ l√¨ng</strong> ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
        ‚Ä¢ <strong>Âæû c√≥ng</strong> ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞¬ª (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ)<br>
        ‚Ä¢ <strong>‰ºê f√°</strong> ‚Äî ¬´–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤¬ª<br><br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—É–±—ä–µ–∫—Ç ‚Äî ¬´Áéã¬ª, –∞ –Ω–µ ¬´‰æØÈ´ò¬ª; ¬´Âæû¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞¬ª, –∞ –Ω–µ ¬´–≤–æ–∑–≥–ª–∞–≤–∏—Ç—å¬ª.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>ÁéãÂãøÂæûÊ¥óÈúá</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>Áôª‰∫∫‰∫îÂçÉÂæÅÂúüÊñπ</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É</label>
            <label><input type="radio" name="q1" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò</label>
            <label><input type="radio" name="q1" value="–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥">–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥</label>
            <label><input type="radio" name="q1" value="–ù–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ –ø—Ä–∏–∫–∞–∑–∞–ª–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—é –∏–¥—Ç–∏ –Ω–∞ –≤–æ–π–Ω—É">–ù–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ –ø—Ä–∏–∫–∞–∑–∞–ª–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—é –∏–¥—Ç–∏ –Ω–∞ –≤–æ–π–Ω—É</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÁéãÂãøÂæûÊ¥óÈúá</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w√°ng w√π c√≥ng x«ê zh√®n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏">–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏</label>
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏">–ü—Ä–∞–≤–∏—Ç–µ–ª—å —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏</label>
            <label><input type="radio" name="q2" value="–ü—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ß–∂—ç–Ω—é –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥">–ü—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ß–∂—ç–Ω—é –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥</label>
            <label><input type="radio" name="q2" value="–ß–∂—ç–Ω—å –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º">–ß–∂—ç–Ω—å –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">Áôª‰∫∫‰∫îÂçÉÂæÅÂúüÊñπ</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">dƒìng r√©n w«î qiƒÅn zhƒìng t«î fƒÅng</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –¢—É">–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –¢—É</label>
            <label><input type="radio" name="q3" value="–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –ø–æ—Å–µ–≤–∞">–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –ø–æ—Å–µ–≤–∞</label>
            <label><input type="radio" name="q3" value="–ü–ª–µ–º—è –¢—É —Å–æ–±–∏—Ä–∞–µ—Ç –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫">–ü–ª–µ–º—è –¢—É —Å–æ–±–∏—Ä–∞–µ—Ç –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫</label>
            <label><input type="radio" name="q3" value="–ü—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ –∏–¥—É—Ç –∫ –ø–ª–µ–º–µ–Ω–∏ –¢—É">–ü—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ –∏–¥—É—Ç –∫ –ø–ª–µ–º–µ–Ω–∏ –¢—É</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">l√¨ng y«î d√† jƒ´ y«ê y«ên c√≥ng x«ê zh√®n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏">–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏</label>
            <label><input type="radio" name="q4" value="–Æ–π –∏ –¶–∑–∏ –ø—Ä–∏–∫–∞–∑–∞–ª–∏Â∞π—É –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥">–Æ–π –∏ –¶–∑–∏ –ø—Ä–∏–∫–∞–∑–∞–ª–∏Â∞π—É –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥</label>
            <label><input type="radio" name="q4" value="–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥ –±–µ–∑Â∞π–∞">–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ –∏–¥—Ç–∏ –≤ –ø–æ—Ö–æ–¥ –±–µ–∑Â∞π–∞</label>
            <label><input type="radio" name="q4" value="Â∞π –ø–æ–≤–µ–ª–µ–ª –Æ–π –∏ –¶–∑–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º">Â∞π –ø–æ–≤–µ–ª–µ–ª –Æ–π –∏ –¶–∑–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò",
        q2: "–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏",
        q3: "–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –Ω–∞ –ø–ª–µ–º—è –¢—É",
        q4: "–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 7:<br>
                ‚Ä¢ –¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê<br>
                ‚Ä¢ ‰ª§ ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
                ‚Ä¢ Âæû ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞¬ª (–ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ)<br>
                ‚Ä¢ Áôª‰∫∫ ‚Äî ¬´—Å–æ–±—Ä–∞—Ç—å –ª—é–¥–µ–π¬ª<br>
                ‚Ä¢ Áúî ‚Äî ¬´–∏¬ª (–º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏)<br>
                ‚Ä¢ ‰ª• ‚Äî ¬´—Å¬ª (–≤–≤–æ–¥–∏—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ)
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 7</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 7</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ó–∞–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º–∞—Ö –£—Ä–æ–∫–∞ 7: <strong>—Ü–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong> –∏ —Å–æ—é–∑ <strong>‰ª• y«ê</strong>.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑</div>
    <div class="oracle-text">Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>‰ª§ ‚Üí Âæû ‚Üí ‰ºê</strong> ‚Äî —Ü–µ–ø–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π: –ø—Ä–∏–∫–∞–∑–∞—Ç—å ‚Üí —Å–ª–µ–¥–æ–≤–∞—Ç—å ‚Üí –ø–æ—Ö–æ–¥</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. ‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá</div>
    <div class="oracle-text">‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>‰ª•</strong> = ¬´—Å¬ª (–≤–≤–æ–¥–∏—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ). <strong>Áúî</strong> = ¬´–∏¬ª –º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏.</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –∏–¥—Ç–∏ —Å–ª–µ–¥–æ–º –∑–∞ —Ö–æ—É –ì–∞–æ, —á—Ç–æ–±—ã –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –ø–ª–µ–º—è –ò'],
    ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ, —Å–ª–µ–¥—É—è –∑–∞ —Ö–æ—É –ì–∞–æ, –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò']
];

const expected2 = [
    ['–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏'],
    ['–ü–æ–≤–µ–ª–µ—Ç—å –Æ–π –∏ –¶–∑–∏, —ÅÂ∞π–æ–º, –∏–¥—Ç–∏ —Å–ª–µ–¥–æ–º –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏'],
    ['–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –°–∏ –ß–∂—ç–Ω–µ–º']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ü—Ä–∞–≤–∏—Ç–µ–ª—å', '–ø—Ä–∏–∫–∞–∑–∞–ª', '–Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ', '—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞', '—Ö–æ—É –ì–∞–æ', '–≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤', '–ø–ª–µ–º–µ–Ω–∏ –ò', '–≤–æ–∑–≥–ª–∞–≤–∏—Ç—å', '—É—Ä–æ–∂–∞–π', '–¥–æ–∂–¥—å', '–∏', '—Å–æ–ª–Ω—Ü–µ', '–æ–Ω–∏', '–æ—Ö–æ—Ç–∏–ª–∏—Å—å', '–º–æ–ª–∏—Ç–≤–∞'];
const words2 = ['–ü—Ä–∏–∫–∞–∑–∞—Ç—å', '–Æ–π', '–∏', '–¶–∑–∏', '—Å', 'Â∞π–æ–º', '—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞', '–ß–∂—ç–Ω–µ–º', '–∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏', '–º—ã', '–ø–æ—à–ª–∏', '–Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫', '—Ü–∞—Ä—å', '–æ—Ç–ø—Ä–∞–≤–∏–ª', '–≤–µ—Å—Ç–Ω–∏–∫–∞', '–≤—á–µ—Ä–∞'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

    if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –£—Ä–æ–∫–∞ 7:<br>
            ‚Ä¢ <strong>–¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è<br>
            ‚Ä¢ <strong>‰ª• y«ê</strong> ‚Äî ¬´—Å¬ª, –≤–≤–æ–¥–∏—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ<br>
            ‚Ä¢ <strong>Áúî d√†</strong> ‚Äî —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞, –Ω–µ –≥–ª–∞–≥–æ–ª—ã
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤:';
        if (!isCorrect1) message += '<br>‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –∏–¥—É—Ç –ø–æ —Ü–µ–ø–æ—á–∫–µ: –ø—Ä–∏–∫–∞–∑–∞–ª ‚Üí —Å–ª–µ–¥–æ–≤–∞—Ç—å ‚Üí –ø–æ—Ö–æ–¥';
        if (!isCorrect2) message += '<br>‚Ä¢ ‰ª• = "—Å", —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ–≥–æ, –∫—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–û–¥–∏–Ω–æ—á–Ω–æ–µ vs –¶–µ–ø–æ—á–∫–∞: –£—Ä–æ–∫ 7</title>
</head>
<body>

<h2>–û–¥–∏–Ω–æ—á–Ω–æ–µ vs –¶–µ–ø–æ—á–∫–∞: –°–∫–∞–∑—É–µ–º—ã–µ –≤ –¥–µ–π—Å—Ç–≤–∏–∏</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–∑—É–µ–º–æ–µ vs –¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ —Å–∫–∞–∑—É–µ–º–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–º, –Ω–æ –∏ –æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å <strong>—Ü–µ–ø–æ—á–∫—É</strong>, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤ –∏ –º–∏—Å—Å–∏–π.</p>

        <p>üü¢ <strong>–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–∑—É–µ–º–æ–µ</strong> ‚Äî –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ:</p>
        <ul>
            <li>Áéã‰ª§Â©¶Â•Ω w√°ng l√¨ng f√π h«éo ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ¬ª</li>
            <li>–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º—ã—Å–ª, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</li>
        </ul>

        <p>üî¥ <strong>–¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong> ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π:</p>
        <ul>
            <li>Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑ w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠ ‚Äî ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò¬ª</li>
            <li>–¶–µ–ø–æ—á–∫–∞: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê (–ø—Ä–∏–∫–∞–∑–∞—Ç—å ‚Üí —Å–ª–µ–¥–æ–≤–∞—Ç—å ‚Üí –ø–æ—Ö–æ–¥)</li>
            <li>–í—Ç–æ—Ä–æ–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–∫–∞–∑—É–µ–º—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ ‚Äî –æ–Ω–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "Áôª‰∫∫‰∫îÂçÉ" ‚Üí üü¢ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ: —Å–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫)<br>
        "‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá" ‚Üí üî¥ (—Ü–µ–ø–æ—á–∫–∞: –ø—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –≠—Ç–∞ –¥–∏—Ö–æ—Ç–æ–º–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞:
        <ol>
            <li>–†–µ—á—å –æ <strong>–ø—Ä–∏–∫–∞–∑–∞—Ö</strong>, <strong>–ø–æ—Ö–æ–¥–∞—Ö</strong> –∏–ª–∏ <strong>–º–∏—Å—Å–∏—è—Ö</strong></li>
            <li>–ü–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—á–∞—Å—Ç–æ ‰ª§ –∏–ª–∏ Âëº) <strong>–ø–æ—Ä–æ–∂–¥–∞–µ—Ç</strong> –≤—Ç–æ—Ä–æ–µ</li>
            <li>–ù–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ ‚Äî –≤–º–µ—Å—Ç–æ ¬´—Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å¬ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ü–µ–ø–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π</li>
        </ol>
        –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –£—Ä–æ–∫–∞ 7.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Áéã‰ª§Â©¶Â•Ω", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–∑—É–µ–º–æ–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ¬ª ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" },
    { text: "Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê ‚Äî –ø—Ä–∏–∫–∞–∑–∞—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å, –ø–æ—Ö–æ–¥" },
    { text: "Áôª‰∫∫‰∫îÂçÉ", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ: ¬´–°–æ–±—Ä–∞—Ç—å –ø—è—Ç—å —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫¬ª ‚Äî –Ω–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è" },
    { text: "‰ª§ÁæΩÁúîÈõû‰ª•Â∞πÂæûÊ¥óÈúá", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞: ¬´–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Æ–π –∏ –¶–∑–∏ —ÅÂ∞π–æ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º –∏–∑ –ø–ª–µ–º–µ–Ω–∏ –°–∏¬ª" },
    { text: "ÁéãÂãøÂæûÊ¥óÈúá", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–∑—É–µ–º–æ–µ: ¬´–ü—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –ß–∂—ç–Ω–µ–º¬ª ‚Äî –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è" },
    { text: "Âëº‰ºêÂ∑•Êñπ", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞: ¬´–û—Ç–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑ ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ì—É–Ω¬ª ‚Äî –¥–≤–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö –ø–æ–¥—Ä—è–¥" },
    { text: "ÂæÅÂúüÊñπ", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ: ¬´–ü–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É¬ª ‚Äî –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ" },
    { text: "‰ª§Áï¢‰ª•Ë°Ü‰ºêÂ∑•Êñπ", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞: ¬´–ü—Ä–∏–∫–∞–∑–∞—Ç—å –ë–∏ —Å –æ–ø–æ–ª—á–µ–Ω–∏–µ–º –∏–¥—Ç–∏ –ø–æ—Ö–æ–¥–æ–º –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ì—É–Ω¬ª" },
    { text: "ÁôªÂ©¶Â¶å‰∏âÂçÉ", type: "direct", explanation: "–û–¥–∏–Ω–æ—á–Ω–æ–µ: ¬´–°–æ–±—Ä–∞—Ç—å —Ç—Ä—ë—Ö —Ç—ã—Å—è—á –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –Ω–µ–≤–µ—Å—Ç–∫–∏ –¶–∑–∏–Ω¬ª" },
    { text: "‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò", type: "chain", explanation: "–¶–µ–ø–æ—á–∫–∞: ¬´–ü—Ä–∏–∫–∞–∑–∞—Ç—å –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ¬ª ‚Äî –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">–û–¥–∏–Ω–æ—á–Ω–æ–µ</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">–¶–µ–ø–æ—á–∫–∞</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "chain") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏ —Ü–µ–ø–æ—á–µ—á–Ω—ã—Ö —Å–∫–∞–∑—É–µ–º—ã—Ö.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: —Ü–µ–ø–æ—á–∫–∞ —Å–∫–∞–∑—É–µ–º—ã—Ö ‚Äî –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs4;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs5;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰ª§ ‚Äî –ø—Ä–∏–∫–∞–∑–∞–ª</li>
      <li>Â©¶Â•Ω ‚Äî –Ω–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ</li>
      <li>Âæû ‚Äî –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å (–≤ –≤–æ–µ–Ω–Ω–æ–º –ø–æ—Ö–æ–¥–µ)</li>
      <li>‰ºê ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤</li>
      <li>ÂúüÊñπ ‚Äî –ø–ª–µ–º—è –¢—É</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ'];
    const allChars = [
      'Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ',
      'Âãø', 'Áôª', '‰∫∫', 'ÂæÅ', 'ÂçÉ', '‰∫î', 'Âë®', '‰æØ', 'È´ò', '‰∏ã', 'Âç±', 'Ê¥ó', 'Èúá'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 7</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 7 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", meaning: "–Ω–∏–∂–Ω–∏–π; —Å–Ω–∏–∑—É, –ø–æ–¥; –æ–ø—É—Å–∫–∞—Ç—å—Å—è" },
  { char: "Ë°Ü", meaning: "–º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª–ø–∞; —Å–æ–±—Å—Ç–≤. –ß–∂—É–Ω" },
  { char: "Èúá", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂—ç–Ω—å" },
  { char: "Âç±", meaning: "–æ–ø–∞—Å–Ω–æ—Å—Ç—å; —Å–æ–±—Å—Ç–≤. –í—ç–π" },
  { char: "ÁæΩ", meaning: "–ø–µ—Ä—å—è; —Å–æ–±—Å—Ç–≤. –Æ–π" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", meaning: "—Å–æ–±—Å—Ç–≤. –ß–∂–æ—É" },
  { char: "‰ª§", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å; –¥–æ–ø—É—Å–∫–∞—Ç—å; –Ω–∞—á–∞–ª—å–Ω–∏–∫; –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π; —Å–æ–±—Å—Ç–≤. –õ–∏–Ω" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Êúõ", meaning: "—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–¥–∞–ª–µ–∫–∞" },
  { char: "Â©¶", meaning: "–Ω–µ–≤–µ—Å—Ç–∫–∞" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", meaning: "—á–µ–ª–æ–≤–µ–∫" },
  { char: "‰πò", meaning: "–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–≤–æ–∑–∫–µ; —Å–≤—è–∑–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–µ–ª; —Å–æ–±—Å—Ç–≤. –ß—ç–Ω" },
  { char: "ÂçÉ", meaning: "—Ç—ã—Å—è—á–∞" },
  { char: "ÂæÅ", meaning: "–∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ö–æ–¥" },
  { char: "È´ò", meaning: "–≤—ã—Å–æ–∫–∏–π" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", meaning: "–∫—É—Ä–∏—Ü–∞; —Å–æ–±—Å—Ç–≤. –¶–∑–∏" },
  { char: "‰∏â", meaning: "—Ç—Ä–∏" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" },
  { char: "Âæû", meaning: "—Å–ª–µ–¥–æ–≤–∞—Ç—å; —Å–ª—É–∂. –ø—Ä–µ–¥–ª–æ–≥ –∏–∑" },
  { char: "Âëº", meaning: "–ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–≤–µ–ª–µ–≤–∞—Ç—å; –∫—Ä–∏—á–∞—Ç—å; —Ä—ã—á–∞—Ç—å" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", meaning: "–∫–æ–Ω–µ—Ü, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ" },
  { char: "Ê¥ó", meaning: "–º—ã—Ç—å—Å—è; —Å–æ–±—Å—Ç–≤. –°–∏" },
  { char: "Â¶å", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∑–∏–Ω" },
  { char: "‰∏Ä", meaning: "–æ–¥–∏–Ω" },
  { char: "Â∞π", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏; —Å–æ–±—Å—Ç–≤. –ò–Ω—å" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", meaning: "–≥—Ä–∞–±–∏—Ç—å, –Ω–∞–ø–∞–¥–∞—Ç—å" },
  { char: "Ëê¨", meaning: "–¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á" },
  { char: "ÂÄâ", meaning: "—Å–æ–±—Å—Ç–≤. –¶–∞–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–º–µ–Ω–∏)" },
  { char: "Áôª", meaning: "—Å–æ–±–∏—Ä–∞—Ç—å; —Å–∞–¥–∏—Ç—å—Å—è (–≤ –ø–æ–≤–æ–∑–∫—É), –≤—Ö–æ–¥–∏—Ç—å (–≤ –¥–æ–º)" },
  { char: "Â§∑", meaning: "—á—É–∂–µ–∑–µ–º–µ—Ü" }

];
pairs = pairs6;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs6

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs2

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs5

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task25.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs4

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task26.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –£—Ä–æ–∫–∞ 7 ‚Äî pinyin –∏–∑ dict_human.txt

// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "‰∏ã", pinyin: "xi√†" },
  { char: "Ë°Ü", pinyin: "zh√≤ng" },
  { char: "Èúá", pinyin: "zh√®n" },
  { char: "Âç±", pinyin: "wƒìi" },
  { char: "ÁæΩ", pinyin: "y«î" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âë®", pinyin: "zh≈çu" },
  { char: "‰ª§", pinyin: "l√¨ng" },
  { char: "Áôª", pinyin: "dƒìng" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "Â©¶", pinyin: "f√π" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "‰∫∫", pinyin: "r√©n" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "ÂçÉ", pinyin: "qiƒÅn" },
  { char: "ÂæÅ", pinyin: "zhƒìng" },
  { char: "È´ò", pinyin: "gƒÅo" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs4 = [
  { char: "Èõû", pinyin: "jƒ´" },
  { char: "‰∏â", pinyin: "sƒÅn" },
  { char: "Â§∑", pinyin: "y√≠" },
  { char: "Âæû", pinyin: "c√≥ng" },
  { char: "Âëº", pinyin: "h≈´" }
];

// –ü—è—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs5 = [
  { char: "Áï¢", pinyin: "b√¨" },
  { char: "Ê¥ó", pinyin: "x«ê" },
  { char: "Â¶å", pinyin: "j«êng" },
  { char: "‰∏Ä", pinyin: "yƒ´" },
  { char: "Â∞π", pinyin: "y«ên" }
];

// –®–µ—Å—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs6 = [
  { char: "ÂØá", pinyin: "k√≤u" },
  { char: "Êúõ", pinyin: "w√†ng" },
  { char: "‰πò", pinyin: "ch√©ng" },
  { char: "Ëê¨", pinyin: "w√†n" },
  { char: "ÂÄâ", pinyin: "cƒÅng" }

];
pairs = pairs3

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰ª§ ‚Äî –ø—Ä–∏–∫–∞–∑–∞–ª</li>
      <li>Â©¶Â•Ω ‚Äî –Ω–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ</li>
      <li>Âæû ‚Äî –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ</li>
      <li>‰ºê ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤</li>
      <li>ÂúüÊñπ ‚Äî –ø–ª–µ–º—è –¢—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É." ‚Üí Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ
    const expected = ['Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
    const allChars = [
      'Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ',
      'Âãø', 'Áôª', '‰∫∫', 'ÂæÅ', 'ÂçÉ', '‰∫î', 'Âë®', '‰æØ', 'È´ò', '‰∏ã', 'Âç±', 'Ê¥ó', 'Èúá', 'Áï¢', 'ÁæΩ', 'Èõû', 'Â∞π', 'ÂÄâ', 'ÂØá'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰ª§ ‚Äî –ø—Ä–∏–∫–∞–∑–∞–ª</li>
      <li>Â©¶Â•Ω ‚Äî –Ω–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ</li>
      <li>Âæû ‚Äî –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ</li>
      <li>‰ºê ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤</li>
      <li>ÂúüÊñπ ‚Äî –ø–ª–µ–º—è –¢—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É." ‚Üí Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ
    const expected = ['Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–∏–∑ –£—Ä–æ–∫–∞ 7)
    const allChars = [
      'Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ',
      '‰∏ã', 'Ë°Ü', 'Èúá', 'Âç±', 'ÁæΩ', 'Âë®', 'Áôª', 'ÂçÉ',
      'ÂæÅ', 'È´ò', 'Èõû', '‰∏â', 'Â§∑', 'Âëº', 'Áï¢', 'Ê¥ó',
      'Â¶å', '‰∏Ä', 'Â∞π', 'ÂØá', 'Ëê¨', 'ÂÄâ', 'Êúõ', '‰πò'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áéã ‚Äî –ü—Ä–∞–≤–∏—Ç–µ–ª—å</li>
      <li>‰ª§ ‚Äî –ø—Ä–∏–∫–∞–∑–∞–ª</li>
      <li>Â©¶Â•Ω ‚Äî –Ω–µ–≤–µ—Å—Ç–∫–∞ –•–∞–æ</li>
      <li>Âæû ‚Äî –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å, —Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ</li>
      <li>‰ºê ‚Äî –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤</li>
      <li>ÂúüÊñπ ‚Äî –ø–ª–µ–º—è –¢—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É." ‚Üí Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ
    const expected = ['Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è (–∏–∑ –£—Ä–æ–∫–∞ 7)
    const allChars = [
      'Áéã', '‰ª§', 'Â©¶Â•Ω', 'Âæû', '‰ºê', 'ÂúüÊñπ',
      '‰∏ã', 'Ë°Ü', 'Èúá', 'Âç±', 'ÁæΩ', 'Âë®', 'Áôª', 'ÂçÉ',
      'ÂæÅ', 'È´ò', 'Èõû', '‰∏â', 'Â§∑', 'Âëº', 'Áï¢', 'Ê¥ó',
      'Â¶å', '‰∏Ä', 'Â∞π', 'ÂØá', 'Ëê¨', 'ÂÄâ', 'Êúõ', '‰πò'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áéã‰ª§Â©¶Â•ΩÂæû‰ºêÂúüÊñπ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ.", correct: false },
      { text: "–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Ü–µ–ø–æ—á–∫–∏ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
          <em>‰ª§</em> (–ø—Ä–∏–∫–∞–∑–∞—Ç—å) ‚Üí <em>Âæû</em> (—Å–ª–µ–¥–æ–≤–∞—Ç—å) ‚Üí <em>‰ºê</em> (–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤).
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‰ª§, Âæû –∏ ‰ºê.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–ø–æ—á–∫—É —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ.", correct: false },
      { text: "–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Ü–µ–ø–æ—á–∫–∏ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
          ‚Ä¢ <strong>‰ª§ l√¨ng</strong> ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>Âæû c√≥ng</strong> ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>‰ºê f√°</strong> ‚Äî ¬´–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤¬ª<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‰ª§, Âæû –∏ ‰ºê.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–ø–æ—á–∫—É —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ.", correct: false },
      { text: "–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Ü–µ–ø–æ—á–∫–∏ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
          ‚Ä¢ <strong>‰ª§ l√¨ng</strong> ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>Âæû c√≥ng</strong> ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>‰ºê f√°</strong> ‚Äî ¬´–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤¬ª<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‰ª§, Âæû –∏ ‰ºê.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 7 ‚Äî –í–æ–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏ –ø—Ä–∏–∫–∞–∑—ã</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´Áéã‰ª§Â©¶Â•ΩÂæû‰æØÈ´ò‰ºêÂ§∑¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–ø–æ—á–∫—É —Å–∫–∞–∑—É–µ–º—ã—Ö: ‰ª§ ‚Üí Âæû ‚Üí ‰ºê.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">w√°ng l√¨ng f√π h«éo c√≥ng h√≥u gƒÅo f√° y√≠</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ –≤–æ–∑–≥–ª–∞–≤–∏—Ç—å –ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –¢—É.", correct: false },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ—É –ì–∞–æ –≤ –ø–æ—Ö–æ–¥–µ –ø—Ä–æ—Ç–∏–≤ –ø–ª–µ–º–µ–Ω–∏ –ò.", correct: true },
      { text: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ö–æ–¥–µ.", correct: false },
      { text: "–•–æ—É –ì–∞–æ –ø–æ–≤–µ–ª–µ–ª –Ω–µ–≤–µ—Å—Ç–∫–µ –•–∞–æ —Å–æ–±—Ä–∞—Ç—å –≤–æ–π—Å–∫–æ.", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä <strong>—Ü–µ–ø–æ—á–∫–∏ —Å–∫–∞–∑—É–µ–º—ã—Ö</strong>:<br>
          ‚Ä¢ <strong>‰ª§ l√¨ng</strong> ‚Äî ¬´–ø—Ä–∏–∫–∞–∑–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>Âæû c√≥ng</strong> ‚Äî ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å¬ª<br>
          ‚Ä¢ <strong>‰ºê f√°</strong> ‚Äî ¬´–ø–æ—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤¬ª<br>
          –¢–∞–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–∞–∑–æ–≤.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‰ª§, Âæû –∏ ‰ºê.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

