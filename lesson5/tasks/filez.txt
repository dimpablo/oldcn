=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>
</head>
<body>
<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —É—Ä–æ–∫–∞ 4!</p>
</div>
<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>
<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>
<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  function sendResult(success, message) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
  }
  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = ''; // —Å–±—Ä–æ—Å
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');
    // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }
  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    setTimeout(() => {
      splashScreen.style.display = 'none';
      characterDiv.style.display = 'block';
      const char = window.location.hash.slice(1);
      if (!char) {
        console.warn("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ –≤ —Ö—ç—à–µ");
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ");
        return;
      }
      const writer = HanziWriter.create('character-target-div', char, {
        width: 300,
        height: 300,
        showCharacter: false,
        showOutline: false,
        showHintAfterMisses: 1,
        highlightOnComplete: false,
        padding: 5
      });
      // –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
      writer.quiz({
        leniency: 2.0,
        onCorrectStroke: function(strokeData) {
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ö–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          // flashScreen('success'); // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–∏–≥–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
        },
        onMistake: function(strokeData) {
          console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
          flashScreen('error'); // üî¥ –ö—Ä–∞—Å–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        },
        onComplete: function(summaryData) {
          console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
          flashScreen('success'); // üü¢ –ó–µ–ª—ë–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
          sendResult(true, "–ò–µ—Ä–æ–≥–ª–∏—Ñ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ");
        }
      });
    }, 1000);
  };
</script>
<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>
</body>
</html>


=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ß—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–≥ Ëá™ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π —Å–≤–µ—Ç–∞?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Êúâ‰æÜËâ±Ëá™Ë•ø¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">y«íu l√°i jiƒÅn z√¨ xƒ´</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  // ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è options
  const options = [
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–Ω–µ—á–Ω—ã–π –ø—É–Ω–∫—Ç: ¬´–ë–µ–¥–∞ —É—à–ª–∞ –Ω–∞ –∑–∞–ø–∞–¥¬ª", correct: false },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ¬´–ë–µ–¥–∞ –Ω–∞ –∑–∞–ø–∞–¥–µ¬ª", correct: false },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ¬´–ë–µ–¥–∞ –ø—Ä–∏—à–ª–∞ –° –∑–∞–ø–∞–¥–∞¬ª", correct: true },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–µ–º—è: ¬´–ë–µ–¥–∞ –ø—Ä–∏—à–ª–∞ —Å –∑–∞—Ö–æ–¥–æ–º —Å–æ–ª–Ω—Ü–∞¬ª", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º options
    const container = document.getElementById("answers"); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    if (!container) {
      console.error("–≠–ª–µ–º–µ–Ω—Ç #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct;

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º resultId
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ö–∞–∫–æ–π –æ—Ç—Ç–µ–Ω–æ–∫ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —É –≥–ª–∞–≥–æ–ª–∞ Âëä –≤ –≤–æ–µ–Ω–Ω—ã—Ö –¥–æ–Ω–µ—Å–µ–Ω–∏—è—Ö?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â≠êÂïÜÂëäÊõ∞: ÊòîÁî≤Ëæ∞ÊñπÂæÅ‰∫éËáø¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">Z«ê ShƒÅng g√†o yuƒì: xƒ´ ji«é ch√©n fƒÅng zhƒìng y√∫ ChƒÅ</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  // ‚úÖ –¢–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è options
  const options = [
    { text: "–ú–æ–ª–∏—Ç—å—Å—è, –ø—Ä–æ—Å–∏—Ç—å: ¬´—Ü–∑—ã –®–∞–Ω –º–æ–ª–∏–ª—Å—è¬ª", correct: false },
    { text: "–ü—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å: ¬´—Ü–∑—ã –®–∞–Ω –ø—Ä–∏–∫–∞–∑–∞–ª¬ª", correct: false },
    { text: "–°–ø—Ä–∞—à–∏–≤–∞—Ç—å, –≥–∞–¥–∞—Ç—å: ¬´—Ü–∑—ã –®–∞–Ω —Å–ø—Ä–æ—Å–∏–ª¬ª", correct: false },
    { text: "–î–æ–∫–ª–∞–¥—ã–≤–∞—Ç—å, –¥–æ–Ω–æ—Å–∏—Ç—å: ¬´—Ü–∑—ã –®–∞–Ω –¥–æ–ª–æ–∂–∏–ª¬ª", correct: true }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º options
    const container = document.getElementById("answers"); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    if (!container) {
      console.error("–≠–ª–µ–º–µ–Ω—Ç #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º resultId
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –¥—Ä–µ–≤–Ω—é—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å—á—ë—Ç–∞?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰øò‰∫∫ÂçÅÊúâ‰∫î‰∫∫¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">f√∫ r√©n sh√≠ y√≤u w«î r√©n</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  // ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ options5 ‚Üí options
  const options = [
    { text: "¬´–í–∑—è—Ç–æ –≤ –ø–ª–µ–Ω 15 —á–µ–ª–æ–≤–µ–∫¬ª (10 + 5)", correct: true },
    { text: "¬´–í–∑—è—Ç–æ –≤ –ø–ª–µ–Ω 50 —á–µ–ª–æ–≤–µ–∫¬ª (10 * 5)", correct: false },
    { text: "¬´–í–∑—è—Ç–æ –≤ –ø–ª–µ–Ω 10 –∏–ª–∏ 5 —á–µ–ª–æ–≤–µ–∫¬ª (10 –∏–ª–∏ 5)", correct: false },
    { text: "¬´–í–∑—è—Ç–æ –≤ –ø–ª–µ–Ω 105 —á–µ–ª–æ–≤–µ–∫¬ª (100 + 5)", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º options
    const container = document.getElementById("answers"); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–∞–∂–µ –µ—Å–ª–∏ containerId –∏ optionsArray –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ö–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–ø–æ–ª–Ω—è–µ—Ç —á–∞—Å—Ç–∏—Ü–∞ ‰∫¶ –≤ —Ç–µ–∫—Å—Ç–µ?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Â∑•Êñπ‰∫¶‰æµÊàëË•øÈÑôÁî∞¬ª ... ¬´ÂõõÊó•Â∫öÁî≥‰∫¶Êúâ‰æÜËâ±Ëá™Âåó¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">G≈çng fƒÅng y√¨ qƒ´n w«í xƒ´ b«ê ti√°n... s√¨ r√¨ gƒìng shƒìn y√¨ y«íu l√°i jiƒÅn z√¨ bƒõi</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  // ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ options6 ‚Üí options
  const options = [
    { text: "–£—Å–∏–ª–∏–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ: ¬´–ò –ø–ª–µ–º—è –ì—É–Ω —Å–æ–≤—Å–µ–º –Ω–µ –Ω–∞–ø–∞–ª–æ...¬ª", correct: false },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É: ¬´–ò–ª–∏ –ø–ª–µ–º—è –ì—É–Ω –Ω–∞–ø–∞–ª–æ...¬ª", correct: false },
    { text: "–í–≤–æ–¥–∏—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ: ¬´–ü–ª–µ–º—è –ì—É–Ω –∏ –Ω–∞–ø–∞–ª–æ...¬ª", correct: false },
    { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: ¬´–ü–ª–µ–º—è –ì—É–Ω –¢–ê–ö–ñ–ï –Ω–∞–ø–∞–ª–æ...¬ª", correct: true }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º options
    const container = document.getElementById("answers"); // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
    if (!container) {
      console.error("–≠–ª–µ–º–µ–Ω—Ç #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º resultId
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<title>–£—Ä–æ–∫ 4 ‚Äî –ü—Ä–µ–¥–ª–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</title>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>

<div class="grid">
<div class="cell" onclick="openModal('q1')">
<strong>Ëá™‰ªä</strong>
<span class="status" id="status-q1">?</span>
</div>
<div class="cell" onclick="openModal('q2')">
<strong>Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</strong>
<span class="status" id="status-q2">?</span>
</div>
<div class="cell" onclick="openModal('q3')">
<strong>Ëá™‰∏äÁî≤</strong>
<span class="status" id="status-q3">?</span>
</div>
<div class="cell" onclick="openModal('q4')">
<strong>Êó¨Èõ®</strong>
<span class="status" id="status-q4">?</span>
</div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
<div class="modal-content">
<div class="modal-header">Ëá™‰ªä</div>
<div class="pinyin-container">
<button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
<div class="pinyin-text">z√¨ jƒ´n</div>
</div>
<div class="options">
<label><input type="radio" name="q1" value="–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è">–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è</label>
<label><input type="radio" name="q1" value="–¥–æ —Å–µ–≥–æ–¥–Ω—è">–¥–æ —Å–µ–≥–æ–¥–Ω—è</label>
<label><input type="radio" name="q1" value="–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è">–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è</label>
<label><input type="radio" name="q1" value="–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è">–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è</label>
</div>
<button onclick="closeModal('q1')">OK</button>
</div>
</div>

<div id="modal-q2" class="modal">
<div class="modal-content">
<div class="modal-header">Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
<div class="pinyin-container">
<button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
<div class="pinyin-text">z√¨ jƒ´n zh√¨ y√∫ ji«é ch√©n</div>
</div>
<div class="options">
<label><input type="radio" name="q2" value="–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω">–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω</label>
<label><input type="radio" name="q2" value="—Å–µ–≥–æ–¥–Ω—è –∏ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">—Å–µ–≥–æ–¥–Ω—è –∏ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
<label><input type="radio" name="q2" value="–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω">–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω</label>
<label><input type="radio" name="q2" value="—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
</div>
<button onclick="closeModal('q2')">OK</button>
</div>
</div>

<div id="modal-q3" class="modal">
<div class="modal-content">
<div class="modal-header">Ëá™‰∏äÁî≤</div>
<div class="pinyin-container">
<button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
<div class="pinyin-text">z√¨ sh√†ng ji«é</div>
</div>
<div class="options">
<label><input type="radio" name="q3" value="–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
<label><input type="radio" name="q3" value="–ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
<label><input type="radio" name="q3" value="–¥–æ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–¥–æ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
<label><input type="radio" name="q3" value="–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è">–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è</label>
</div>
<button onclick="closeModal('q3')">OK</button>
</div>
</div>

<div id="modal-q4" class="modal">
<div class="modal-content">
<div class="modal-header">Êó¨Èõ®</div>
<div class="pinyin-container">
<button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
<div class="pinyin-text">x√∫n y«î</div>
</div>
<div class="options">
<label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã">–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã</label>
<label><input type="radio" name="q4" value="–¥–æ–∂–¥—å —Å–µ–≥–æ–¥–Ω—è">–¥–æ–∂–¥—å —Å–µ–≥–æ–¥–Ω—è</label>
<label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –≤ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">–¥–æ–∂–¥—å –≤ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
<label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–¥–æ–∂–¥—å –ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
</div>
<button onclick="closeModal('q4')">OK</button>
</div>
</div>

<script>
const correctAnswers = {
q1: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è",
q2: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω",
q3: "–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è",
q4: "–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã"
};

let userAnswers = { q1: null, q2: null, q3: null, q4: null };

function openModal(id) {
document.getElementById(`modal-${id}`).style.display = "flex";
}

function closeModal(id) {
const selected = document.querySelector(`input[name="${id}"]:checked`);
if (selected) {
userAnswers[id] = selected.value;
document.getElementById(`status-${id}`).textContent = "‚úì";
document.getElementById(`status-${id}`).style.color = "green";
}
document.getElementById(`modal-${id}`).style.display = "none";
}

function checkAll() {
const resultEl = document.getElementById("result");
const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

if (!allAnswered) {
resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
return;
}

let correctCount = 0;
for (const id in correctAnswers) {
if (userAnswers[id] === correctAnswers[id]) correctCount++;
}

if (correctCount === 4) {
resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
sendResult(true);
} else {
const wrong = 4 - correctCount;
resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
}
}

function sendResult(success, message) {
window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
}

window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>



=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 4</title>

</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 4</h2>

<div class="instructions">
<p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
<p>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –£—Ä–æ–∫–∞ 4.</p>
<p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "Ëá™...Ëá≥‰∫é..." –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è!</em></p>
</div>

<div class="task-container">
<div class="task-title">1. Ëá™‰ªä</div>
<div class="oracle-text">Ëá™‰ªä</div>
<div id="word-pool1" class="word-pool"></div>
<div id="drop-area1" class="drop-area"></div>
<div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
<p>üí° –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç <strong>–ø—Ä–µ–¥–ª–æ–≥ Ëá™</strong> –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ <strong>"–Ω–∞—á–∏–Ω–∞—è —Å"</strong></p>
</div>
</div>

<div class="task-container">
<div class="task-title">2. Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
<div class="oracle-text">Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
<div id="word-pool2" class="word-pool"></div>
<div id="drop-area2" class="drop-area"></div>
<div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
<p>üí° –ó–¥–µ—Å—å –≤–∞–∂–Ω–æ <strong>–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é...</strong> –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫</p>
</div>
</div>

<div class="task-container">
<div class="task-title">3. Ëá™‰∏äÁî≤</div>
<div class="oracle-text">Ëá™‰∏äÁî≤</div>
<div id="word-pool3" class="word-pool"></div>
<div id="drop-area3" class="drop-area"></div>
<div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
<p>üí° –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ <strong>Ëá™</strong> –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å –∏–º–µ–Ω–∞–º–∏ –ø—Ä–µ–¥–∫–æ–≤</p>
</div>
</div>

<div class="task-container">
<div class="task-title">4. Êó¨Èõ®</div>
<div class="oracle-text">Êó¨Èõ®</div>
<div id="word-pool4" class="word-pool"></div>
<div id="drop-area4" class="drop-area"></div>
<div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
<p>üí° –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è <strong>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</strong></p>
</div>
</div>

<div class="controls">
<button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è'],
['–æ—Ç', '—Å–µ–≥–æ–¥–Ω—è', '–∏', '–¥–æ'],
['—Å', '—Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ', '–¥–Ω—è']
];

const expected2 = [
['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω'],
['—Å', '—Å–µ–≥–æ–¥–Ω—è', '–ø–æ', '–¥–µ–Ω—å', '—Ü–∑—è-—á–µ–Ω'],
['–æ—Ç', '—Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ', '–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω']
];

const expected3 = [
['–Ω–∞—á–∏–Ω–∞—è', '—Å', '–í–µ—Ä—Ö–Ω–µ–≥–æ', '–¶–∑—è'],
['—Å', '–í–µ—Ä—Ö–Ω–µ–≥–æ', '–¶–∑—è'],
['–æ—Ç', '–í–µ—Ä—Ö–Ω–µ–≥–æ', '–¶–∑—è', '–∏', '–¥–∞–ª–µ–µ']
];

const expected4 = [
['–¥–æ–∂–¥—å', '–±—É–¥–µ—Ç', '–∏–¥—Ç–∏', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ–∫–∞–¥—ã'],
['–¥–æ–∂–¥—å', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ—Å—è—Ç–∏', '–¥–Ω–µ–π'],
['–¥–æ–∂–¥—å', '–Ω–∞', '–ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏', '–¥–µ–∫–∞–¥—ã']
];

const words1 = ['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è', '–ø–æ—Å–ª–µ', '—Å–µ–π—á–∞—Å', '–≤', '—ç—Ç–æ—Ç', '–¥–µ–Ω—å', '–¥–æ', '–∏–∑', '–ø–æ—Å–ª–µ', '—ç—Ç–æ–≥–æ'];
const words2 = ['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω', '–ø–æ—Å–ª–µ', '—ç—Ç–æ–≥–æ', '–º–µ—Å—è—Ü–∞', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '—ç—Ç–æ–≥–æ', '–≤—Ä–µ–º–µ–Ω–∏'];
const words3 = ['–Ω–∞—á–∏–Ω–∞—è', '—Å', '–í–µ—Ä—Ö–Ω–µ–≥–æ', '–¶–∑—è', '–ø–æ—Å–ª–µ', '—ç—Ç–æ–≥–æ', '–ø—Ä–µ–¥–∫–∞', '–≤', '—ç–ø–æ—Ö—É', '—ç—Ç–æ–≥–æ', '–ø—Ä–∞–≤–∏—Ç–µ–ª—è'];
const words4 = ['–¥–æ–∂–¥—å', '–±—É–¥–µ—Ç', '–∏–¥—Ç–∏', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ–∫–∞–¥—ã', '—Å–µ–π—á–∞—Å', '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ', '—ç—Ç–æ–≥–æ', '–º–µ—Å—è—Ü–∞', '—É—Ç—Ä–æ–º', '–≤–µ—á–µ—Ä–æ–º'];

const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const wordPool3 = document.getElementById('word-pool3');
const wordPool4 = document.getElementById('word-pool4');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const dropArea3 = document.getElementById('drop-area3');
const dropArea4 = document.getElementById('drop-area4');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
function shuffleArray(array) {
const arr = [...array];
for (let i = arr.length - 1; i > 0; i--) {
const j = Math.floor(Math.random() * (i + 1));
[arr[i], arr[j]] = [arr[j], arr[i]];
}
return arr;
}

// –°–æ–∑–¥–∞—ë–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤
function createWordElements(words, pool, dropArea) {
const shuffledWords = shuffleArray(words); // üîÅ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
return shuffledWords.map(word => {
const box = document.createElement('div');
box.className = 'word-box';
box.textContent = word;

box.onclick = () => {
// –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ drop-area
box.remove();
dropArea.appendChild(box);
updatePlaceholder(dropArea); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
};

return box;
});
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å [–ø—É—Å—Ç–æ]
function updatePlaceholder(dropArea) {
const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];
let wordElements3 = [];
let wordElements4 = [];

function init() {
// –û—á–∏—â–∞–µ–º
wordPool1.innerHTML = '';
wordPool2.innerHTML = '';
wordPool3.innerHTML = '';
wordPool4.innerHTML = '';
dropArea1.innerHTML = '';
dropArea2.innerHTML = '';
dropArea3.innerHTML = '';
dropArea4.innerHTML = '';
resultEl.style.display = 'none';

// –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
wordElements1 = createWordElements(words1, wordPool1, dropArea1);
wordElements2 = createWordElements(words2, wordPool2, dropArea2);
wordElements3 = createWordElements(words3, wordPool3, dropArea3);
wordElements4 = createWordElements(words4, wordPool4, dropArea4);

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª—ã
wordElements1.forEach(el => wordPool1.appendChild(el));
wordElements2.forEach(el => wordPool2.appendChild(el));
wordElements3.forEach(el => wordPool3.appendChild(el));
wordElements4.forEach(el => wordPool4.appendChild(el));

// –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
updatePlaceholder(dropArea1);
updatePlaceholder(dropArea2);
updatePlaceholder(dropArea3);
updatePlaceholder(dropArea4);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤ drop-area: –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—É–ª
dropArea1.addEventListener('click', (e) => {
if (e.target.classList.contains('word-box')) {
const wordBox = e.target;
wordBox.remove();
wordPool1.appendChild(wordBox);
updatePlaceholder(dropArea1);
}
});

dropArea2.addEventListener('click', (e) => {
if (e.target.classList.contains('word-box')) {
const wordBox = e.target;
wordBox.remove();
wordPool2.appendChild(wordBox);
updatePlaceholder(dropArea2);
}
});

dropArea3.addEventListener('click', (e) => {
if (e.target.classList.contains('word-box')) {
const wordBox = e.target;
wordBox.remove();
wordPool3.appendChild(wordBox);
updatePlaceholder(dropArea3);
}
});

dropArea4.addEventListener('click', (e) => {
if (e.target.classList.contains('word-box')) {
const wordBox = e.target;
wordBox.remove();
wordPool4.appendChild(wordBox);
updatePlaceholder(dropArea4);
}
});

function getWords(dropArea) {
return Array.from(dropArea.children)
.filter(el => el.classList.contains('word-box'))
.map(el => el.textContent.trim());
}

checkBtn.addEventListener('click', () => {
const current1 = getWords(dropArea1);
const current2 = getWords(dropArea2);
const current3 = getWords(dropArea3);
const current4 = getWords(dropArea4);

const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
const isCorrect2 = expected2.some(option => arraysEqual(current2, option));
const isCorrect3 = expected3.some(option => arraysEqual(current3, option));
const isCorrect4 = expected4.some(option => arraysEqual(current4, option));

if (isCorrect1 && isCorrect2 && isCorrect3 && isCorrect4) {
resultEl.innerHTML = `‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –£—Ä–æ–∫–∞ 4: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "Ëá™...Ëá≥‰∫é..." –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è.`;
resultEl.className = 'message success';
resultEl.style.display = 'block';
sendResult(true);
} else {
let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:';
if (!isCorrect1) message += '<br>‚Ä¢ –í –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏: –ø—Ä–µ–¥–ª–æ–≥ Ëá™ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ "–Ω–∞—á–∏–Ω–∞—è —Å"';
if (!isCorrect2) message += '<br>‚Ä¢ –í–æ –≤—Ç–æ—Ä–æ–º: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é... –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫';
if (!isCorrect3) message += '<br>‚Ä¢ –í —Ç—Ä–µ—Ç—å–µ–º: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Ëá™ —Å –∏–º–µ–Ω–∞–º–∏ –ø—Ä–µ–¥–∫–æ–≤';
if (!isCorrect4) message += '<br>‚Ä¢ –í —á–µ—Ç–≤–µ—Ä—Ç–æ–º: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è (Êó¨)';

resultEl.innerHTML = message;
resultEl.className = 'message error';
resultEl.style.display = 'block';
sendResult(false, message);
}
});

resetBtn.addEventListener('click', init);

function arraysEqual(a, b) {
if (a.length !== b.length) return false;
for (let i = 0; i < a.length; i++) {
if (a[i] !== b[i]) return false;
}
return true;
}

function sendResult(success, message) {
window.parent.postMessage({
type: "TASK_RESULT",
success: !!success,
message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
}, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<title>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ vs –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</title>

</head>
<body>

<h2>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ vs –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</h2>

<div class="instructions">
<div class="instructions-header" onclick="toggleInstructions()">
<strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
<span class="arrow">‚ñº</span>
</div>
<div class="instructions-content" style="display:none">
<p><strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ vs –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</strong></p>
<p>–í –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ –¥–≤–∞ —Ç–∏–ø–∞:</p>

<p>üü¢ <strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏</strong> (–∑–µ–ª–µ–Ω—ã–π):</p>
<ul>
<li>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é... (z√¨... zh√¨ y√∫) = "–Ω–∞—á–∏–Ω–∞—è —Å... –∏ –¥–æ..."</li>
<li>–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å <em>"—Å –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?"</em></li>
<li>–í —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</li>
</ul>

<p>üî¥ <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</strong> (–∫—Ä–∞—Å–Ω—ã–π):</p>
<ul>
<li>–û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞–∑—É–µ–º—ã–º</li>
<li>–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å <em>"–∫–∞–∫ –¥–æ–ª–≥–æ?"</em></li>
<li>–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</li>
</ul>

<p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
"Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞" ‚Üí üü¢ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)<br>
"Êó¨Èõ®" ‚Üí üî¥ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)</p>

<p><strong>–í–∞–∂–Ω–æ!</strong><br>
–í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤–µ—Å—å —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä, "Ëá™‰ªäËá≥Â∑±ÈÖâÈõ®" –æ–∑–Ω–∞—á–∞–µ—Ç "–î–æ–∂–¥—å –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –ø–æ –¥–µ–Ω—å —Ü–∑–∏-—é", –∞ –Ω–µ "–î–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤–µ—Å—å —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥".</p>

<p>–í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–æ–≤–æ—Ä–∏—Ç—Å—è, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, "Êó¨Èõ®" –æ–∑–Ω–∞—á–∞–µ—Ç "–î–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã".</p> </div>
</div>


<script>
function toggleInstructions() {
const header = document.querySelector('.instructions-header');
const content = document.querySelector('.instructions-content');
const isHidden = content.style.display === 'none';

content.style.display = isHidden ? 'block' : 'none';
header.classList.toggle('collapsed', !isHidden);

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è iframe (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä)
setTimeout(() => {
window.parent.postMessage({
type: "UPDATE_HEIGHT",
height: document.body.scrollHeight
}, "*");
}, 100);
}
</script>

<div class="columns">
<div id="column1" class="column"></div>
<div id="column2" class="column"></div>
</div>

<div class="controls">
<button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
{ text: "Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "Êó¨Èõ®", type: "duration", explanation: "–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" },
{ text: "Ëá™‰ªäËá≥‰∫éÁô∏‰∫•", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è –≥—É–π-—Ö–∞–π (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "Êó¨‰∫°Á¶ç", type: "duration", explanation: "–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" },
{ text: "Ëá™Â£¨ÂØÖËá≥‰∫éÁî≤Ëæ∞", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å –¥–Ω—è –∂—ç–Ω—å-–∏–Ω—å –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "‰æÜÁî≤Â≠ê", type: "duration", explanation: "–Ω–∞—Å—Ç—É–ø–∞—é—â–∞—è –¥–µ–∫–∞–¥–∞ –¥–æ –¥–Ω—è —Ü–∑—è-—Ü–∑—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" },
{ text: "Ëá™‰∏äÁî≤Ëá≥‰∫é‰∏≠‰∏Å", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è –∏ –¥–æ –°—Ä–µ–¥–Ω–µ–≥–æ –î–∏–Ω (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "‰ªäÂÖ≠Êúà", type: "duration", explanation: "–≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —à–µ—Å—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" },
{ text: "Ëá™‰ªäËá≥‰∫é‰∏ÅÂ∑≥", type: "time-frame", explanation: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è –¥–∏–Ω-—Å—ã (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)" },
{ text: "Áîü‰∏ÉÊúà", type: "duration", explanation: "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–≥–æ —Å–µ–¥—å–º–æ–≥–æ –º–µ—Å—è—Ü–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)" }
];

function shuffleArray(array) {
for (let i = array.length - 1; i > 0; i--) {
const j = Math.floor(Math.random() * (i + 1));
[array[i], array[j]] = [array[j], array[i]];
}
return array;
}

function createSentenceElement(sentence, index) {
const item = document.createElement('div');
item.className = 'sentence-item';
item.dataset.index = index;

item.innerHTML = `
<div class="oracle-text">${sentence.text}</div>
<div class="toggle-container">
<span class="toggle-text">—Ä–∞–º–∫–∏</span>
<label class="toggle-switch">
<input type="checkbox">
<span class="slider"></span>
</label>
<span class="toggle-text">–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</span>
</div>
`;

return item;
}

function init() {
const shuffled = shuffleArray([...sentences]);
const column1 = document.getElementById('column1');
const column2 = document.getElementById('column2');

column1.innerHTML = '';
column2.innerHTML = '';
document.getElementById('result').style.display = 'none';

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π
document.querySelectorAll('.sentence-item').forEach(el => {
el.classList.remove('correct', 'incorrect');
});

shuffled.slice(0, 5).forEach((s, i) => {
const el = createSentenceElement(s, i);
column1.appendChild(el);
});

shuffled.slice(5).forEach((s, i) => {
const el = createSentenceElement(s, i + 5);
column2.appendChild(el);
});
}

function checkAnswers() {
const items = document.querySelectorAll('.sentence-item');
let allCorrect = true;

items.forEach(item => {
const index = item.dataset.index;
const input = item.querySelector('input');
const expectedType = sentences[index].type;
const isCorrect = (input.checked && expectedType === "duration") ||
(!input.checked && expectedType === "time-frame");

item.classList.remove('correct', 'incorrect');
if (isCorrect) {
item.classList.add('correct');
} else {
item.classList.add('incorrect');
allCorrect = false;
}
});

const resultEl = document.getElementById('result');
if (allCorrect) {
resultEl.innerHTML = `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.`;
resultEl.className = 'success';
sendResult(true);
} else {
resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
resultEl.className = 'error';
sendResult(false);
}
resultEl.style.display = 'block';
}

function reset() {
document.querySelectorAll('.toggle-switch input').forEach(input => {
input.checked = false;
});
document.querySelectorAll('.sentence-item').forEach(item => {
item.classList.remove('correct', 'incorrect');
});
document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
window.parent.postMessage({
type: "TASK_RESULT",
success: success,
message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
}, "*");
}

window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Ëá™", meaning: "–ü—Ä–µ–¥–ª–æ–≥: –Ω–∞—á–∏–Ω–∞—è —Å, –æ—Ç (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞)" },
      { char: "Ëá≥", meaning: "–î–æ, –ø–æ (–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é...)" },
      { char: "‰ªä", meaning: "–°–µ–≥–æ–¥–Ω—è, –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è" },
      { char: "Áî≤", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (1-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
      { char: "Ëæ∞", meaning: "–ó–µ–º–Ω–æ–π –≤–µ—Ç–≤—å (5-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰∫é", meaning: "–ü—Ä–µ–¥–ª–æ–≥: –≤, –Ω–∞, –∫ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ª–æ–≥)" },
      { char: "Â≠ê", meaning: "–¢–∏—Ç—É–ª –≤–æ–∂–¥—è; —Å—ã–Ω" },
      { char: "ÂïÜ", meaning: "–î–∏–Ω–∞—Å—Ç–∏—è –®–∞–Ω" },
      { char: "ÁÉñ", meaning: "–ë–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ" },
      { char: "Âü∫", meaning: "–ü–ª–µ–º—è –¶–∑–∏" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Âºó", meaning: "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ: –Ω–µ (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ)" },
      { char: "ÂÖ∂", meaning: "–ß–∞—Å—Ç–∏—Ü–∞ –±—É–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞" },
      { char: "ÁÉñ", meaning: "–ë–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ" },
      { char: "Ë≥Ω", meaning: "–ñ–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ –≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å" },
      { char: "Áéã", meaning: "–ü—Ä–∞–≤–∏—Ç–µ–ª—å, –≤–∞–Ω" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í–∞–Ω –±—É–¥–µ—Ç –º–æ–ª–∏—Ç—å [–æ –¥–æ–∂–¥–µ], –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –∫–æ–Ω—á–∞—è –¥–Ω–µ–º –≥—É–π-—Ö–∞–π.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å</li>
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Ëá≥ ‚Äî –¥–æ—Å—Ç–∏–≥–∞—Ç—å, –ø—Ä–∏–±—ã–≤–∞—Ç—å</li>
      <li>‰∫é ‚Äî –¥–æ (—á–∞—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá≥‰∫é)</li>
      <li>Áô∏‰∫• ‚Äî –¥–µ–Ω—å –≥—É–π-—Ö–∞–π (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏)</li>
      <li>Áéã ‚Äî –ø—Ä–∞–≤–∏—Ç–µ–ª—å, –í–∞–Ω</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏—Ç—å, –º–æ–ª–∏—Ç—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Ëá™', '‰ªä', 'Ëá≥', '‰∫é', 'Áô∏', '‰∫•', 'Áéã', 'Ê±Ç'];
    const allChars = [
      'Ëá™', '‰ªä', 'Ëá≥', '‰∫é', 'Áô∏', '‰∫•', 'Áéã', 'Ê±Ç',
      'Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Áî≤', 'Ëæ∞', 'Â≠ê', 'ÂïÜ', 'ÁÉñ', 'Âü∫', 'Êñπ',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'ÂÖ∂', 'Èõ®', 'Áä¨', 'Â≤Å', 'ÂÖ•'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ëá™‰ªäËá≥‰∫éÁô∏‰∫•ÁéãÊ±Ç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰∏ä", meaning: "–í–µ—Ä—Ö–Ω–∏–π (–ø–æ –ø–æ–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É)" },
      { char: "‰∏Å", meaning: "–ù–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (4-–π); —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫" },
      { char: "Êó¨", meaning: "–î–µ–∫–∞–¥–∞ (10-–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥)" },
      { char: "Ê±Ç", meaning: "–ü—Ä–æ—Å–∏—Ç—å, –º–æ–ª–∏—Ç—å (–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏)" },
      { char: "Âç†", meaning: "–ì–∞–¥–∞—Ç—å, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Ëá™", meaning: "z√¨" },
      { char: "Ëá≥", meaning: "zh√¨" },
      { char: "‰ªä", meaning: "jƒ´n" },
      { char: "Áî≤", meaning: "ji«é" },
      { char: "Ëæ∞", meaning: "ch√©n" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰∫é", meaning: "y√∫" },
      { char: "ÂïÜ", meaning: "shƒÅng" },
      { char: "ÁÉñ", meaning: "zƒÅi" },
      { char: "Âü∫", meaning: "jƒ´" },
      { char: "Âºó", meaning: "f√∫" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "ÂÖ∂", meaning: "q√≠" },
      { char: "Ë≥Ω", meaning: "s√†i" },
      { char: "Áéã", meaning: "w√°ng" },
      { char: "‰∏ä", meaning: "sh√†ng" },
      { char: "‰∏Å", meaning: "dƒ´ng" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Êó¨", meaning: "x√∫n" },
      { char: "Ê±Ç", meaning: "qi√∫" },
      { char: "Âç†", meaning: "zhƒÅn" },
      { char: "Â£¨", meaning: "r√©n" },
      { char: "ÂØÖ", meaning: "y√≠n" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ú–æ–ª–∏—Ç—å [–ø—Ä–µ–¥–∫–æ–≤], –Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è –∏ –∫–æ–Ω—á–∞—è –°—Ä–µ–¥–Ω–∏–º –î–∏–Ω–æ–º.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ê±Ç ‚Äî –º–æ–ª–∏—Ç—å, –ø—Ä–æ—Å–∏—Ç—å</li>
      <li>Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å</li>
      <li>‰∏äÁî≤ ‚Äî –í–µ—Ä—Ö–Ω–∏–π –¶–∑—è</li>
      <li>Ëá≥‰∫é ‚Äî –∏ –∫–æ–Ω—á–∞—è</li>
      <li>‰∏≠‰∏Å ‚Äî –°—Ä–µ–¥–Ω–∏–π –î–∏–Ω</li>
      <li>‰∏ä ‚Äî –≤–µ—Ä—Ö–Ω–∏–π</li>
      <li>Áî≤ ‚Äî –¶–∑—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫)</li>
      <li>‰∏≠ ‚Äî —Å—Ä–µ–¥–Ω–∏–π</li>
      <li>‰∏Å ‚Äî –î–∏–Ω (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫)</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Ê±Ç', 'Ëá™', '‰∏ä', 'Áî≤', 'Ëá≥', '‰∫é', '‰∏≠', '‰∏Å'];
    const allChars = [
      'Ê±Ç', 'Ëá™', '‰∏ä', 'Áî≤', 'Ëá≥', '‰∫é', '‰∏≠', '‰∏Å',
      'Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Â≠ê', 'ÂïÜ', 'ÁÉñ', 'Âü∫', 'Êñπ', '‰ªä', '‰∫•',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'ÂÖ∂', 'Èõ®', 'Áä¨', 'Â≤Å', 'ÂÖ•'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ê±ÇËá™‰∏äÁî≤Ëá≥‰∫é‰∏≠‰∏Å';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ë—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑–∏-—é?</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å</li>
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Ëá≥ ‚Äî –¥–æ</li>
      <li>Â∑±ÈÖâ ‚Äî –¥–µ–Ω—å —Ü–∑–∏-—é (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏)</li>
      <li>Èõ® ‚Äî –¥–æ–∂–¥—å</li>
      <li>Ê≥®ÊÑè: ‰∫é –º–æ–∂–µ—Ç –æ–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Ëá™', '‰ªä', 'Ëá≥', 'Â∑±', 'ÈÖâ', 'Èõ®'];
    const allChars = [
      'Ëá™', '‰ªä', 'Ëá≥', 'Â∑±', 'ÈÖâ', 'Èõ®',
      'Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Áî≤', 'Ëæ∞', 'Â≠ê', 'ÂïÜ', 'ÁÉñ', 'Âü∫', 'Êñπ',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'ÂÖ∂', 'Áä¨', 'Â≤Å', 'ÂÖ•', 'Áéã'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ëá™‰ªäËá≥Â∑±ÈÖâÈõ®';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í–∞–Ω –≥–∞–¥–∞–µ—Ç: –±—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—Ü–∑—ã?</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â£¨ÂØÖ ‚Äî –¥–µ–Ω—å –∂—ç–Ω—å-–∏–Ω—å (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏)</li>
      <li>Âçú ‚Äî –≥–∞–¥–∞—Ç—å</li>
      <li>Ë≤û ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞</li>
      <li>Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å</li>
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Ëá≥ ‚Äî –¥–æ</li>
      <li>‰∫é ‚Äî –º–æ–∂–µ—Ç –æ–ø—É—Å–∫–∞—Ç—å—Å—è</li>
      <li>Áî≤Â≠ê ‚Äî –¥–µ–Ω—å —Ü–∑—è-—Ü–∑—ã (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏)</li>
      <li>Èõ® ‚Äî –¥–æ–∂–¥—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Ëá™', '‰ªä', 'Ëá≥', 'Áî≤', 'Â≠ê', 'Èõ®'];
    const allChars = [
      'Â£¨', 'ÂØÖ', 'Âçú', 'Ë≤û', 'Ëá™', '‰ªä', 'Ëá≥', 'Áî≤', 'Â≠ê', 'Èõ®',
      '‰∫é', '‰∏Å', 'Â∑≥', 'Êàë', 'ÁÉñ', 'Ë≥Ω', 'Áéã', 'Âç†', 'Êõ∞', '‰æÜ',
      'Êñπ', 'Ë•ø', 'Êù±', 'Âçó', 'Âåó', '‰∫î', 'ÊØã', 'Â§ö', 'Á§∫', 'Âæå'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â£¨ÂØÖÂçúË≤ûËá™‰ªäËá≥Áî≤Â≠êÈõ®';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>


=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ÁéãÂãøÂÖ•‰∫éÂïÜ</title>
</head>
<body>

<h2>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™...Ëá≥‰∫é...?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞Â≠êÂïÜÁÉñÂü∫Êñπ¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">z√¨ jƒ´n zh√¨ y√∫ ji«é ch√©n z«ê shƒÅng zƒÅi jƒ´ fƒÅng</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
    const options = [
      { text: "–£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ¬´–°–µ–π—á–∞—Å, –≤ –¥–µ–Ω—å —Ü–∑—è-—á—ç–Ω—å, —Ü–∑—ã –®–∞–Ω –Ω–∞–Ω–µ—Å—ë—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...¬ª", correct: false },
      { text: "–£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ãÃÅ–µ —Ä–∞–º–∫–∏: ¬´–ù–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á—ç–Ω—å, —Ü–∑—ã –®–∞–Ω –Ω–∞–Ω–µ—Å—ë—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...¬ª", correct: true },
      { text: "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Å—Ç: ¬´–ò–∑ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –¶–∑–∏–Ω—å –≤ –º–µ—Å—Ç–Ω–æ—Å—Ç—å –¶–∑—è—á—ç–Ω—å —Ü–∑—ã –®–∞–Ω –Ω–∞–Ω–µ—Å—ë—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...¬ª", correct: false },
      { text: "–£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω—É: ¬´–ò–∑-–∑–∞ –¶–∑–∏–Ω—å –∏ –∏–∑-–∑–∞ –¶–∑—è—á—ç–Ω—å —Ü–∑—ã –®–∞–Ω –Ω–∞–Ω–µ—Å—ë—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ...¬ª", correct: false }
    ];

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Ëá™ A Ëá≥‰∫é B –∑–∞–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ ¬´–æ—Ç –ê –¥–æ –ë¬ª, ¬´–Ω–∞—á–∏–Ω–∞—è —Å –ê –∏ –∫–æ–Ω—á–∞—è –ë¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ö–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è Ëá™...Ëá≥‰∫é... ‚Äî –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (–≤—Ä–µ–º—è –∏–ª–∏ –º–µ—Å—Ç–æ), –∞ –Ω–µ –º–æ–º–µ–Ω—Ç, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É.";
        sendResult(false);
      }
    }


    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>
</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ÁéãÂãøÂÖ•‰∫éÂïÜ</title>
</head>
<body>

<h2>–ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç –ø—Ä–µ–¥–ª–æ–≥ Ëá™ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Ëá™‰ªäÂ£¨ÂØÖËá≥‰∫éÁî≤Ëæ∞Â≠êÂïÜÁÉñÂü∫Êñπ¬ª ‚Äî —á—Ç–æ –¥–µ–ª–∞–µ—Ç Ëá™?</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">z√¨ jƒ´n r√©n y√≠n zh√¨ y√∫ ji«é ch√©n z«ê shƒÅng zƒÅi jƒ´ fƒÅng</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
    const options = [
      { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è ¬´–∏–∑¬ª –∏–ª–∏ ¬´–æ—Ç¬ª", correct: false },
      { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ ¬´—Å¬ª, ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª", correct: true },
      { text: "–£—Å–∏–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ –Ω–∏–º —Å–ª–æ–≤–∞ (¬´—Å–∞–º¬ª, ¬´–ª–∏—á–Ω–æ¬ª)", correct: false },
      { text: "–Ø–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä–º–æ–π –≥–ª–∞–≥–æ–ª–∞ ¬´—Å–ª–µ–¥–æ–≤–∞—Ç—å¬ª", correct: false }
    ];
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

      if (selected.dataset.correct === "true") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! –í —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ãÃÅ–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (‰ªä, Â£¨ÂØÖ) Ëá™ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–≥ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º ¬´—Å¬ª, ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª.";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –•–æ—Ç—è Ëá™ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å ¬´—Å–∞–º¬ª –∏–ª–∏ ¬´–∏–∑¬ª, –∑–¥–µ—Å—å, –ø–µ—Ä–µ–¥ —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–≥, –∑–∞–¥–∞—é—â–∏–π –Ω–∞—á–∞–ª–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.";
        sendResult(false);
      }
    }


    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>
</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á–∞—Å—Ç–∏—Ü–∞ ÂÖÅ –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂÖÅÊúâ‰æÜËâ±Ëá™Ë•ø¬ª</strong></p>
<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">y«în y«íu l√°i jiƒÅn z√¨ xƒ´</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { text: "–£—Å–ª–æ–≤–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞: ¬´–ï—Å–ª–∏ –±—ã –ø—Ä–∏—à–ª–∞ –±–µ–¥–∞ —Å –∑–∞–ø–∞–¥–∞...¬ª", correct: false },
    { text: "–ß–∞—Å—Ç–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ¬´–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∞ –±–µ–¥–∞ —Å –∑–∞–ø–∞–¥–∞¬ª", correct: true },
    { text: "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞: ¬´–ù–µ –ø—Ä–∏—à–ª–∞ –±–µ–¥–∞ —Å –∑–∞–ø–∞–¥–∞¬ª", correct: false },
    { text: "–í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞: ¬´–ü—Ä–∏—à–ª–∞ –ª–∏ –±–µ–¥–∞ —Å –∑–∞–ø–∞–¥–∞?¬ª", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options); // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    const container = document.getElementById("answers"); // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct;

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: Âãø</title>
</head>
<body>
<h2>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ Êúâ‰æÜËâ±?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´Ê¥óÈúáÂëäÊõ∞: ...Â∑•Êñπ‰∫¶‰æµÊàëË•øÈÑôÁî∞„ÄÇÂõõÊó•Â∫öÁî≥‰∫¶Êúâ‰æÜËâ±Ëá™Âåó¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">X«ê Zh√®n g√†o yuƒì: ... G≈çng fƒÅng y√¨ qƒ´n w«í xƒ´ b«ê ti√°n. s√¨ r√¨ gƒìng shƒìn y√¨ y«íu l√°i jiƒÅn z√¨ bƒõi</div>
</div>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { text: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ: ¬´–ü—Ä–∏—à–ª–∞ –≤–µ—Å—Ç—å –æ –ø–æ–±–µ–¥–µ¬ª", correct: false },
    { text: "–§–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–æ–Ω–µ—Å–µ–Ω–∏–µ: ¬´–ü–æ—Å—Ç—É–ø–∏–ª –¥–æ–∫–ª–∞–¥¬ª", correct: false },
    { text: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–µ–¥–µ: ¬´(–ö–æ –º–Ω–µ) –ø—Ä–∏—à–ª–∞ –±–µ–¥–∞¬ª", correct: true },
    { text: "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–¥—ã: ¬´–ë—É–¥–µ—Ç –±–µ–¥–∞¬ª", correct: false }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers"); // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: answers
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct;

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: containerId –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ resultId ‚Äî –Ω—É–∂–µ–Ω
  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

