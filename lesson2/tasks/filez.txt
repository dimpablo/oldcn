=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  function sendResult(success, message) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = ''; // —Å–±—Ä–æ—Å
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');

    setTimeout(() => {
      splashScreen.style.display = 'none';
      characterDiv.style.display = 'block';

      const char = window.location.hash.slice(1);

      if (!char) {
        console.warn("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ –≤ —Ö—ç—à–µ");
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ");
        return;
      }

      const writer = HanziWriter.create('character-target-div', char, {
        width: 300,
        height: 300,
        showCharacter: false,
        showOutline: false,
        showHintAfterMisses: 1,
        highlightOnComplete: false,
        padding: 5
      });

      // –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
      writer.quiz({
        leniency: 2.0,

        onCorrectStroke: function(strokeData) {
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ö–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          // flashScreen('success'); // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–∏–≥–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
        },

        onMistake: function(strokeData) {
          console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
          flashScreen('error'); // üî¥ –ö—Ä–∞—Å–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        },

        onComplete: function(summaryData) {
          console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
          flashScreen('success'); // üü¢ –ó–µ–ª—ë–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
          sendResult(true, "–ò–µ—Ä–æ–≥–ª–∏—Ñ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ");
        }
      });
    }, 1000);
  };
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 2</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 8px;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }

    h2 {
      margin: 0 0 8px 0;
      font-size: 16px;
      text-align: center;
      font-weight: bold;
    }

    .instructions {
      padding: 8px;
      margin-bottom: 10px;
      font-size: 13px;
      background: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .instructions p {
      margin: 4px 0;
    }

    .task-container {
      margin-bottom: 15px;
      padding-bottom: 8px;
      border-bottom: 1px solid #eee;
    }

    .task-title {
      font-size: 14px;
      font-weight: bold;
      text-align: center;
      margin: 6px 0;
    }

    .oracle-text {
      font-size: 20px;
      text-align: center;
      margin: 8px 0;
      font-weight: bold;
      color: #111;
    }

    .word-pool, .drop-area {
      min-height: 30px;
      padding: 6px;
      margin: 6px 0;
      display: flex;
      flex-wrap: wrap;
      gap: 4px;
      border: 1px solid #ccc;
      border-radius: 4px;
      background: #f9f9f9;
      font-size: 14px;
      justify-content: center;
    }

    .drop-area {
      border-color: #3498db;
      background: #eef7ff;
    }

    .drop-area::before {
      content: '[–ø—É—Å—Ç–æ]';
      color: #999;
      font-style: italic;
    }

    .drop-area.has-words::before {
      content: none;
    }

    .word-box {
      background: white;
      border: 1px solid #aaa;
      padding: 4px 8px;
      font-size: 14px;
      cursor: pointer;
      user-select: none;
      white-space: nowrap;
    }

    .word-box:hover {
      background: #e0e0e0;
    }

    .controls {
      text-align: center;
      margin: 10px 0;
    }

    button {
      padding: 6px 10px;
      margin: 0 6px;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:active {
      background: #0055aa;
    }

    #result {
      margin: 10px 0;
      padding: 8px;
      font-size: 14px;
      text-align: center;
      border-radius: 4px;
      display: none;
    }

    .success {
      background: #e8f5e9;
      color: #27ae60;
    }

    .error {
      background: #ffebee;
      color: #e74c3c;
    }
  </style>
</head>
<body>

  <h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 2</h2>

  <div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–ª—é—á–µ–≤–æ–π –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –£—Ä–æ–∫–∞ 2.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–π!</em></p>
  </div>

  <div class="task-container">
    <div class="task-title">1. ÊàëÂèóÈªçÂπ¥Ôºü</div>
    <div class="oracle-text">ÊàëÂèóÈªçÂπ¥Ôºü</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
      <p>üí° –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç <strong>–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–∞–≥–æ–ª–∞ Âèó</strong> (–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π) –∏ <strong>–ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ÈªçÂπ¥</strong> (—É—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞)</p>
    </div>
  </div>

  <div class="task-container">
    <div class="task-title">2. ËÇÖÂºóÂÖ∂‰æÜÁâõÔºü</div>
    <div class="oracle-text">ËÇÖÂºóÂÖ∂‰æÜÁâõÔºü</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
      <p>üí° –ó–¥–µ—Å—å –≤–∞–∂–Ω–æ <strong>–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âºó</strong> –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –∏ <strong>–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‰æÜ</strong> (–ø—Ä–∏—Å–ª–∞—Ç—å), –ø—Ä—è–º–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Áâõ</p>
    </div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const expected1 = [
      ['–º—ã', '–ø–æ–ª—É—á–∏–º', '—É—Ä–æ–∂–∞–π', '–ø—Ä–æ—Å–∞'],
      ['–ø–æ–ª—É—á–∏–º', '–ª–∏', '–º—ã', '—É—Ä–æ–∂–∞–π', '–ø—Ä–æ—Å–∞'],
      ['—É—Ä–æ–∂–∞–π', '–ø—Ä–æ—Å–∞', '–º—ã', '–ø–æ–ª—É—á–∏–º'],
      ['–º—ã', '–ø–æ–ª—É—á–∏–º', '—É—Ä–æ–∂–∞–π', '–∏–∑', '–ø—Ä–æ—Å–∞']
    ];

    const expected2 = [
      ['—Å—É', '–Ω–µ', '–ø—Ä–∏—Å—ã–ª–∞–µ—Ç', '–ª–∏', '–±—ã–∫–æ–≤'],
      ['–Ω–µ', '–ø—Ä–∏—Å—ã–ª–∞–µ—Ç', '–ª–∏', '—Å—É', '–±—ã–∫–æ–≤'],
      ['—Å—É', '–Ω–µ', '–ø—Ä–∏—à–ª—ë—Ç', '–ª–∏', '–±—ã–∫–æ–≤'],
      ['–±—ã–∫–æ–≤', '—Å—É', '–Ω–µ', '–ø—Ä–∏—Å—ã–ª–∞–µ—Ç', '–ª–∏']
    ];

    const words1 = ['–º—ã', '–ø–æ–ª—É—á–∏–º', '—É—Ä–æ–∂–∞–π', '–ø—Ä–æ—Å–∞', '–∏–∑', '–ª–∏', '–ø–æ–ª—É—á–∏–ª–∏', '—É—Ä–æ–∂–∞—è', '–ø–ª–æ—Ö–æ–π', '–≤', '—ç—Ç–æ–º', '–≥–æ–¥—É'];
    const words2 = ['—Å—É', '–Ω–µ', '–ø—Ä–∏—Å—ã–ª–∞–µ—Ç', '–ª–∏', '–±—ã–∫–æ–≤', '–ø—Ä–∏—à–ª—ë—Ç', '–æ–Ω', '–±—ã–∫–∏', '–ø—Ä–∏—Å–ª–∞–ª', '–±—ã–∫–∞', '—Å–µ–π—á–∞—Å', '–≤–µ—Å–Ω–æ–π'];

    const wordPool1 = document.getElementById('word-pool1');
    const wordPool2 = document.getElementById('word-pool2');
    const dropArea1 = document.getElementById('drop-area1');
    const dropArea2 = document.getElementById('drop-area2');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –°–æ–∑–¥–∞—ë–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤
    function createWordElements(words, pool, dropArea) {
      const shuffledWords = shuffleArray(words); // üîÅ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
      return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ drop-area
          box.remove();
          dropArea.appendChild(box);
          updatePlaceholder(dropArea); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
        };

        return box;
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å [–ø—É—Å—Ç–æ]
    function updatePlaceholder(dropArea) {
      const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
      dropArea.classList.toggle('has-words', hasWords);
    }

    let wordElements1 = [];
    let wordElements2 = [];

    function init() {
      // –û—á–∏—â–∞–µ–º
      wordPool1.innerHTML = '';
      wordPool2.innerHTML = '';
      dropArea1.innerHTML = '';
      dropArea2.innerHTML = '';
      resultEl.style.display = 'none';

      // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
      wordElements1 = createWordElements(words1, wordPool1, dropArea1);
      wordElements2 = createWordElements(words2, wordPool2, dropArea2);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª—ã
      wordElements1.forEach(el => wordPool1.appendChild(el));
      wordElements2.forEach(el => wordPool2.appendChild(el));

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
      updatePlaceholder(dropArea1);
      updatePlaceholder(dropArea2);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤ drop-area: –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—É–ª
    dropArea1.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool1.appendChild(wordBox);
        updatePlaceholder(dropArea1);
      }
    });

    dropArea2.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool2.appendChild(wordBox);
        updatePlaceholder(dropArea2);
      }
    });

    function getWords(dropArea) {
      return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
    }

    checkBtn.addEventListener('click', () => {
      const current1 = getWords(dropArea1);
      const current2 = getWords(dropArea2);

      const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
      const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

      if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –£—Ä–æ–∫–∞ 2: –∫–∞—É–∑–∞—Ç–∏–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –∏ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âºó.`;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
      } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü:';
        if (!isCorrect1) message += '<br>‚Ä¢ –í –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏: –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Âèó (–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π)';
        if (!isCorrect2) message += '<br>‚Ä¢ –í–æ –≤—Ç–æ—Ä–æ–º: –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ Âºó –∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‰æÜ (–ø—Ä–∏—Å–ª–∞—Ç—å)';
        
        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
      }
    });

    resetBtn.addEventListener('click', init);

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ò–Ω–∫–æ–∑–∞—Ç–∏–≤ vs –ö–∞—É–∑–∞—Ç–∏–≤</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 8px;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }

    h2 {
      margin: 0 0 8px 0;
      font-size: 16px;
      text-align: center;
      font-weight: bold;
    }

    .instructions {
      padding: 8px;
      margin-bottom: 10px;
      font-size: 13px;
      background: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .instructions p {
      margin: 4px 0;
    }

    .columns {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 8px;
    }

    .column {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .sentence-item {
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 6px;
      display: flex;
      flex-direction: column;
      align-items: center;
      transition: background-color 0.2s;
    }

    .sentence-item.correct {
      background-color: #e8f5e9; /* —Å–∞–ª–∞—Ç–æ–≤–æ-–∑–µ–ª—ë–Ω—ã–π */
      border-color: #a5d6a7;
    }

    .sentence-item.incorrect {
      background-color: #ffebee; /* —Ä–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π */
      border-color: #ef9a9a;
    }

    .oracle-text {
      font-size: 18px;
      font-weight: bold;
      margin: 4px 0;
      color: #111;
    }

    .toggle-container {
      display: flex;
      align-items: center;
      gap: 4px;
      margin-top: 4px;
      font-size: 12px;
    }

    .toggle-text {
      color: #555;
    }

    /* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 40px;
      height: 20px;
    }

    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #e74c3c; /* –∫—Ä–∞—Å–Ω—ã–π ‚Äî –∫–∞—É–∑–∞—Ç–∏–≤ */
      transition: .2s;
      border-radius: 10px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 2px;
      bottom: 2px;
      background: white;
      border-radius: 50%;
      transition: .2s;
    }

    input:checked + .slider {
      background-color: #27ae60; /* –∑–µ–ª—ë–Ω—ã–π ‚Äî –∏–Ω–∫–æ–∑–∞—Ç–∏–≤ */
    }

    input:checked + .slider:before {
      transform: translateX(18px);
    }
  </style>
</head>
<body>

  <h2>–ò–Ω–∫–æ–∑–∞—Ç–∏–≤ vs –ö–∞—É–∑–∞—Ç–∏–≤</h2>

  <div class="instructions">
    <p><strong>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–∞</strong> –≤ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏:</p>
    <p>üî¥ <em>–∫—Ä–∞—Å–Ω—ã–π</em> ‚Äî –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</p>
    <p>üü¢ <em>–∑–µ–ª–µ–Ω—ã–π</em> ‚Äî –∏–Ω–∫–æ–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</p>
    <p><em>–í—Å–µ 4 –≥–ª–∞–≥–æ–ª–∞ (Èõ®, ‰æÜ, Âèó, Âá∫) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ–±–æ–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö</em></p>
  </div>

  <div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    const sentences = [
      { text: "ÂÖ∂Èõ®", type: "inc", explanation: "–¥–æ–∂–¥—å –∏–¥–µ—Ç (–±–µ–∑–ª–∏—á–Ω—ã–π –≥–ª–∞–≥–æ–ª)" },
      { text: "ËÇÖ‰æÜÁâõ", type: "caus", explanation: "–°—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –±—ã–∫–æ–≤ (–∫–∞—É–∑–∞—Ç–∏–≤ ‰æÜ)" },
      { text: "ÊàëÂèóÂπ¥", type: "inc", explanation: "–º—ã –ø–æ–ª—É—á–∞–µ–º —É—Ä–æ–∂–∞–π (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ Âèó)" },
      { text: "ÁéãÂá∫Êñπ", type: "caus", explanation: "–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ—Å—ã–ª–∞–µ—Ç –ø–ª–µ–º—è (–∫–∞—É–∑–∞—Ç–∏–≤ Âá∫)" },
      { text: "Êñπ‰æÜ", type: "inc", explanation: "–ø–ª–µ–º—è –ø—Ä–∏—Ö–æ–¥–∏—Ç (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ ‰æÜ)" },
      { text: "Á•ûÂèóÂπ¥", type: "caus", explanation: "–±–æ–≥ –¥–∞–µ—Ç —É—Ä–æ–∂–∞–π (–∫–∞—É–∑–∞—Ç–∏–≤ Âèó)" },
      { text: "ÊñπÂá∫", type: "inc", explanation: "–ø–ª–µ–º—è –≤—ã—Ö–æ–¥–∏—Ç (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ Âá∫)" },
      { text: "ÂçúÈõ®", type: "caus", explanation: "–≥–∞–¥–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∞–µ—Ç –¥–æ–∂–¥—å (–∫–∞—É–∑–∞—Ç–∏–≤ Èõ®)" },
      { text: "‰æÜÁâõ", type: "inc", explanation: "–±—ã–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ ‰æÜ)" },
      { text: "ÂÖÅÂèóÂπ¥", type: "inc", explanation: "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–∂–∞–π (–∏–Ω–∫–æ–∑–∞—Ç–∏–≤ Âèó)" }
    ];

    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
      return array;
    }

    function createSentenceElement(sentence, index) {
      const item = document.createElement('div');
      item.className = 'sentence-item';
      item.dataset.index = index;
      
      item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
          <span class="toggle-text">–∫–∞—É–∑</span>
          <label class="toggle-switch">
            <input type="checkbox">
            <span class="slider"></span>
          </label>
          <span class="toggle-text">–∏–Ω–∫–æ</span>
        </div>
      `;
      
      return item;
    }

    function init() {
      const shuffled = shuffleArray([...sentences]);
      const column1 = document.getElementById('column1');
      const column2 = document.getElementById('column2');
      
      column1.innerHTML = '';
      column2.innerHTML = '';
      document.getElementById('result').style.display = 'none';
      
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π
      document.querySelectorAll('.sentence-item').forEach(el => {
        el.classList.remove('correct', 'incorrect');
      });

      shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
      });
      
      shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
      });
    }

    function checkAnswers() {
      const items = document.querySelectorAll('.sentence-item');
      let allCorrect = true;
      
      items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "inc") || 
                          (!input.checked && expectedType === "caus");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
          item.classList.add('correct');
        } else {
          item.classList.add('incorrect');
          allCorrect = false;
        }
      });
      
      const resultEl = document.getElementById('result');
      if (allCorrect) {
        resultEl.innerHTML = `‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ.`;
        resultEl.className = 'success';
        sendResult(true);
      } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
      }
      resultEl.style.display = 'block';
    }

    function reset() {
      document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
      });
      document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
      });
      document.getElementById('result').style.display = 'none';
    }

    function sendResult(success) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

    document.getElementById('check-btn').addEventListener('click', checkAnswers);
    document.getElementById('reset-btn').addEventListener('click', reset);
  </script>
</body>
</html>



=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Âèó", meaning: "–ø–æ–ª—É—á–∞—Ç—å / –¥–∞–≤–∞—Ç—å (–∫–∞—É–∑–∞—Ç–∏–≤)" },
      { char: "‰æÜ", meaning: "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å / –ø—Ä–∏—Å—ã–ª–∞—Ç—å (–∫–∞—É–∑–∞—Ç–∏–≤)" },
      { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å / –ø–æ—Å—ã–ª–∞—Ç—å" },
      { char: "Èõ®", meaning: "–¥–æ–∂–¥—å / –ø–æ—Å—ã–ª–∞—Ç—å –¥–æ–∂–¥—å (–∫–∞—É–∑–∞—Ç–∏–≤)" },
      { char: "Âºó", meaning: "–Ω–µ (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, —Å –≥–ª–∞–≥–æ–ª–∞–º–∏)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰ªä", meaning: "—Å–µ–π—á–∞—Å, –Ω—ã–Ω–µ—à–Ω–∏–π" },
      { char: "‰æÜ", meaning: "–±—É–¥—É—â–∏–π (–∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)" },
      { char: "Âπ¥", meaning: "—É—Ä–æ–∂–∞–π, –≥–æ–¥" },
      { char: "Ê≠≤", meaning: "–≥–æ–¥ (–µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏)" },
      { char: "Êò•", meaning: "–≤–µ—Å–Ω–∞ / –ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –≥–æ–¥–∞" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
  { char: "ËÇÖ", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è (–°—É)" },
  { char: "Áâõ", meaning: "–±—ã–∫, —Å–∫–æ—Ç" },
  { char: "ÂÜì", meaning: "–∏–º—è –ª–∏—Ü–∞ (–ß–∂—É–Ω)" },
  { char: "Áä¨", meaning: "—Å–æ–±–∞–∫–∞" },
  { char: "Â•ö", meaning: "—á—Ç–æ? –∫—Ç–æ? (–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ)" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
  { char: "Áî≤", meaning: "–Ω–µ–±–µ—Å–Ω—ã–π —Å—Ç–≤–æ–ª (1-–π)" },
  { char: "Ëæ∞", meaning: "–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (5-—è); –¥—Ä–∞–∫–æ–Ω" },
  { char: "ÁôΩ", meaning: "–±–µ–ª—ã–π" },
  { char: "È¶¨", meaning: "–ª–æ—à–∞–¥—å" },
  { char: "Ëá™", meaning: "—Å–∞–º, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ" }
    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
  { char: "ÂïÜ", meaning: "–®–∞–Ω (–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ, –¥–∏–Ω–∞—Å—Ç–∏—è)" },
  { char: "ÂÜì", meaning: "–∏–º—è (–ì–æ—É), –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è" },
  { char: "‰∫ò", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è (–ì—ç–Ω—å)" },
  { char: "Êàë", meaning: "—è, –º—ã (1-–µ –ª–∏—Ü–æ)" },
  { char: "Èªç", meaning: "–ø—Ä–æ—Å–æ (–≤–∏–¥ –∑–µ—Ä–Ω–∞)" }

    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
  { char: "Èªç", meaning: "–ø—Ä–æ—Å–æ (–≤–∏–¥ –∑–µ—Ä–Ω–∞)" },
  { char: "Â∑≥", meaning: "–∑–µ–º–Ω–∞—è –≤–µ—Ç–≤—å (6-—è); –∑–º–µ—è" },
  { char: "Á®≤", meaning: "—Ä–∏—Å (—É—Ä–æ–∂–∞–π —Ä–∏—Å–∞)" },
  { char: "Êàî", meaning: "–∏–º—è (–¶–∑—è–Ω—å), –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è" },
  { char: "Áî´", meaning: "–∏–º—è (–§—É), –ª–∏—Ü–æ" }

    ];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Âèó", meaning: "sh√≤u" },
  { char: "‰æÜ", meaning: "l√°i" },
  { char: "Âá∫", meaning: "ch≈´" },
  { char: "Èõ®", meaning: "y«î" },
  { char: "Âºó", meaning: "f√∫" }
];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "‰ªä", meaning: "jƒ´n" },
  { char: "‰æÜ", meaning: "l√°i" },
  { char: "Âπ¥", meaning: "ni√°n" },
  { char: "Ê≠≤", meaning: "su√¨" },
  { char: "Êò•", meaning: "ch≈´n" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í —ç—Ç–æ–º –≥–æ–¥—É –º—ã –ø–æ–ª—É—á–∏–º —É—Ä–æ–∂–∞–π —Ä–∏—Å–∞.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰ªäÊ≠≥ ‚Äî –≤ —ç—Ç–æ–º –≥–æ–¥—É</li>
      <li>Êàë ‚Äî –º—ã</li>
      <li>Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å</li>
      <li>Á®ªÂπ¥ ‚Äî —É—Ä–æ–∂–∞–π —Ä–∏—Å–∞</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['‰ªä', 'Ê≠≥', 'Êàë', 'Âèó', 'Á®ª', 'Âπ¥'];

    const allChars = [
      '‰ªä', 'Ê≠≥', 'Êàë', 'Âèó', 'Á®ª', 'Âπ¥',
      'Êù•', '‰∏ç', 'Âºó', 'Êò•', 'ÁôΩ', 'È©¨',
      'Êñπ', 'Ëá™', 'Âêâ', 'Áéã', 'Âçú', 'Ë≤û',
      'Èõ®', 'ÂÖÅ', 'ÂÖ∂', '‰∫â', '„±ø', 'Áä¨'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰ªäÊ≠≥ÊàëÂèóÁ®ªÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "ËÇÖ", meaning: "s√π" },
  { char: "Áâõ", meaning: "ni√∫" },
  { char: "ÂÜì", meaning: "zh√≤ng" },  // –∏–ª–∏ "ch√≥ng" ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ "–ß–∂—É–Ω" ‚Äî —Å–∫–æ—Ä–µ–µ "ch√≥ng"
  { char: "Áä¨", meaning: "qu«én" },
  { char: "Â•ö", meaning: "xƒ´" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Áî≤", meaning: "ji«é" },
  { char: "Ëæ∞", meaning: "ch√©n" },
  { char: "ÁôΩ", meaning: "b√°i" },
  { char: "È¶¨", meaning: "m«é" },
  { char: "Ëá™", meaning: "z√¨" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "ÂïÜ", meaning: "shƒÅng" },
  { char: "ÂÜì", meaning: "g√≤u" },
  { char: "‰∫ò", meaning: "g√®n" },
  { char: "Êàë", meaning: "w«í" },
  { char: "Èªç", meaning: "sh«î" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 8px;
    font-size: 14px;
    line-height: 1.4;
    background: #fff;
    color: #333;
  }

  h2 {
    margin: 0 0 8px 0;
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }

  p.intro {
    text-align: center;
    font-size: 14px;
    margin: 4px 0 12px 0;
    color: #555;
  }

  /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
  .match-container {
    display: flex;
    gap: 10px;
    max-width: 100%;
    margin-bottom: 12px;
  }

  .column {
    flex: 1;
    min-width: 140px;
  }

  .column h3 {
    font-size: 14px;
    text-align: center;
    margin: 6px 0;
    color: #333;
    background: #eee;
    padding: 4px;
    border-radius: 4px;
  }

  .word-item, .def-item {
    padding: 6px 8px;
    margin: 4px 0;
    background: #f8f8f8;
    border: 1px solid #ccc;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-weight: bold;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .word-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .def-item.selected {
    background: #e0f0ff;
    border-color: #0066cc;
    box-shadow: 0 0 0 2px #0066cc;
  }

  .matched {
    background: #e8f5e9 !important;
    border-color: #28a745 !important;
    color: #27ae60;
    font-weight: bold;
    opacity: 0.9;
    cursor: default;
    box-shadow: none;
  }

  button {
    display: block;
    width: 100%;
    padding: 6px 10px;
    margin: 12px 0 0 0;
    font-size: 14px;
    background: #0066cc;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:active {
    background: #0055aa;
  }

  #result {
    margin: 10px 0 0 0;
    padding: 8px;
    font-size: 14px;
    text-align: center;
    border-radius: 4px;
  }

  .success {
    background: #e8f5e9;
    color: #27ae60;
  }
</style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>

  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 2 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
const pairs = [
  { char: "Èªç", meaning: "sh«î" },
  { char: "Â∑≥", meaning: "s√¨" },
  { char: "Á®≤", meaning: "d√†o" },
  { char: "Êàî", meaning: "jiƒÅn" },
  { char: "Áî´", meaning: "f«î" }
];

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");

      wordList.innerHTML = "";
      defList.innerHTML = "";

      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;
      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      const char = selectedWord.dataset.char;
      const meaning = el.dataset.meaning;
      const isCorrect = pairs.some(p => p.char === char && p.meaning === meaning);

      if (isCorrect) {
        el.classList.add("matched");
        selectedWord.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
  <title>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂèóÂπ¥Ôºü</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 6px;
      line-height: 1.4;
      color: #333;
      font-size: 13px;
    }

    h2 {
      text-align: center;
      margin: 6px 0;
      font-size: 16px;
      font-weight: bold;
      color: #222;
    }

    .instruction {
      text-align: center;
      margin: 4px 0 10px;
      color: #555;
      font-style: italic;
      font-size: 12px;
    }

    #options-container {
      margin: 8px 0;
    }

    .option {
      display: block;
      margin: 4px 0;
      padding: 7px 8px;
      background: #f8f8f8;
      border: 1px solid #ccc;
      cursor: pointer;
      font-size: 14px;
    }

    .option input {
      margin-right: 6px;
      vertical-align: middle;
      accent-color: #007cba;
    }

    .option.selected {
      background: #e1f3ff;
      border-color: #007cba;
    }

    button {
      display: block;
      margin: 10px auto 6px;
      padding: 6px 12px;
      font-size: 13px;
      background: #007cba;
      color: white;
      border: none;
      cursor: pointer;
    }

    #result {
      margin-top: 8px;
      padding: 6px;
      text-align: center;
      font-size: 13px;
      font-weight: bold;
    }

    .success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6c3;
    }

    .error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f1b1b7;
    }

    /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —É–∑–∫–∏–µ —ç–∫—Ä–∞–Ω—ã */
    @media (max-width: 480px) {
      body {
        padding: 4px;
        font-size: 12px;
      }
      h2 {
        font-size: 15px;
      }
      .instruction {
        font-size: 11px;
        margin: 4px 0 8px;
      }
      .option {
        font-size: 13px;
        padding: 6px 6px;
      }
      button {
        padding: 5px 10px;
        font-size: 12px;
      }
      #result {
        font-size: 12px;
        padding: 5px;
      }
    }
  </style>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ÂèóÂπ¥Ôºü</h2>
  <p class="instruction">–í –≥–∞–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å—è—Ö —Ñ—Ä–∞–∑–∞ ÂèóÂπ¥ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ. –ß—Ç–æ –æ–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç?</p>

  <div id="options-container">
    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { value: "harvest", text: "–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π", correct: true },
      { value: "year", text: "–≤ —ç—Ç–æ–º –≥–æ–¥—É", correct: false },
      { value: "receive-year", text: "–ø–æ–ª—É—á–∏—Ç—å –≥–æ–¥ (–≤ —Å–º—ã—Å–ª–µ —Å—Ä–æ–∫–∞)", correct: false },
      { value: "celebrate", text: "–æ—Ç–º–µ—Ç–∏—Ç—å –≥–æ–¥ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ–º", correct: false }
    ];

    let selectedValue = null;

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const container = document.getElementById("options-container");
      container.innerHTML = "";
      selectedValue = null;

      const shuffled = shuffleArray(options);

      shuffled.forEach(option => {
        const label = document.createElement("label");
        label.className = "option";
        label.dataset.value = option.value;

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "answer";
        input.value = option.value;

        input.onchange = () => {
          selectedValue = option.value;
          document.querySelectorAll('.option').forEach(el => el.classList.remove('selected'));
          label.classList.add('selected');
        };

        const textNode = document.createTextNode(option.text);

        label.appendChild(input);
        label.appendChild(textNode);
        container.appendChild(label);
      });
    }

    function check() {
      const resultEl = document.getElementById("result");
      resultEl.className = "";

      if (!selectedValue) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        resultEl.className = "error";
        return;
      }

      if (selectedValue === "harvest") {
        resultEl.textContent = "‚úÖ –í–µ—Ä–Ω–æ! ÂèóÂπ¥ ‚Äî ¬´–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π¬ª. –ì–ª–∞–≥–æ–ª Âèó –∑–¥–µ—Å—å –≤ –∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ—Ç. Âπ¥ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–≥–æ–¥¬ª, –∞ ¬´—É—Ä–æ–∂–∞–π¬ª. ÂèóÂπ¥ ‚Äî –∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –≥–∞–¥–∞–Ω–∏–π –æ–± —É—Ä–æ–∂–∞–µ.";
        resultEl.className = "error";
        sendResult(false);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í–µ—Ä–Ω–æ: ÂèóÂπ¥ = –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π" : "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ÂèóÂπ¥")
      }, "*");
    }

    renderOptions();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task25.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å</title>
  <style>
    /* –ú–∏–Ω–∏–º–∞–ª–∏–∑–º */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      color: #2c3e50;
      background: #fff;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 5px;
      text-align: center;
    }

    .instruction {
      text-align: center;
      margin-bottom: 8px;
      font-size: 12px;
      color: #555;
    }

    .pair {
      margin: 4px 0;
      padding: 6px;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 2px;
      font-size: 13px;
    }

    label {
      font-weight: bold;
      color: #333;
      display: block;
      margin-bottom: 3px;
    }

    select {
      width: 100%;
      padding: 5px;
      border: 1px solid #ccc;
      border-radius: 2px;
      font-size: 13px;
      background: white;
    }

    button {
      padding: 6px 10px;
      font-size: 13px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 2px;
      cursor: pointer;
      display: block;
      margin: 8px auto;
    }

    #result {
      margin-top: 8px;
      padding: 6px;
      font-size: 12px;
      text-align: center;
      font-weight: bold;
    }

    .success {
      background: #e8f5e9;
      color: #27ae60;
    }

    .error {
      background: #ffebee;
      color: #e74c3c;
    }
  </style>
</head>
<body>

  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 2</p>

  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –£—Ä–æ–∫–∞ 2 —Å –∫—Ä–∞—Ç–∫–∏–º–∏, —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const wordBank = [
      { char: "Âèó", correct: "–ø–æ–ª—É—á–∏—Ç—å / –¥–∞—Ç—å (–∫–∞—É–∑–∞—Ç–∏–≤)" },
      { char: "‰æÜ", correct: "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å / –ø—Ä–∏—Å—ã–ª–∞—Ç—å" },
      { char: "Âºó", correct: "–Ω–µ (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º)" },
      { char: "‰ªä", correct: "–Ω—ã–Ω–µ—à–Ω–∏–π, —Å–µ–π—á–∞—Å" },
      { char: "Ê≠≤", correct: "–≥–æ–¥ (–µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏)" },
      { char: "Âπ¥", correct: "—É—Ä–æ–∂–∞–π, –≥–æ–¥" },
      { char: "Êò•", correct: "–≤–µ—Å–Ω–∞ / –ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –≥–æ–¥–∞" },
      { char: "Êñπ", correct: "–ø–ª–µ–º—è, –Ω–∞—Ä–æ–¥" },
      { char: "Ëá™", correct: "—Å–∞–º, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ" },
      { char: "Âêâ", correct: "–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ, —Ö–æ—Ä–æ—à–æ" }
    ];

    const allValues = wordBank.map(item => item.correct);

    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderPairs() {
      const container = document.getElementById("pairs-container");
      container.innerHTML = "";

      const shuffled = shuffleArray(wordBank);

      shuffled.forEach(item => {
        const pair = document.createElement("div");
        pair.className = "pair";

        const options = shuffleArray([...allValues]);

        let selectHTML = `<select id="char_${item.char}">
          <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>`;
        
        options.forEach(value => {
          selectHTML += `<option value="${value}">${value}</option>`;
        });
        
        selectHTML += `</select>`;

        pair.innerHTML = `<label>${item.char} ‚Üí</label> ${selectHTML}`;
        container.appendChild(pair);
      });
    }

    function check() {
      let allFilled = true;
      let correctCount = 0;

      wordBank.forEach(item => {
        const select = document.getElementById(`char_${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      const resultEl = document.getElementById("result");

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ! –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 2.";
        resultEl.className = "success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Âèó ‚Äî –ø–æ–ª—É—á–∏—Ç—å/–¥–∞—Ç—å, ‰æÜ ‚Äî –ø—Ä–∏—Ö–æ–¥–∏—Ç—å/–ø—Ä–∏—Å—ã–ª–∞—Ç—å, Âπ¥ ‚Äî —É—Ä–æ–∂–∞–π.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "error";
        sendResult(false, "–û—à–∏–±–∫–∞ –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏");
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = renderPairs;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task26.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 220px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ì–∞–¥–∞—Ç–µ–ª—å –¶–∑—é–π —Å–ø—Ä–æ—Å–∏–ª: –ü—Ä–∏–¥–µ—Ç –ª–∏ –≤ –Ω—ã–Ω–µ—à–Ω—é—é –≤–µ—Å–Ω—É –±—ã–∫</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â∑±ÂçØÂçú„±øË≤û ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å –¶–∑—é–π —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç (—Ñ–æ—Ä–º—É–ª–∞ –Ω–∞—á–∞–ª–∞)</li>
      <li>‰ªäÊò• ‚Äî –≤ –Ω—ã–Ω–µ—à–Ω—é—é –≤–µ—Å–Ω—É</li>
      <li>‰æÜÁâõ ‚Äî –ø—Ä–∏–¥–µ—Ç –±—ã–∫ (Êù• = –ø—Ä–∏–¥–µ—Ç)</li>
      <li>–§—Ä–∞–∑–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã, –¥–∞–ª–µ–µ ‚Äî –≤–æ–ø—Ä–æ—Å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –¶–µ–ª–µ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–ï–ó –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    const expected = ['Â∑±', 'ÂçØ', 'Âçú', '„±ø', 'Ë≤û', '‰ªä', 'Êò•', '‰æÜ', 'Áâõ'];

    // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (–±–µ–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)
    const allChars = [
      'Â∑±', 'ÂçØ', 'Âçú', '„±ø', 'Ë≤û', '‰ªä', 'Êò•', '‰æÜ', 'Áâõ',
      'Áéã', 'Âç†', 'Êõ∞', 'Âêâ', 'ÂÖ∂', 'Èõ®', '‰∏ç', 'ÂÖÅ', 'Êñπ', 'Ëá™',
      'ÁôΩ', 'È¶¨', 'Âèó', 'Âπ¥', 'Áä¨', 'Âºó', 'Êàë', 'Ê≠≤'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∑±ÂçØÂçú„±øË≤û‰ªäÊò•‰æÜÁâõ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task27.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–º –ø—Ä–æ—Å–∞ –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É.</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Êù•Â≤Å ‚Äî –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É</li>
      <li>Êàë ‚Äî –º—ã</li>
      <li>Âºó ‚Äî –Ω–µ (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º)</li>
      <li>ÂèóÈªçÂπ¥ ‚Äî –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞</li>
      <li>–í –∏–Ω—å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö: ¬´ÂºóÂèóÂπ¥¬ª ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Êù•', 'Â≤Å', 'Êàë', 'Âºó', 'Âèó', 'Èªç', 'Âπ¥'];

    const allChars = [
      'Êù•', 'Â≤Å', 'Êàë', 'Âºó', 'Âèó', 'Èªç', 'Âπ¥',
      '‰ªä', '‰∏ç', 'ÂÖ∂', 'ÂÖÅ', 'Èõ®', 'Áéã', 'Âç†',
      'Êñπ', 'Ëá™', 'Âêâ', 'Áâõ', 'Áä¨', 'ÁôΩ', 'È¶¨',
      'Á®ª', 'Êò•', 'Âçú', 'Ë≤û', 'Êõ∞', 'ÂÖ∂'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Êù•Â≤ÅÊàëÂºóÂèóÈªçÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task28.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .punctuation {
      font-size: 16px;
      color: #7f8c8d;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π –ø—à–µ–Ω–∏—Ü—ã? –ù–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è –ø—à–µ–Ω–∏—Ü—ã?</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>ÂÜìÂèóÂπ¥Ôºü ‚Äî –ë—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π?</li>
      <li>ÂÜì‰∏çÂÖ∂ÂèóÂπ¥Ôºü ‚Äî –ù–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è?</li>
      <li>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞—Ä–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: ¬´–°–ª—É—á–∏—Ç—Å—è? –ù–µ —Å–ª—É—á–∏—Ç—Å—è?¬ª</li>
      <li>ÂÜì ‚Äî –∞—Ä—Ö–∞–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –±—É–¥—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏</li>
      <li>‰∏çÂÖ∂ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['ÂÜì', 'Âèó', 'Âπ¥', 'Ôºü', 'ÂÜì', '‰∏ç', 'ÂÖ∂', 'Âèó', 'Âπ¥', 'Ôºü'];

    const allChars = [
      'ÂÜì', 'Âèó', 'Âπ¥', 'Ôºü', 'ÂÜì', '‰∏ç', 'ÂÖ∂', 'Âèó', 'Âπ¥', 'Ôºü',
      'Êù•', 'Êàë', 'Âºó', '‰ªä', 'Â≤Å', 'Êñπ', 'ÁôΩ', 'È¶¨',
      'Èõ®', 'ÂÖÅ', 'Áéã', 'Ë¥û', 'Êõ∞', 'Êò•', 'Áä¨', 'Èªç',
      'Âêâ', 'Ëá™', 'Âçú', '„±ø', 'ÂÖ∂', 'Èõ®'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºü') box.classList.add('punctuation');
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂÜìÂèóÂπ¥ÔºüÂÜì‰∏çÂÖ∂ÂèóÂπ¥Ôºü';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É –ø–ª–µ–º—è –Ω–µ –ø–æ–ª—É—á–∏—Ç —É—Ä–æ–∂–∞—è.</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Êù•Â≤Å ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥</li>
      <li>Êñπ ‚Äî –ø–ª–µ–º—è</li>
      <li>Âºó ‚Äî –Ω–µ (–æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Å –≥–ª–∞–≥–æ–ª–∞–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º)</li>
      <li>ÂèóÂπ¥ ‚Äî –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∂–∞–π</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Êù•', 'Â≤Å', 'Êñπ', 'Âºó', 'Âèó', 'Âπ¥'];

    const allChars = [
      'Êù•', 'Â≤Å', 'Êñπ', 'Âºó', 'Âèó', 'Âπ¥',
      '‰ªä', 'Êàë', '‰∏ç', 'Èõ®', 'ÂÖ∂', 'ÂÖÅ',
      'Áéã', 'Âç†', 'Êõ∞', 'Ë¥û', 'Âçú', '‰∫â',
      'Á®ª', 'Êò•', 'Ëá™', 'Âêâ', 'ÁôΩ', 'È©¨'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Êù•Â≤ÅÊñπÂºóÂèóÂπ¥';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .punctuation {
      font-size: 16px;
      color: #7f8c8d;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ü—Ä–∏—Å–ª–∞–ª–∏ –ª–∏ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π? –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –ª–∏ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π?</em></p>
  </div>

  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰æÜÁôΩÈ¶¨Ôºü ‚Äî –ü—Ä–∏—Å–ª–∞–ª–∏ –ª–∏ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π?</li>
      <li>Ë≤û ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç (–≤–æ –≤—Ç–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–µ)</li>
      <li>‰∏çÂÖ∂ ‚Äî –Ω–µ –±—É–¥–µ—Ç –ª–∏? (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å)</li>
      <li>–°—Ç—Ä—É–∫—Ç—É—Ä–∞: [–≤–æ–ø—Ä–æ—Å]? Ë≤û[–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å]?</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['‰æÜ', 'ÁôΩ', 'È¶¨', 'Ôºü', '‰∏ç', 'ÂÖ∂', '‰æÜ', 'ÁôΩ', 'È¶¨', 'Ôºü'];

    const allChars = [
      '‰æÜ', 'ÁôΩ', 'È¶¨', 'Ôºü', 'Ë≤û', '‰∏ç', 'ÂÖ∂', '‰æÜ', 'ÁôΩ', 'È¶¨', 'Ôºü',
      '‰ªä', 'Â≤Å', 'Êàë', 'Âèó', 'Âπ¥', 'Êñπ', 'Âºó', 'Èõ®', 'ÂÖÅ', 'Áéã',
      'Âêâ', 'Ëá™', 'Êò•', 'Áä¨', 'Áâõ', 'Á®ª', 'ÂÖ∂', 'Êõ∞'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        if (char === 'Ôºü') box.classList.add('punctuation');
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰æÜÁôΩÈ¶¨ÔºüË≤û‰∏çÂÖ∂‰æÜÁôΩÈ¶¨Ôºü';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    initCharPool();
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Âºó</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 4px 0;
      padding: 0;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }

    h2 {
      margin: 0 0 6px 0;
      font-size: 15px;
      font-weight: 500;
    }

    p {
      margin: 5px 0;
    }

    .pinyin-container {
      margin: 6px 0;
      border: 1px solid #ddd;
      border-radius: 3px;
      overflow: hidden;
    }

    .pinyin-toggle {
      background: #f5f5f5;
      border: none;
      padding: 5px 10px;
      width: 100%;
      text-align: left;
      cursor: pointer;
      font-size: 13px;
      color: #444;
      margin: 0;
    }

    .pinyin-toggle::after {
      content: '‚ñº';
      float: right;
      font-size: 10px;
      transition: transform 0.2s;
    }

    .pinyin-toggle.expanded::after {
      transform: rotate(180deg);
    }

    .pinyin-text {
      padding: 0 10px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease, padding 0.3s ease;
      background: #f9f9f9;
      font-style: italic;
      color: #555;
      font-size: 13px;
    }

    .pinyin-text.expanded {
      padding: 5px 10px;
      max-height: 60px;
    }

    label {
      display: block;
      margin: 5px 0;
      font-size: 14px;
    }

    input[type="radio"] {
      margin-right: 6px;
    }

    button {
      padding: 6px 10px;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      margin-top: 8px;
    }

    button:active {
      background: #0055aa;
    }

    #result {
      margin: 6px 0 0 0;
      font-size: 14px;
      min-height: 1.4em;
    }
  </style>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Âºó –≤ ¬´ÂºóÂèóÂπ¥¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÊàëÂºóÂèóÂπ¥¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">w«í f√∫ sh√≤u ni√°n</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
const options = [
  { text: "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —É—Ä–æ–∂–∞–π –±—É–¥–µ—Ç", correct: false },
  { text: "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∂–∞—è", correct: true },
  { text: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∂–∞—è", correct: false },
  { text: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —É—Ä–æ–∂–∞–π —É–∂–µ –µ—Å—Ç—å", correct: false }
];
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index; // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = "1"
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

if (selected.dataset.correct === "true") {
  resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Âºó ‚Äî —ç—Ç–æ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–∞–∫ ‰∏ç.";
  sendResult(true);
} else {
  resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Âºó –æ—Ç—Ä–∏—Ü–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.";
  sendResult(false);
}
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>

</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>



=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ‰ªä</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 4px 0;
      padding: 0;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }

    h2 {
      margin: 0 0 6px 0;
      font-size: 15px;
      font-weight: 500;
    }

    p {
      margin: 5px 0;
    }

    .pinyin-container {
      margin: 6px 0;
      border: 1px solid #ddd;
      border-radius: 3px;
      overflow: hidden;
    }

    .pinyin-toggle {
      background: #f5f5f5;
      border: none;
      padding: 5px 10px;
      width: 100%;
      text-align: left;
      cursor: pointer;
      font-size: 13px;
      color: #444;
      margin: 0;
    }

    .pinyin-toggle::after {
      content: '‚ñº';
      float: right;
      font-size: 10px;
      transition: transform 0.2s;
    }

    .pinyin-toggle.expanded::after {
      transform: rotate(180deg);
    }

    .pinyin-text {
      padding: 0 10px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease, padding 0.3s ease;
      background: #f9f9f9;
      font-style: italic;
      color: #555;
      font-size: 13px;
    }

    .pinyin-text.expanded {
      padding: 5px 10px;
      max-height: 60px;
    }

    label {
      display: block;
      margin: 5px 0;
      font-size: 14px;
    }

    input[type="radio"] {
      margin-right: 6px;
    }

    button {
      padding: 6px 10px;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      margin-top: 8px;
    }

    button:active {
      background: #0055aa;
    }

    #result {
      margin: 6px 0 0 0;
      font-size: 14px;
      min-height: 1.4em;
    }
  </style>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰ªä –≤ ¬´‰ªäÊ≠≤„Äç?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰ªäÊ≠≤ÂïÜÂèóÂπ¥¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">jƒ´n su√¨ shƒÅng sh√≤u ni√°n</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
const options = [
  { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ—à–ª–æ–µ", correct: false },
  { text: "–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ ¬´–Ω—ã–Ω–µ—à–Ω–∏–π¬ª", correct: true },
  { text: "–û–∑–Ω–∞—á–∞–µ—Ç ¬´–±—É–¥—É—â–∏–π¬ª", correct: false },
  { text: "–í—ã—Ä–∞–∂–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å", correct: false }
];
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index; // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = "1"
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

if (selected.dataset.correct === "true") {
  resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‰ªä ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–µ: ¬´—Å–µ–π—á–∞—Å¬ª, ¬´–Ω—ã–Ω–µ—à–Ω–∏–π¬ª.";
  sendResult(true);
} else {
  resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. ‰ªä –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏.";
  sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ‰ªä");
}
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>

</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>



=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: ‰æÜ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 4px 0;
      padding: 0;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }

    h2 {
      margin: 0 0 6px 0;
      font-size: 15px;
      font-weight: 500;
    }

    p {
      margin: 5px 0;
    }

    .pinyin-container {
      margin: 6px 0;
      border: 1px solid #ddd;
      border-radius: 3px;
      overflow: hidden;
    }

    .pinyin-toggle {
      background: #f5f5f5;
      border: none;
      padding: 5px 10px;
      width: 100%;
      text-align: left;
      cursor: pointer;
      font-size: 13px;
      color: #444;
      margin: 0;
    }

    .pinyin-toggle::after {
      content: '‚ñº';
      float: right;
      font-size: 10px;
      transition: transform 0.2s;
    }

    .pinyin-toggle.expanded::after {
      transform: rotate(180deg);
    }

    .pinyin-text {
      padding: 0 10px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease, padding 0.3s ease;
      background: #f9f9f9;
      font-style: italic;
      color: #555;
      font-size: 13px;
    }

    .pinyin-text.expanded {
      padding: 5px 10px;
      max-height: 60px;
    }

    label {
      display: block;
      margin: 5px 0;
      font-size: 14px;
    }

    input[type="radio"] {
      margin-right: 6px;
    }

    button {
      padding: 6px 10px;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      margin-top: 8px;
    }

    button:active {
      background: #0055aa;
    }

    #result {
      margin: 6px 0 0 0;
      font-size: 14px;
      min-height: 1.4em;
    }
  </style>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‰æÜ –≤ ¬´‰æÜÊ≠≤„Äç?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´‰æÜÊ≠≤‰∏çÂÖ∂ÂèóÂπ¥¬ª ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">l√°i su√¨ b√π q√≠ sh√≤u ni√°n</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
const options = [
  { text: "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–≤ –±—É–¥—É—â–µ–º¬ª", correct: false },
  { text: "–í —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–±—É–¥—É—â–∏–π¬ª", correct: true },
  { text: "–û–∑–Ω–∞—á–∞–µ—Ç ¬´–ø—Ä–æ—à–ª—ã–π¬ª", correct: false },
  { text: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –ª—é–¥—å–º–∏", correct: false }
];
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index; // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = "1"
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

if (selected.dataset.correct === "true") {
  resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‰æÜ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‰æÜÊ≠≤) ‚Äî ¬´–±—É–¥—É—â–∏–π¬ª, –Ω–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç—Å—è.";
  sendResult(true);
} else {
  resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. ‰æÜ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏, –Ω–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.";
  sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ ‰æÜ");
}
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>

</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>



=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–ó–∞–¥–∞–Ω–∏–µ: Ëá™</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 4px 0;
      padding: 0;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }

    h2 {
      margin: 0 0 6px 0;
      font-size: 15px;
      font-weight: 500;
    }

    p {
      margin: 5px 0;
    }

    .pinyin-container {
      margin: 6px 0;
      border: 1px solid #ddd;
      border-radius: 3px;
      overflow: hidden;
    }

    .pinyin-toggle {
      background: #f5f5f5;
      border: none;
      padding: 5px 10px;
      width: 100%;
      text-align: left;
      cursor: pointer;
      font-size: 13px;
      color: #444;
      margin: 0;
    }

    .pinyin-toggle::after {
      content: '‚ñº';
      float: right;
      font-size: 10px;
      transition: transform 0.2s;
    }

    .pinyin-toggle.expanded::after {
      transform: rotate(180deg);
    }

    .pinyin-text {
      padding: 0 10px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease, padding 0.3s ease;
      background: #f9f9f9;
      font-style: italic;
      color: #555;
      font-size: 13px;
    }

    .pinyin-text.expanded {
      padding: 5px 10px;
      max-height: 60px;
    }

    label {
      display: block;
      margin: 5px 0;
      font-size: 14px;
    }

    input[type="radio"] {
      margin-right: 6px;
    }

    button {
      padding: 6px 10px;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      margin-top: 8px;
    }

    button:active {
      background: #0055aa;
    }

    #result {
      margin: 6px 0 0 0;
      font-size: 14px;
      min-height: 1.4em;
    }
  </style>
</head>
<body>

  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç Ëá™ –≤ ¬´Ëá™‰æÜ„Äç?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÊñπÂÖ∂Ëá™‰æÜ„Äç ‚Äî —ç—Ç–æ:</strong></p>

  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
      –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">fƒÅng q√≠ z√¨ l√°i</div>
  </div>

  <div id="answers"></div>

  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: [—Ç–µ–∫—Å—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (true/false)]
const options = [
  { text: "–û–∑–Ω–∞—á–∞–µ—Ç ¬´–¥—Ä—É–≥–æ–π¬ª", correct: false },
  { text: "–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –º–µ—Å—Ç–∞", correct: false },
  { text: "–í—ã—Ä–∞–∂–∞–µ—Ç —Å–∞–º–æ–¥–≤–∏–∂–µ–Ω–∏–µ: ¬´—Å–∞–º –ø—Ä–∏–π—Ç–∏¬ª", correct: true },
  { text: "–ß–∞—Å—Ç–∏—Ü–∞ –±—É–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", correct: false }
];
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates)
    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";

      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index; // —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = "1"
        input.dataset.correct = opt.correct;

        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
    function check() {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById("result");

      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }

if (selected.dataset.correct === "true") {
  resultEl.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Ëá™ ‚Äî ¬´—Å–∞–º¬ª, –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ Ëá™‰æÜ ‚Äî ¬´–ø—Ä–∏–¥—ë—Ç —Å–∞–º¬ª.";
  sendResult(true);
} else {
  resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. Ëá™ –≤—ã—Ä–∞–∂–∞–µ—Ç —Å–∞–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.";
  sendResult(false, "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ Ëá™");
}
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    window.onload = renderOptions;
  </script>

</body>
</html>

<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>



=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–£—Ä–æ–∫ 2 ‚Äî –ß–∞—Å—Ç–∏—Ü—ã</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 6px;
      font-size: 14px;
      background: #fff;
      color: #333;
    }

    h2 {
      margin: 0 0 8px 0;
      font-size: 15px;
      font-weight: 500;
    }

    .grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 8px;
    }

    .cell {
      border: 1px solid #ddd;
      border-radius: 6px;
      padding: 8px 6px;
      text-align: center;
      background: #f9f9f9;
      font-size: 14px;
      cursor: pointer;
      height: 70px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .cell strong {
      font-weight: 500;
      font-size: 15px;
    }

    .cell .status {
      font-size: 12px;
      margin-top: 2px;
      opacity: 0.7;
    }

    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      z-index: 10;
      justify-content: center;
      align-items: center;
    }

    .modal-content {
      background: #fff;
      border-radius: 8px;
      padding: 12px;
      width: 90%;
      max-width: 350px;
      font-size: 14px;
    }

    .modal-header {
      margin: 0 0 8px 0;
      font-size: 15px;
      text-align: center;
    }

    .pinyin-container {
      margin: 6px 0;
      border: 1px solid #eee;
      border-radius: 4px;
      overflow: hidden;
    }

    .pinyin-toggle {
      background: #f5f5f5;
      border: none;
      padding: 4px 8px;
      width: 100%;
      text-align: left;
      font-size: 13px;
      color: #444;
      cursor: pointer;
    }

    .pinyin-toggle::after {
      content: '‚ñº';
      float: right;
      font-size: 10px;
    }

    .pinyin-toggle.expanded::after {
      transform: rotate(180deg);
    }

    .pinyin-text {
      padding: 0 8px;
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.3s ease;
      background: #fafafa;
      font-style: italic;
      color: #666;
      font-size: 13px;
    }

    .pinyin-text.expanded {
      padding: 4px 8px;
      max-height: 60px;
    }

    .options label {
      display: block;
      margin: 5px 0;
      font-size: 14px;
    }

    button {
      padding: 6px 10px;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-top: 10px;
    }

    button:active {
      background: #0055aa;
    }

    #result {
      margin: 8px 0 0 0;
      font-size: 14px;
      min-height: 1.4em;
      text-align: center;
    }
  </style>
</head>
<body>

  <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>

  <div class="grid">
    <div class="cell" onclick="openModal('q1')">
      <strong>‰ªäÊ≠≤</strong>
      <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
      <strong>‰æÜÊ≠≤</strong>
      <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
      <strong>‰∏çÂÖ∂ÂèóÂπ¥</strong>
      <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
      <strong>Ëá™‰æÜ</strong>
      <span class="status" id="status-q4">?</span>
    </div>
  </div>

  <button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
  <div id="modal-q1" class="modal">
    <div class="modal-content">
      <div class="modal-header">‰ªäÊ≠≤</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">jƒ´n su√¨</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q1" value="–Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥"> –Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥</label>
        <label><input type="radio" name="q1" value="–±—É–¥—É—â–∏–π –≥–æ–¥"> –±—É–¥—É—â–∏–π –≥–æ–¥</label>
        <label><input type="radio" name="q1" value="–ø—Ä–æ—à–ª—ã–π –≥–æ–¥"> –ø—Ä–æ—à–ª—ã–π –≥–æ–¥</label>
        <label><input type="radio" name="q1" value="–µ–∂–µ–≥–æ–¥–Ω–æ"> –µ–∂–µ–≥–æ–¥–Ω–æ</label>
      </div>
      <button onclick="closeModal('q1')">OK</button>
    </div>
  </div>

  <div id="modal-q2" class="modal">
    <div class="modal-content">
      <div class="modal-header">‰æÜÊ≠≤</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">l√°i su√¨</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q2" value="–Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥"> –Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥</label>
        <label><input type="radio" name="q2" value="–±—É–¥—É—â–∏–π –≥–æ–¥"> –±—É–¥—É—â–∏–π –≥–æ–¥</label>
        <label><input type="radio" name="q2" value="–ø—Ä–æ—à–ª—ã–π –≥–æ–¥"> –ø—Ä–æ—à–ª—ã–π –≥–æ–¥</label>
        <label><input type="radio" name="q2" value="–≤ –¥–µ–Ω—å –ª–∞–π"> –≤ –¥–µ–Ω—å –ª–∞–π</label>
      </div>
      <button onclick="closeModal('q2')">OK</button>
    </div>
  </div>

  <div id="modal-q3" class="modal">
    <div class="modal-content">
      <div class="modal-header">‰∏çÂÖ∂ÂèóÂπ¥</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">b√π q√≠ sh√≤u ni√°n</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q3" value="—É–∂–µ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π"> —É–∂–µ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–∂–∞–π</label>
        <label><input type="radio" name="q3" value="–Ω–µ –ø–æ–ª—É—á–∏–º —É—Ä–æ–∂–∞–π"> –Ω–µ –ø–æ–ª—É—á–∏–º —É—Ä–æ–∂–∞–π</label>
        <label><input type="radio" name="q3" value="–±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π?"> –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞–π?</label>
        <label><input type="radio" name="q3" value="–Ω–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è?"> –Ω–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è?</label>
      </div>
      <button onclick="closeModal('q3')">OK</button>
    </div>
  </div>

  <div id="modal-q4" class="modal">
    <div class="modal-content">
      <div class="modal-header">Ëá™‰æÜ</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">z√¨ l√°i</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q4" value="–ø—Ä–∏–¥—É—Ç –æ—Ç—Ç—É–¥–∞"> –ø—Ä–∏–¥—É—Ç –æ—Ç—Ç—É–¥–∞</label>
        <label><input type="radio" name="q4" value="–ø—Ä–∏–¥—É—Ç —Å–∞–º–∏"> –ø—Ä–∏–¥—É—Ç —Å–∞–º–∏</label>
        <label><input type="radio" name="q4" value="–Ω–µ –ø—Ä–∏–¥—É—Ç"> –Ω–µ –ø—Ä–∏–¥—É—Ç</label>
        <label><input type="radio" name="q4" value="–ø–æ—Å–ª–∞—Ç—å –Ω–∞–∑–∞–¥"> –ø–æ—Å–ª–∞—Ç—å –Ω–∞–∑–∞–¥</label>
      </div>
      <button onclick="closeModal('q4')">OK</button>
    </div>
  </div>

  <script>
    const correctAnswers = {
      q1: "–Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ–¥",
      q2: "–±—É–¥—É—â–∏–π –≥–æ–¥",
      q3: "–Ω–µ –±—É–¥–µ—Ç –ª–∏ —É—Ä–æ–∂–∞—è?",
      q4: "–ø—Ä–∏–¥—É—Ç —Å–∞–º–∏"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
      document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
      const selected = document.querySelector(`input[name="${id}"]:checked`);
      if (selected) {
        userAnswers[id] = selected.value;
        document.getElementById(`status-${id}`).textContent = "‚úì";
        document.getElementById(`status-${id}`).style.color = "green";
      }
      document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
      const resultEl = document.getElementById("result");
      const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

      if (!allAnswered) {
        resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
        return;
      }

      let correctCount = 0;
      for (const id in correctAnswers) {
        if (userAnswers[id] === correctAnswers[id]) correctCount++;
      }

      if (correctCount === 4) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
        sendResult(true);
      } else {
        const wrong = 4 - correctCount;
        resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
        sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



