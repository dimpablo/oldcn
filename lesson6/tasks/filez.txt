=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –±–∞–ª–ª–æ–≤
  function sendResult(success, message, points = 0) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞"),
      points: points // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = '';
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  let totalPointsEarned = 0;
  let strokeCount = 0;
  let mistakes = 0;

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');
    const splashH1 = splashScreen.querySelector('h1');
    const splashP = splashScreen.querySelector('p');

    setTimeout(() => {
      const hash = window.location.hash.slice(1);
      if (!hash) {
        splashP.textContent = "‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ";
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ", 0);
        return;
      }

      const char = decodeURIComponent(hash);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
      splashH1.textContent = char;

      // === –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ ===
      HanziWriter.loadCharacterData(char)
        .then(charData => {
          // ‚úÖ –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑
          splashScreen.style.display = 'none';
          characterDiv.style.display = 'block';

          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–æ–≤
          strokeCount = charData.strokes.length;

          const writer = HanziWriter.create('character-target-div', char, {
            width: 300,
            height: 300,
            showCharacter: false,
            showOutline: false,
            showHintAfterMisses: 1,
            highlightOnComplete: false,
            padding: 5
          });

          writer.quiz({
            leniency: 2.0,

            onCorrectStroke: function(strokeData) {
              // ‚úÖ +1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
              totalPointsEarned += 1;
              console.log(`‚úÖ –®—Ç—Ä–∏—Ö ${strokeData.strokeNum} ‚Äî +1 –±–∞–ª–ª`);
            },

            onMistake: function(strokeData) {
              console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
              flashScreen('error');
              mistakes++;
            },

            onComplete: function(summaryData) {
              console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
              flashScreen('success');

              // ‚úÖ +2 –±–∞–ª–ª–∞ –∑–∞ –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
              totalPointsEarned += 2;

              sendResult(
                true,
                `–ò–µ—Ä–æ–≥–ª–∏—Ñ "${char}" –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ`,
                totalPointsEarned
              );
            }
          });

        })
        .catch(err => {
          // ‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
          console.warn(`üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞: ${char}`, err);

          // === –û–°–¢–ê–í–õ–Ø–ï–ú –ó–ê–°–¢–ê–í–ö–£, –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ ===
          splashP.innerHTML = `
            –û—á–µ–Ω—å –¥—Ä–µ–≤–Ω–∏–π –∏ —Ä–µ–¥–∫–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ üòî<br>
            –°–æ—Ñ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –æ—Ç—Ä–∏—Å–æ–≤–∫—É.<br>
            <strong>–ü—Ä–∏–¥—ë—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å –µ–≥–æ –æ—Ç —Ä—É–∫–∏ ‚úçÔ∏è</strong>
          `;

          // –ú–µ—Ä—Ü–∞–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
          flashScreen('error');

          // ‚úÖ –ù–∏—á–µ–≥–æ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º –∏ –Ω–µ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
          setTimeout(() => {
            sendResult(
              true,
              `–î—Ä–µ–≤–Ω–∏–π –∏–µ—Ä–æ–≥–ª–∏—Ñ "${char}" ‚Äî –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`,
              0 // üü¢ 0 –±–∞–ª–ª–æ–≤ ‚Äî –Ω–µ –≤–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            );
          }, 1200);
        });
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
  window.addEventListener('beforeunload', () => {
    if (totalPointsEarned === 0 && mistakes > 0) {
      // ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –æ—à–∏–±–∫–∞–º–∏ ‚Äî —à—Ç—Ä–∞—Ñ -1
      sendResult(false, "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ", -1);
    }
  });
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task10.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: ÈªçÂπ¥ÊúâË∂≥Èõ®</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ñ—Ä–∞–∑–∞ ¬´ÈªçÂπ¥ÊúâË∂≥Èõ®¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ Êúâ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–∂–∞—è.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">sh«î ni√°n y«íu z√∫ y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è", correct: true },
      { text: "–£—Ä–æ–∂–∞–π —Ä–∏—Å–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—è", correct: false },
      { text: "–ù–∞ –ø–æ–ª–µ –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞", correct: false },
      { text: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –Ω–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<br>
          ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)¬ª<br>
          ‚Ä¢ <strong>ÈªçÂπ¥</strong> ‚Äî ¬´—É—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞¬ª<br>
          ‚Ä¢ <strong>Ë∂≥Èõ®</strong> ‚Äî ¬´–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è¬ª<br>
          –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å <strong>Êúâ</strong> –≤—ã—Ä–∞–∂–∞–µ—Ç –Ω–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Êúâ –∏ Èªç.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task11.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –ø—Ä–µ–¥–ª–æ–≥ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª –∏–ª–∏ ¬´–∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç‚Ä¶¬ª?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "Âèä (j√≠) ‚Äî –∫ –º–æ–º–µ–Ω—Ç—É, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç", correct: true },
      { text: "‰∫é (y√∫) ‚Äî –≤ (–º–µ—Å—Ç–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏)", correct: false },
      { text: "Ëá™ (z√¨) ‚Äî –æ—Ç, –Ω–∞—á–∏–Ω–∞—è —Å", correct: false },
      { text: "Ëá≥ (zh√¨) ‚Äî –¥–æ—Å—Ç–∏–≥–∞—Ç—å", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          <strong>Âèä j√≠</strong> ‚Äî —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–≥, –æ–∑–Ω–∞—á–∞—é—â–∏–π ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
          –í —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å <strong>Êúâ</strong> –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:<br>
          <em>–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å</em>.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Âèä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Ä–µ–º–µ–Ω–∏.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task12.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 6: –ì–∞–¥–∞–Ω–∏—è –æ –¥–æ–∂–¥–µ –∏ –±–µ–¥–∞—Ö</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ ¬´Êúâ¬ª –∏ –ø—Ä–µ–¥–ª–æ–≥ ¬´Âèä¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
</div>

<p>–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–ø–∏—Å–∏. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏¬ª ‚Äî –≤–µ—Ä–Ω–æ: ¬´Âèä¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ä–æ–∫, ¬´Êúâ¬ª –≤—ã—Ä–∞–∂–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è", 
      correct: true 
    },
    { 
      text: "¬´–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Êúâ¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∏–º–µ—Ç—å/–±—É–¥–µ—Ç¬ª, –∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ", 
      correct: false 
    },
    { 
      text: "¬´–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Âèä¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, –∞ –Ω–µ ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª", 
      correct: false 
    },
    { 
      text: "¬´–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –¥–æ–∂–¥–µ, –∞ –Ω–µ –æ –∑–∞—Å—É—Ö–µ", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<br>
        ‚Ä¢ <strong>Âèä j√≠</strong> ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ä–æ–∫)<br>
        ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç¬ª (–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è)<br>
        ‚Ä¢ <strong>Ëå≤ zƒ´</strong> ‚Äî ¬´—ç—Ç–æ—Ç¬ª (—É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ)<br>
        ‚Ä¢ <strong>Â§ßÈõ® d√† y«î</strong> ‚Äî ¬´—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å¬ª<br><br>
        –§—Ä–∞–∑–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´Êúâ¬ª ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –∞ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task13.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–£—Ä–æ–∫ 6: –ü–æ–≥–æ–¥–∞, –±–æ–ª–µ–∑–Ω–∏ –∏ –º–∏—Å—Å–∏–∏</title>
</head>
<body>
<h2>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª?</h2>
<p><strong>–ü—Ä–∏–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>

<div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
    </button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
</div>

<p>–≠—Ç–æ –≥–∞–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –£—Ä–æ–∫–∞ 6. –ö–∞–∫–æ–≤–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?</p>

<div id="answers"></div>
<button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<script>
  const options = [
    { 
      text: "¬´–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏¬ª ‚Äî –≤–µ—Ä–Ω–æ: ¬´Âèä¬ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ä–æ–∫, ¬´Êúâ¬ª –≤—ã—Ä–∞–∂–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞ ¬´Ëå≤‰∫åÊúà¬ª ‚Äî ¬´—ç—Ç–æ—Ç –≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü¬ª", 
      correct: true 
    },
    { 
      text: "¬´–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Êúâ¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∏–º–µ—Ç—å/–±—É–¥–µ—Ç¬ª, –∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ", 
      correct: false 
    },
    { 
      text: "¬´–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: ¬´Âèä¬ª –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, –∞ –Ω–µ ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª", 
      correct: false 
    },
    { 
      text: "¬´–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞¬ª ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ: –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –¥–æ–∂–¥–µ, –∞ –Ω–µ –æ –∑–∞—Å—É—Ö–µ", 
      correct: false 
    }
  ];

  function shuffle(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function renderOptions() {
    const shuffled = shuffle(options);
    const container = document.getElementById("answers");
    if (!container) {
      console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #answers –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }
    container.innerHTML = "";

    shuffled.forEach((opt, index) => {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.type = "radio";
      input.name = "q";
      input.value = opt.correct ? "1" : "0_" + index;
      input.dataset.correct = opt.correct.toString();

      label.appendChild(input);
      label.appendChild(document.createTextNode(opt.text));
      container.appendChild(label);
    });
  }

  function check(containerId, resultId, optionsArray) {
    const selected = document.querySelector('input[name="q"]:checked');
    const resultEl = document.getElementById(resultId);

    if (!selected) {
      resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
      return;
    }

    if (selected.dataset.correct === "true") {
      resultEl.innerHTML = `
        ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
        –≠—Ç–æ —Ç–∏–ø–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –£—Ä–æ–∫–∞ 6, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:<br>
        ‚Ä¢ <strong>Âèä j√≠</strong> ‚Äî –ø—Ä–µ–¥–ª–æ–≥ ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª, ¬´–∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç...¬ª<br>
        ‚Ä¢ <strong>Ëå≤ zƒ´</strong> ‚Äî —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ¬´—ç—Ç–æ—Ç¬ª<br>
        ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç¬ª (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)<br>
        ‚Ä¢ <strong>Â§ßÈõ® d√† y«î</strong> ‚Äî ¬´—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å¬ª<br><br>
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: ¬´–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏¬ª.
      `;
      sendResult(true);
    } else {
      resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: ¬´Êúâ¬ª ‚Äî —ç—Ç–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –∞ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ; ¬´Âèä¬ª ‚Äî –Ω–µ ¬´–Ω–∞—á–∏–Ω–∞—è —Å¬ª, –∞ ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª.";
      sendResult(false);
    }
  }

  function sendResult(success) {
    window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
  }

  window.onload = renderOptions;
</script>
</body>
</html>

<!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -->
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task14.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–£—Ä–æ–∫ 6 ‚Äî –ü–æ–≥–æ–¥–∞, –±–æ–ª–µ–∑–Ω–∏ –∏ –º–∏—Å—Å–∏–∏</title>
</head>
<body>

<h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h2>

<div class="grid">
    <div class="cell" onclick="openModal('q1')">
        <strong>ÈªçÂπ¥ÊúâË∂≥Èõ®</strong>
        <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
        <strong>Ëå≤ÈÇë‰∫°ÊåØ</strong>
        <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
        <strong>ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</strong>
        <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
        <strong>Áéã‰ΩøÁúîÁæå</strong>
        <span class="status" id="status-q4">?</span>
    </div>
</div>

<button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<p id="result"></p>

<!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
<div id="modal-q1" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÈªçÂπ¥ÊúâË∂≥Èõ®</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">sh«î ni√°n y«íu z√∫ y«î</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q1" value="–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è">–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è</label>
            <label><input type="radio" name="q1" value="–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—è">–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—è</label>
            <label><input type="radio" name="q1" value="–£—Ä–æ–∂–∞–π —Ä–∏—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—å">–£—Ä–æ–∂–∞–π —Ä–∏—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—å</label>
            <label><input type="radio" name="q1" value="–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –º–∞–ª—ã–º">–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –º–∞–ª—ã–º</label>
        </div>
        <button onclick="closeModal('q1')">OK</button>
    </div>
</div>

<div id="modal-q2" class="modal">
    <div class="modal-content">
        <div class="modal-header">Ëå≤ÈÇë‰∫°ÊåØ</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">zƒ´ y√¨ w√∫ zh√®n</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q2" value="–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏">–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏</label>
            <label><input type="radio" name="q2" value="–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∞">–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∞</label>
            <label><input type="radio" name="q2" value="–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –ø–æ–≥–∏–±–Ω–µ—Ç">–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –ø–æ–≥–∏–±–Ω–µ—Ç</label>
            <label><input type="radio" name="q2" value="–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç —É–∫—Ä–µ–ø–ª—ë–Ω">–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç —É–∫—Ä–µ–ø–ª—ë–Ω</label>
        </div>
        <button onclick="closeModal('q2')">OK</button>
    </div>
</div>

<div id="modal-q3" class="modal">
    <div class="modal-content">
        <div class="modal-header">ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q3" value="–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏">–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏</label>
            <label><input type="radio" name="q3" value="–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏">–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏</label>
            <label><input type="radio" name="q3" value="–î–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è">–î–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è</label>
            <label><input type="radio" name="q3" value="–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞">–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞</label>
        </div>
        <button onclick="closeModal('q3')">OK</button>
    </div>
</div>

<div id="modal-q4" class="modal">
    <div class="modal-content">
        <div class="modal-header">Áéã‰ΩøÁúîÁæå</div>
        <div class="pinyin-container">
            <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">
                –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å
            </button>
            <div class="pinyin-text">w√°ng sh«ê d√† qiƒÅng</div>
        </div>
        <div class="options">
            <label><input type="radio" name="q4" value="–ø–æ—Å–ª—ã –≤–∞–Ω–∞ –∏ –ø–ª–µ–º—è –¶—è–Ω—å">–ø–æ—Å–ª—ã –≤–∞–Ω–∞ –∏ –ø–ª–µ–º—è –¶—è–Ω—å</label>
            <label><input type="radio" name="q4" value="–≤–æ–π–Ω–∞ –≤–∞–Ω–∞ —Å –¶—è–Ω—å">–≤–æ–π–Ω–∞ –≤–∞–Ω–∞ —Å –¶—è–Ω—å</label>
            <label><input type="radio" name="q4" value="–º–∏—Å—Å–∏—è –≤–∞–Ω–∞ –ø—Ä–æ—Ç–∏–≤ –¶—è–Ω—å">–º–∏—Å—Å–∏—è –≤–∞–Ω–∞ –ø—Ä–æ—Ç–∏–≤ –¶—è–Ω—å</label>
            <label><input type="radio" name="q4" value="–ø–æ—Å–ª—ã –¶—è–Ω—å –∏–¥—É—Ç –∫ –≤–∞–Ω—É">–ø–æ—Å–ª—ã –¶—è–Ω—å –∏–¥—É—Ç –∫ –≤–∞–Ω—É</label>
        </div>
        <button onclick="closeModal('q4')">OK</button>
    </div>
</div>

<script>
    const correctAnswers = {
        q1: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è",
        q2: "–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏",
        q3: "–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏",
        q4: "–ø–æ—Å–ª—ã –≤–∞–Ω–∞ –∏ –ø–ª–µ–º—è –¶—è–Ω—å"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
        document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
        const selected = document.querySelector(`input[name="${id}"]:checked`);
        if (selected) {
            userAnswers[id] = selected.value;
            document.getElementById(`status-${id}`).textContent = "‚úì";
            document.getElementById(`status-${id}`).style.color = "green";
        }
        document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
        const resultEl = document.getElementById("result");
        const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

        if (!allAnswered) {
            resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
            return;
        }

        let correctCount = 0;
        for (const id in correctAnswers) {
            if (userAnswers[id] === correctAnswers[id]) correctCount++;
        }

        if (correctCount === 4) {
            resultEl.innerHTML = `
                ‚úÖ <strong>–í—Å–µ –≤–µ—Ä–Ω–æ!</strong><br>
                –í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –£—Ä–æ–∫ 6:<br>
                ‚Ä¢ –ü—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ Êúâ ‚Äî ¬´–∏–º–µ—Ç—å¬ª (—É—Å–ª–æ–≤–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ)<br>
                ‚Ä¢ –û—Ç—Ä–∏—Ü–∞–Ω–∏–µ ‰∫° ‚Äî ¬´–Ω–µ –∏–º–µ—Ç—å¬ª<br>
                ‚Ä¢ –ü—Ä–µ–¥–ª–æ–≥ Âèä ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
                ‚Ä¢ –°–æ—é–∑ Áúî ‚Äî ¬´–∏¬ª (–º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏)<br>
                ‚Ä¢ –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ Ëå≤ ‚Äî ¬´—ç—Ç–æ—Ç¬ª
            `;
            sendResult(true);
        } else {
            const wrong = 4 - correctCount;
            resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
            sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
        }
    }

    function sendResult(success, message) {
        window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task15.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 6</title>
</head>
<body>

<h2>–°–æ–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥: –£—Ä–æ–∫ 6</h2>

<div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–ó–∞–¥–∞–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º–∞—Ö –£—Ä–æ–∫–∞ 6: –ø—Ä–µ–¥–ª–æ–≥ <strong>Âèä j√≠</strong> –∏ —Å–æ—é–∑ <strong>Áúî d√†</strong>.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–º—ë–Ω!</em></p>
</div>

<div class="task-container">
    <div class="task-title">1. ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</div>
    <div class="oracle-text">ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Âèä</strong> = ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, ¬´–∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç¬ª; <strong>Êúâ</strong> = ¬´–±—É–¥–µ—Ç¬ª</p>
    </div>
</div>

<div class="task-container">
    <div class="task-title">2. ÂÜì Áúî „±ø</div>
    <div class="oracle-text">ÂÜì Áúî „±ø</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
    <div class="instructions" style="font-size:12px; padding:4px; margin-top:4px">
        <p>üí° <strong>Áúî d√†</strong> = ¬´–∏¬ª –º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –≥–ª–∞–≥–æ–ª–∞–º–∏.</p>
    </div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
// –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const expected1 = [
    ['–ö —ç—Ç–æ–º—É –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É', '–±—É–¥–µ—Ç', '—Å–∏–ª—å–Ω—ã–π', '–¥–æ–∂–¥—å'],
    ['–ë—É–¥–µ—Ç', '—Å–∏–ª—å–Ω—ã–π', '–¥–æ–∂–¥—å', '–∫ —ç—Ç–æ–º—É –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É'],
    ['–ö –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞', '–ø—Ä–∏–¥–µ—Ç', '—Å–∏–ª—å–Ω—ã–π', '–¥–æ–∂–¥—å']
];

const expected2 = [
    ['–ì–æ—É', '–∏', '–Æ–Ω'],
    ['–Æ–Ω', '–∏', '–ì–æ—É'],
    ['–ì–æ—É', '—Å', '–Æ–Ω–æ–º']
];

// –°–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Å –ª–∏—à–Ω–∏–º–∏)
const words1 = ['–ö —ç—Ç–æ–º—É –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É', '–±—É–¥–µ—Ç', '—Å–∏–ª—å–Ω—ã–π', '–¥–æ–∂–¥—å', '–≤—á–µ—Ä–∞', '–∏', '—Å–æ–ª–Ω—Ü–µ', '—É—Ä–æ–∂–∞–π', '–±—ã–ª', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '–Ω–æ'];
const words2 = ['–ì–æ—É', '–∏', '–Æ–Ω', '–æ–Ω–∏', '–ø–æ—à–ª–∏', '–æ—Ö–æ—Ç–∏—Ç—å—Å—è', '–º—ã', '—Å', '–≤–∞–º–∏', '—Ü–∞—Ä—å', '–ø–æ—Å–ª–∞–ª', '–º–æ–ª–∏—Ç–≤—É'];

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const wordPool1 = document.getElementById('word-pool1');
const wordPool2 = document.getElementById('word-pool2');
const dropArea1 = document.getElementById('drop-area1');
const dropArea2 = document.getElementById('drop-area2');
const checkBtn = document.getElementById('check-btn');
const resetBtn = document.getElementById('reset-btn');
const resultEl = document.getElementById('result');

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createWordElements(words, pool, dropArea) {
    const shuffledWords = shuffleArray(words);
    return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
            box.remove();
            dropArea.appendChild(box);
            updatePlaceholder(dropArea);
        };

        return box;
    });
}

function updatePlaceholder(dropArea) {
    const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
    dropArea.classList.toggle('has-words', hasWords);
}

let wordElements1 = [];
let wordElements2 = [];

function init() {
    // –û—á–∏—Å—Ç–∫–∞
    [wordPool1, wordPool2].forEach(p => p.innerHTML = '');
    [dropArea1, dropArea2].forEach(d => d.innerHTML = '');
    resultEl.style.display = 'none';

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    wordElements1 = createWordElements(words1, wordPool1, dropArea1);
    wordElements2 = createWordElements(words2, wordPool2, dropArea2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª—ã
    wordElements1.forEach(el => wordPool1.appendChild(el));
    wordElements2.forEach(el => wordPool2.appendChild(el));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    [dropArea1, dropArea2].forEach(updatePlaceholder);
}

// –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
[dropArea1, dropArea2].forEach((area, i) => {
    area.addEventListener('click', (e) => {
        if (e.target.classList.contains('word-box')) {
            const box = e.target;
            box.remove();
            [wordPool1, wordPool2][i].appendChild(box);
            updatePlaceholder(area);
        }
    });
});

function getWords(dropArea) {
    return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
}

function arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((val, i) => val === b[i]);
}

checkBtn.addEventListener('click', () => {
    const current1 = getWords(dropArea1);
    const current2 = getWords(dropArea2);

    const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
    const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

    if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –£—Ä–æ–∫–∞ 6:<br>
            ‚Ä¢ <strong>Âèä j√≠</strong> ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, ¬´–Ω–∞—Å—Ç—É–ø–∞—è –∫¬ª<br>
            ‚Ä¢ <strong>Áúî d√†</strong> ‚Äî —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞<br>
            ‚Ä¢ <strong>Êúâ</strong> ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ‰∏ç)
        `;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
    } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤:';
        if (!isCorrect1) message += '<br>‚Ä¢ Âèä = ¬´–∫ –º–æ–º–µ–Ω—Ç—É¬ª, –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–∏¬ª';
        if (!isCorrect2) message += '<br>‚Ä¢ Áúî = ¬´–∏¬ª –º–µ–∂–¥—É –∏–º–µ–Ω–∞–º–∏, –Ω–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π';

        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
    }
});

resetBtn.addEventListener('click', init);

function sendResult(success, message) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
</script>
</body>
</html>

=== üìÑ task16.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Êúâ vs ‰∫°: –£—Ä–æ–∫ 6</title>
</head>
<body>

<h2>Êúâ vs ‰∫°: –ù–∞–ª–∏—á–∏–µ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ</h2>

<div class="instructions">
    <div class="instructions-header" onclick="toggleInstructions()">
        <strong>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞–∂–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)</strong>
        <span class="arrow">‚ñº</span>
    </div>
    <div class="instructions-content" style="display:none">
        <p><strong>Êúâ y«íu –∏ ‰∫° w√∫ –≤ –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –∫–∏—Ç–∞–π—Å–∫–æ–º</strong></p>
        <p>–í –∞—Ä—Ö–∞–∏—á–µ—Å–∫–æ–º –¥—Ä–µ–≤–Ω–µ–∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ <strong>–Ω–∞–ª–∏—á–∏—è</strong> –∏–ª–∏ <strong>–æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è</strong> —á–µ–≥–æ-–ª–∏–±–æ –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –ø–∞—Ä–æ–π –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤–æ–≤: <strong>Êúâ</strong> –∏ <strong>‰∫°</strong>.</p>

        <p>üü¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å¬ª, ¬´–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç¬ª:</p>
        <ul>
            <li>–£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏—è, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —è–≤–ª–µ–Ω–∏—è: ¬´Êó¨ÊúâÁ¶ç¬ª ‚Äî ¬´–í –¥–µ–∫–∞–¥–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å–µ¬ª</li>
            <li>–ü–æ–¥–ª–µ–∂–∞—â–µ–µ ‚Äî –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—É–±—ä–µ–∫—Ç, –∞ –æ–±—ä–µ–∫—Ç, –∏—Å–ø—ã—Ç—ã–≤–∞—é—â–∏–π –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ</li>
        </ul>

        <p>üî¥ <strong>‰∫° w√∫</strong> ‚Äî ¬´–Ω–µ –∏–º–µ—Ç—å¬ª, ¬´–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç¬ª:</p>
        <ul>
            <li>–ù–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Å ‰∏ç, –∞ <strong>–æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ</strong>: ¬´Êó¨‰∫°Á¶ç¬ª ‚Äî ¬´–í –¥–µ–∫–∞–¥–µ –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è¬ª</li>
            <li>–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‰∏çÊúâ ‚Äî —ç—Ç–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</li>
        </ul>

        <p><em>–ü—Ä–∏–º–µ—Ä—ã:</em><br>
        "ÈªçÂπ¥ÊúâË∂≥Èõ®" ‚Üí üü¢ (–µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–æ–∂–¥—å)<br>
        "Êó¨‰∫°Á¶ç" ‚Üí üî¥ (–Ω–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è)</p>

        <p><strong>–í–∞–∂–Ω–æ!</strong><br>
        –≠—Ç–∞ –¥–∏—Ö–æ—Ç–æ–º–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞:
        <ol>
            <li>–†–µ—á—å –æ <strong>–Ω–∞–ª–∏—á–∏–∏/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏</strong> –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è, –±–æ–ª–µ–∑–Ω–∏, —É–¥–∞—á–∏ –∏ —Ç.–¥.</li>
            <li>–ü–æ–¥–ª–µ–∂–∞—â–µ–µ ‚Äî <strong>–ø–∞—Å—Å–∏–≤–Ω—ã–π –Ω–æ—Å–∏—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è</strong> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–µ–º–ª—è, –≥–æ—Ä–æ–¥, —á–µ–ª–æ–≤–µ–∫)</li>
            <li>–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–∑–≤–∞–Ω–æ –≤–Ω–µ—à–Ω–∏–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—Å—É—Ö–∞, –¥–æ–∂–¥—å, –±–æ–ª–µ–∑–Ω—å)</li>
        </ol>
        –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–µ—Å—Ç—å/–Ω–µ—Ç", –∞ <strong>—Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ø–æ–∑–∏—Ü–∏—è</strong>.</p>
    </div>
</div>

<script>
function toggleInstructions() {
    const content = document.querySelector('.instructions-content');
    const header = document.querySelector('.instructions-header');
    const arrow = header.querySelector('.arrow');
    const isHidden = content.style.display === 'none';

    content.style.display = isHidden ? 'block' : 'none';
    arrow.textContent = isHidden ? '‚ñ≤' : '‚ñº';

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –≤—ã—Å–æ—Ç–µ
    setTimeout(() => {
        window.parent.postMessage({
            type: "UPDATE_HEIGHT",
            height: document.body.scrollHeight
        }, "*");
    }, 100);
}
</script>

<div class="columns">
    <div id="column1" class="column"></div>
    <div id="column2" class="column"></div>
</div>

<div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<p id="result"></p>

<script>
const sentences = [
    { text: "Êó¨ÊúâÁ¶ç", type: "direct", explanation: "–í –¥–µ–∫–∞–¥–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å–µ ‚Äî –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Êúâ" },
    { text: "Êó¨‰∫°Á¶ç", type: "inversion", explanation: "–í –¥–µ–∫–∞–¥–µ –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Å—á–∞—Å—Ç—å—è ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–±—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‰∫°, –∞ –Ω–µ ‰∏çÊúâ" },
    { text: "Ë∫´ÊúâÁñæ", type: "direct", explanation: "–ï—Å—Ç—å –±–æ–ª–µ–∑–Ω—å —É —Ç–µ–ª–∞ ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è, Êúâ" },
    { text: "Ë∫´‰∫°Áñæ", type: "inversion", explanation: "–ù–µ—Ç –±–æ–ª–µ–∑–Ω–∏ —É —Ç–µ–ª–∞ ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‰∫°" },
    { text: "‰ªäÊúàÊúâÂ§ßÈõ®", type: "direct", explanation: "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å ‚Äî Êúâ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —è–≤–ª–µ–Ω–∏—è" },
    { text: "‰ªäÊúà‰∫°Èõ®", type: "inversion", explanation: "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è ‚Äî –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ‰∫°, –∞ –Ω–µ —á–µ—Ä–µ–∑ ‰∏çÊúâ" },
    { text: "Ë•øÂúüÂÖ∂ÊúâÈôçÁÜØ", type: "direct", explanation: "–ù–∞ –∑–∞–ø–∞–¥–Ω—ã–µ –∑–µ–º–ª–∏ –Ω–∏—Å–ø–æ—Å–ª–∞–Ω–∞ –∑–∞—Å—É—Ö–∞ ‚Äî –±—É–∫–≤. ¬´–∑–µ–º–ª–∏ –∏–º–µ—é—Ç –∑–∞—Å—É—Ö—É¬ª, Êúâ" },
    { text: "ÂÖπÈÇë‰∫°ÊåØ", type: "inversion", explanation: "–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ—Ç—Ä—è—Å–µ–Ω–∏–π ‚Äî ‰∫° –≤—ã—Ä–∞–∂–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–µ–¥—Å—Ç–≤–∏—è" },
    { text: "Êù•Êó•ÊúâËâ∞", type: "direct", explanation: "–í –±—É–¥—É—â–∏–π –¥–µ–Ω—å –±—É–¥–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç—å ‚Äî Êúâ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –Ω–∞–ª–∏—á–∏—è" },
    { text: "‰ªäÊó•‰∫°Êù•Ëâ∞", type: "inversion", explanation: "–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∞ –±–µ–¥—ã ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ, ‰∫°" }
];

function shuffleArray(array) {
    const arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}

function createSentenceElement(sentence, index) {
    const item = document.createElement('div');
    item.className = 'sentence-item';
    item.dataset.index = index;

    item.innerHTML = `
        <div class="oracle-text">${sentence.text}</div>
        <div class="toggle-container">
            <span class="toggle-text">Êúâ (–Ω–∞–ª–∏—á–∏–µ)</span>
            <label class="toggle-switch">
                <input type="checkbox">
                <span class="slider"></span>
            </label>
            <span class="toggle-text">‰∫° (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ)</span>
        </div>
    `;

    return item;
}

function init() {
    const shuffled = shuffleArray([...sentences]);
    const column1 = document.getElementById('column1');
    const column2 = document.getElementById('column2');

    column1.innerHTML = '';
    column2.innerHTML = '';
    document.getElementById('result').style.display = 'none';

    document.querySelectorAll('.sentence-item').forEach(el => el.remove());

    shuffled.slice(0, 5).forEach((s, i) => {
        const el = createSentenceElement(s, i);
        column1.appendChild(el);
    });

    shuffled.slice(5).forEach((s, i) => {
        const el = createSentenceElement(s, i + 5);
        column2.appendChild(el);
    });
}

function checkAnswers() {
    const items = document.querySelectorAll('.sentence-item');
    let allCorrect = true;

    items.forEach(item => {
        const index = item.dataset.index;
        const input = item.querySelector('input');
        const expectedType = sentences[index].type;
        const isCorrect = (input.checked && expectedType === "inversion") ||
                          (!input.checked && expectedType === "direct");

        item.classList.remove('correct', 'incorrect');
        if (isCorrect) {
            item.classList.add('correct');
        } else {
            item.classList.add('incorrect');
            allCorrect = false;
        }
    });

    const resultEl = document.getElementById('result');
    if (allCorrect) {
        resultEl.innerHTML = `
            ‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤—Å–µ —Å–ª—É—á–∞–∏ –Ω–∞–ª–∏—á–∏—è –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.<br>
            <small>–í—ã —É—Å–≤–æ–∏–ª–∏: Êúâ ‚Äî –Ω–∞–ª–∏—á–∏–µ, ‰∫° ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ; –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‰∏çÊúâ.</small>
        `;
        resultEl.className = 'success';
        sendResult(true);
    } else {
        resultEl.innerHTML = `‚ùå <b>–û—à–∏–±–∫–∞</b> –≤ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö.`;
        resultEl.className = 'error';
        sendResult(false);
    }
    resultEl.style.display = 'block';
}

function reset() {
    document.querySelectorAll('.toggle-switch input').forEach(input => {
        input.checked = false;
    });
    document.querySelectorAll('.sentence-item').forEach(item => {
        item.classList.remove('correct', 'incorrect');
    });
    document.getElementById('result').style.display = 'none';
}

function sendResult(success) {
    window.parent.postMessage({
        type: "TASK_RESULT",
        success: success,
        message: success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞"
    }, "*");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = init;
window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");

document.getElementById('check-btn').addEventListener('click', checkAnswers);
document.getElementById('reset-btn').addEventListener('click', reset);
</script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", meaning: "—Ç–µ–ª–æ; —Å–∞–º" },
  { char: "Êúâ", meaning: "–∏–º–µ—Ç—å" },
  { char: "Áñæ", meaning: "–±–æ–ª–µ–∑–Ω—å" },
  { char: "‰∫°", meaning: "–Ω–µ –∏–º–µ—Ç—å" },
  { char: "ÈÖâ", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 10-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", meaning: "–¥–æ—Å—Ç–∏–≥–∞—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞; —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ" },
  { char: "‰∫å", meaning: "–¥–≤–∞" },
  { char: "Êú™", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 8-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞; —Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "Ë∂≥", meaning: "–Ω–æ–≥–∞; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π; –≥–æ–¥–∏—Ç—å—Å—è" },
  { char: "Êó¨", meaning: "–¥–µ–∫–∞–¥–∞ (10 –¥–Ω–µ–π)" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å" },
  { char: "Á•ü", meaning: "–∑–ª–æ, –¥—É—Ö-–∏—Å–∫—É—Å–∏—Ç–µ–ª—å" },
  { char: "ÊåØ", meaning: "–ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç—å—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é" },
  { char: "ÊóÖ", meaning: "—Å–æ–±—Å—Ç–≤. –õ—é–π" },
  { char: "Ëâ±", meaning: "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å, –∏—Å–ø—ã—Ç–∞–Ω–∏–µ" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è" }, // –í dict_human.txt –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  { char: "Âúü", meaning: "–∑–µ–º–ª—è" },
  { char: "Áúî", meaning: "—Å–ª—É–∂. —Å–æ—é–∑, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∏–º–µ–Ω–∞ –∏" },
  { char: "Âè∂", meaning: "—Å–æ–≤–µ—Ä—à–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å" },
  { char: "Á•ê", meaning: "–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∂–µ—Ä—Ç–≤—ã" }
];

pairs = pairs1;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", meaning: "—Ç–µ–ª–æ; —Å–∞–º" },
  { char: "Êúâ", meaning: "–∏–º–µ—Ç—å" },
  { char: "Áñæ", meaning: "–±–æ–ª–µ–∑–Ω—å" },
  { char: "‰∫°", meaning: "–Ω–µ –∏–º–µ—Ç—å" },
  { char: "ÈÖâ", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 10-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", meaning: "–¥–æ—Å—Ç–∏–≥–∞—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞; —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ" },
  { char: "‰∫å", meaning: "–¥–≤–∞" },
  { char: "Êú™", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 8-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞; —Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "Ë∂≥", meaning: "–Ω–æ–≥–∞; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π; –≥–æ–¥–∏—Ç—å—Å—è" },
  { char: "Êó¨", meaning: "–¥–µ–∫–∞–¥–∞ (10 –¥–Ω–µ–π)" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å" },
  { char: "Á•ü", meaning: "–∑–ª–æ, –¥—É—Ö-–∏—Å–∫—É—Å–∏—Ç–µ–ª—å" },
  { char: "ÊåØ", meaning: "–ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç—å—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é" },
  { char: "ÊóÖ", meaning: "—Å–æ–±—Å—Ç–≤. –õ—é–π" },
  { char: "Ëâ±", meaning: "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å, –∏—Å–ø—ã—Ç–∞–Ω–∏–µ" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è" }, // –í dict_human.txt –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  { char: "Âúü", meaning: "–∑–µ–º–ª—è" },
  { char: "Áúî", meaning: "—Å–ª—É–∂. —Å–æ—é–∑, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∏–º–µ–Ω–∞ –∏" },
  { char: "Âè∂", meaning: "—Å–æ–≤–µ—Ä—à–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å" },
  { char: "Á•ê", meaning: "–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∂–µ—Ä—Ç–≤—ã" }
];

pairs = pairs2;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", meaning: "—Ç–µ–ª–æ; —Å–∞–º" },
  { char: "Êúâ", meaning: "–∏–º–µ—Ç—å" },
  { char: "Áñæ", meaning: "–±–æ–ª–µ–∑–Ω—å" },
  { char: "‰∫°", meaning: "–Ω–µ –∏–º–µ—Ç—å" },
  { char: "ÈÖâ", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 10-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", meaning: "–¥–æ—Å—Ç–∏–≥–∞—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞; —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ" },
  { char: "‰∫å", meaning: "–¥–≤–∞" },
  { char: "Êú™", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 8-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞; —Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "Ë∂≥", meaning: "–Ω–æ–≥–∞; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π; –≥–æ–¥–∏—Ç—å—Å—è" },
  { char: "Êó¨", meaning: "–¥–µ–∫–∞–¥–∞ (10 –¥–Ω–µ–π)" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å" },
  { char: "Á•ü", meaning: "–∑–ª–æ, –¥—É—Ö-–∏—Å–∫—É—Å–∏—Ç–µ–ª—å" },
  { char: "ÊåØ", meaning: "–ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç—å—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é" },
  { char: "ÊóÖ", meaning: "—Å–æ–±—Å—Ç–≤. –õ—é–π" },
  { char: "Ëâ±", meaning: "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å, –∏—Å–ø—ã—Ç–∞–Ω–∏–µ" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è" }, // –í dict_human.txt –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  { char: "Âúü", meaning: "–∑–µ–º–ª—è" },
  { char: "Áúî", meaning: "—Å–ª—É–∂. —Å–æ—é–∑, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∏–º–µ–Ω–∞ –∏" },
  { char: "Âè∂", meaning: "—Å–æ–≤–µ—Ä—à–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å" },
  { char: "Á•ê", meaning: "–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∂–µ—Ä—Ç–≤—ã" }
];

pairs = pairs3;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –ø–æ—à–ª–µ—Ç –Ω–∞–º –ø–æ–º–æ—â—å.</em></p>
  </div>
  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>
  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Â∏ù ‚Äî –ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞</li>
      <li>Âèó ‚Äî –¥–∞—Ä–æ–≤–∞—Ç—å, –ø–æ—à–ª—ë—Ç</li>
      <li>Êàë ‚Äî –Ω–∞–º</li>
      <li>‰Ωë ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>
  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>
  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>
  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>
  <p id="result" class="message"></p>
  <script>
    const expected = ['Â∏ù', 'Âèó', 'Êàë', '‰Ωë'];
    const allChars = [
      'Â∏ù', 'Âèó', 'Êàë', '‰Ωë',
      '‰∏ç', 'ÂÖ∂', 'ÁÜØ', 'Èôç', '‰ºê', '‰Ωú', 'Á•∏', '‰Ωô', 'Ê±ù', '‰πÉ', '‰ª•'
    ].sort(() => Math.random() - 0.5);
    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Â∏ùÂèóÊàë‰Ωë';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });
    resetBtn.addEventListener('click', initCharPool);
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();
    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task20.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ: –£—Ä–æ–∫ 6</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>

  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>

  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ dict_human.txt
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", meaning: "—Ç–µ–ª–æ; —Å–∞–º" },
  { char: "Êúâ", meaning: "–∏–º–µ—Ç—å" },
  { char: "Áñæ", meaning: "–±–æ–ª–µ–∑–Ω—å" },
  { char: "‰∫°", meaning: "–Ω–µ –∏–º–µ—Ç—å" },
  { char: "ÈÖâ", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 10-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", meaning: "–¥–æ—Å—Ç–∏–≥–∞—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞; —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ" },
  { char: "‰∫å", meaning: "–¥–≤–∞" },
  { char: "Êú™", meaning: "–Ω–∞–∑–≤–∞–Ω–∏–µ 8-–≥–æ –∑–Ω–∞–∫–∞ 12-—Ä–∏—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞; —Å–ª—É–∂. –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ" },
  { char: "Ë∂≥", meaning: "–Ω–æ–≥–∞; –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π; –≥–æ–¥–∏—Ç—å—Å—è" },
  { char: "Êó¨", meaning: "–¥–µ–∫–∞–¥–∞ (10 –¥–Ω–µ–π)" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", meaning: "–≤—ã—Ö–æ–¥–∏—Ç—å" },
  { char: "Á•ü", meaning: "–∑–ª–æ, –¥—É—Ö-–∏—Å–∫—É—Å–∏—Ç–µ–ª—å" },
  { char: "ÊåØ", meaning: "–ø–æ–¥–≤–µ—Ä–≥–Ω—É—Ç—å—Å—è –Ω–∞–ø–∞–¥–µ–Ω–∏—é" },
  { char: "ÊóÖ", meaning: "—Å–æ–±—Å—Ç–≤. –õ—é–π" },
  { char: "Ëâ±", meaning: "—Ç—Ä—É–¥–Ω–æ—Å—Ç—å, –∏—Å–ø—ã—Ç–∞–Ω–∏–µ" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", meaning: "–∏–º—è –≥–∞–¥–∞—Ç–µ–ª—è" }, // –í dict_human.txt –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  { char: "Âúü", meaning: "–∑–µ–º–ª—è" },
  { char: "Áúî", meaning: "—Å–ª—É–∂. —Å–æ—é–∑, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –∏–º–µ–Ω–∞ –∏" },
  { char: "Âè∂", meaning: "—Å–æ–≤–µ—Ä—à–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—Ç—å" },
  { char: "Á•ê", meaning: "–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –∂–µ—Ä—Ç–≤—ã" }
];

pairs = pairs4;

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 10) {
          const resultEl = document.getElementById("result");
          resultEl.innerHTML = `
            ‚úÖ <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 5:<br>
            ‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (<strong>Â∏ù</strong>)<br>
            ‚Ä¢ –ì–ª–∞–≥–æ–ª—ã ¬´–¥–∞—Ç—å/–Ω–∞–Ω–µ—Å—Ç–∏¬ª (<strong>Èôç</strong>, <strong>‰Ωú</strong>)<br>
            ‚Ä¢ –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (<strong>Êúï</strong>, <strong>‰πÉ</strong>)<br>
            ‚Ä¢ –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (<strong>ÁÜØ</strong>, <strong>Á¶ç</strong>)
          `;
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>


=== üìÑ task21.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –ø–∏–Ω—å–∏–Ω–µ–º
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", pinyin: "shƒìn" },
  { char: "Êúâ", pinyin: "y«íu" },
  { char: "Áñæ", pinyin: "j√≠" },
  { char: "‰∫°", pinyin: "w√∫" },
  { char: "ÈÖâ", pinyin: "y«íu" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", pinyin: "j√≠" },
  { char: "‰∫å", pinyin: "√®r" },
  { char: "Êú™", pinyin: "w√®i" },
  { char: "Ë∂≥", pinyin: "z√∫" },
  { char: "Êó¨", pinyin: "x√∫n" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", pinyin: "ch≈´" },
  { char: "Á•ü", pinyin: "su√¨" },
  { char: "ÊåØ", pinyin: "zh√®n" },
  { char: "ÊóÖ", pinyin: "l«ö" },
  { char: "Ëâ±", pinyin: "jiƒÅn" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", pinyin: "y«íng" },
  { char: "Âúü", pinyin: "t«î" },
  { char: "Áúî", pinyin: "d√†" },
  { char: "Âè∂", pinyin: "y√®" },
  { char: "Á•ê", pinyin: "y√≤u" }
];

pairs = pairs1

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –ø–∏–Ω—å–∏–Ω–µ–º
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", pinyin: "shƒìn" },
  { char: "Êúâ", pinyin: "y«íu" },
  { char: "Áñæ", pinyin: "j√≠" },
  { char: "‰∫°", pinyin: "w√∫" },
  { char: "ÈÖâ", pinyin: "y«íu" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", pinyin: "j√≠" },
  { char: "‰∫å", pinyin: "√®r" },
  { char: "Êú™", pinyin: "w√®i" },
  { char: "Ë∂≥", pinyin: "z√∫" },
  { char: "Êó¨", pinyin: "x√∫n" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", pinyin: "ch≈´" },
  { char: "Á•ü", pinyin: "su√¨" },
  { char: "ÊåØ", pinyin: "zh√®n" },
  { char: "ÊóÖ", pinyin: "l«ö" },
  { char: "Ëâ±", pinyin: "jiƒÅn" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", pinyin: "y«íng" },
  { char: "Âúü", pinyin: "t«î" },
  { char: "Áúî", pinyin: "d√†" },
  { char: "Âè∂", pinyin: "y√®" },
  { char: "Á•ê", pinyin: "y√≤u" }
];

pairs = pairs2

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task23.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –ø–∏–Ω—å–∏–Ω–µ–º
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", pinyin: "shƒìn" },
  { char: "Êúâ", pinyin: "y«íu" },
  { char: "Áñæ", pinyin: "j√≠" },
  { char: "‰∫°", pinyin: "w√∫" },
  { char: "ÈÖâ", pinyin: "y«íu" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", pinyin: "j√≠" },
  { char: "‰∫å", pinyin: "√®r" },
  { char: "Êú™", pinyin: "w√®i" },
  { char: "Ë∂≥", pinyin: "z√∫" },
  { char: "Êó¨", pinyin: "x√∫n" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", pinyin: "ch≈´" },
  { char: "Á•ü", pinyin: "su√¨" },
  { char: "ÊåØ", pinyin: "zh√®n" },
  { char: "ÊóÖ", pinyin: "l«ö" },
  { char: "Ëâ±", pinyin: "jiƒÅn" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", pinyin: "y«íng" },
  { char: "Âúü", pinyin: "t«î" },
  { char: "Áúî", pinyin: "d√†" },
  { char: "Âè∂", pinyin: "y√®" },
  { char: "Á•ê", pinyin: "y√≤u" }
];

pairs = pairs3

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task24.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
// –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 6 ‚Äî –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –ø–∏–Ω—å–∏–Ω–µ–º
// –ü–µ—Ä–≤–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs1 = [
  { char: "Ë∫´", pinyin: "shƒìn" },
  { char: "Êúâ", pinyin: "y«íu" },
  { char: "Áñæ", pinyin: "j√≠" },
  { char: "‰∫°", pinyin: "w√∫" },
  { char: "ÈÖâ", pinyin: "y«íu" }
];

// –í—Ç–æ—Ä–∞—è –ø—è—Ç–µ—Ä–∫–∞
const pairs2 = [
  { char: "Âèä", pinyin: "j√≠" },
  { char: "‰∫å", pinyin: "√®r" },
  { char: "Êú™", pinyin: "w√®i" },
  { char: "Ë∂≥", pinyin: "z√∫" },
  { char: "Êó¨", pinyin: "x√∫n" }
];

// –¢—Ä–µ—Ç—å—è –ø—è—Ç–µ—Ä–∫–∞
const pairs3 = [
  { char: "Âá∫", pinyin: "ch≈´" },
  { char: "Á•ü", pinyin: "su√¨" },
  { char: "ÊåØ", pinyin: "zh√®n" },
  { char: "ÊóÖ", pinyin: "l«ö" },
  { char: "Ëâ±", pinyin: "jiƒÅn" }
];

// –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ø—è—Ç–µ—Ä–∫–∞ (–Ω–µ–ø–æ–ª–Ω–∞—è)
const pairs4 = [
  { char: "Ê∞∏", pinyin: "y«íng" },
  { char: "Âúü", pinyin: "t«î" },
  { char: "Áúî", pinyin: "d√†" },
  { char: "Âè∂", pinyin: "y√®" },
  { char: "Á•ê", pinyin: "y√≤u" }
];

pairs = pairs4

    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>



=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–í —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ—Ç –±–µ–¥—Å—Ç–≤–∏–π.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ëå≤ÈÇë ‚Äî —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥</li>
      <li>‰∫° ‚Äî –Ω–µ –±—É–¥–µ—Ç, –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å</li>
      <li>Á¶ç ‚Äî –±–µ–¥—Å—Ç–≤–∏–µ, –Ω–µ—Å—á–∞—Å—Ç—å–µ</li>
      <li>Êúâ ‚Äî –∏–º–µ—Ç—å (–∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç —Å–±–∏—Ç—å —Å —Ç–æ–ª–∫—É)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–í —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ—Ç –±–µ–¥—Å—Ç–≤–∏–π" ‚Üí Ëå≤ÈÇë‰∫°Á¶ç
    const expected = ['Ëå≤', 'ÈÇë', '‰∫°', 'Á¶ç'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è
    const allChars = [
      'Ëå≤', 'ÈÇë', '‰∫°', 'Á¶ç',
      'Êúâ', 'Êó¨', 'Á•ü', 'Áñæ', 'Ë∫´', 'Èõ®', 'Ë∂≥', 'Âèä', '‰∫å', 'Êúà', 'Ë•ø', 'Âúü'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ëå≤ÈÇë‰∫°Á¶ç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è LMS)
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–£ –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–∑–Ω—å.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Ë∫´ ‚Äî —Ç–µ–ª–æ, —è (–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ–ª–µ–∑–Ω–∏)</li>
      <li>Êúâ ‚Äî –∏–º–µ—Ç—å</li>
      <li>Áñæ ‚Äî –±–æ–ª–µ–∑–Ω—å</li>
      <li>‰∫° ‚Äî –Ω–µ –∏–º–µ—Ç—å (–∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç —Å–±–∏—Ç—å —Å —Ç–æ–ª–∫—É)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–£ –º–µ–Ω—è –µ—Å—Ç—å –±–æ–ª–µ–∑–Ω—å" ‚Üí Ë∫´ÊúâÁñæ
    const expected = ['Ë∫´', 'Êúâ', 'Áñæ'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –£—Ä–æ–∫–∞ 6 –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤
    const allChars = [
      'Ë∫´', 'Êúâ', 'Áñæ', '‰∫°',
      'Âèä', '‰∫å', 'Êúà', 'Èõ®', 'Ë∂≥',
      'Êó¨', 'Á•ü', 'ÈÇë', 'Ë•ø', 'Âúü', 'ÊåØ', 'Ëâ±'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Ë∫´ÊúâÁñæ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ì–æ—É –∏ –Æ–Ω –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–º–æ—â—å.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>ÂÜì ‚Äî –ì–æ—É (–∏–º—è)</li>
      <li>Áúî ‚Äî –∏ (—Å–æ–µ–¥–∏–Ω—è–µ—Ç –∏–º–µ–Ω–∞)</li>
      <li>Ê∞∏ ‚Äî –Æ–Ω (–∏–º—è)</li>
      <li>ÂÖ∂ ‚Äî –±—É–¥–µ—Ç (—Å–ª—É–∂–µ–±–Ω–æ–µ –Ω–∞—Ä–µ—á–∏–µ)</li>
      <li>Êúâ ‚Äî –∏–º–µ—Ç—å, –ø—Ä–∏–Ω–µ—Å—Ç–∏ (–≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ¬´–Ω–∞–ª–∏—á–∏–µ –ø–æ–º–æ—â–∏¬ª)</li>
      <li>Á•ê ‚Äî –ø–æ–º–æ—â—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ì–æ—É –∏ –Æ–Ω –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–º–æ—â—å" ‚Üí ÂÜìÁúîÊ∞∏ÂÖ∂ÊúâÁ•ê
    const expected = ['ÂÜì', 'Áúî', 'Ê∞∏', 'ÂÖ∂', 'Êúâ', 'Á•ê'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –£—Ä–æ–∫–∞ 6
    const allChars = [
      'ÂÜì', 'Áúî', 'Ê∞∏', 'ÂÖ∂', 'Êúâ', 'Á•ê',
      '‰∫°', 'Ë∫´', 'Áñæ', 'Âèä', '‰∫å', 'Êúà', 'Èõ®', 'Ë∂≥',
      'Ë•ø', 'Âúü', 'Êó¨', 'Á•ü', 'Ëâ±', 'ÊåØ', 'ÊóÖ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂÜìÁúîÊ∞∏ÂÖ∂ÊúâÁ•ê';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task6.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>
  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ö –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é —ç—Ç–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Âèä ‚Äî –∫ –º–æ–º–µ–Ω—Ç—É, –∫ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é</li>
      <li>Ëå≤ ‚Äî —ç—Ç–æ–≥–æ, –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ</li>
      <li>‰∫åÊúà ‚Äî –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞</li>
      <li>Êúâ ‚Äî –±—É–¥–µ—Ç (–∏–º–µ—Ç—å—Å—è)</li>
      <li>Â§ßÈõ® ‚Äî —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º–∞—è —Ñ—Ä–∞–∑–∞: "–ö –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—é —ç—Ç–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –±—É–¥–µ—Ç —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å" ‚Üí ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®
    const expected = ['Âèä', 'Ëå≤', '‰∫å', 'Êúà', 'Êúâ', 'Â§ß', 'Èõ®'];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –£—Ä–æ–∫–∞ 6
    const allChars = [
      'Âèä', 'Ëå≤', '‰∫å', 'Êúà', 'Êúâ', 'Â§ß', 'Èõ®',
      '‰∫°', 'Ë∫´', 'Áñæ', 'Êó¨', 'Á¶ç', 'Á•ü', 'ÊåØ',
      'Ëâ±', 'Ë•ø', 'Âúü', 'Ë∂≥', 'Êù•', 'Êú™', 'ÈÖâ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª –≤ –∑–æ–Ω—É —Å–±–æ—Ä–∫–∏
    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;
      box.remove();
      dropArea.appendChild(clone);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';
      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;
        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    // –°–±—Ä–æ—Å–∏—Ç—å —Å–±–æ—Ä–∫—É
    resetBtn.addEventListener('click', initCharPool);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task7.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: –£—Ä–æ–∫ 6 ‚Äî –ü–æ–≥–æ–¥–∞, –±–æ–ª–µ–∑–Ω–∏ –∏ –º–∏—Å—Å–∏–∏</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ—Ä–∞–∑—ã?</h2>
  <p><strong>–ü—Ä–∏–º–µ—Ä: ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏", correct: true },
      { text: "–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { text: "–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏", correct: false },
      { text: "–î–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–≥–∞ <strong>Âèä j√≠</strong> ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
          –∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤–∞ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç¬ª.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Âèä –∏ Êúâ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task8.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®</title>
</head>
<body>
  <h2>–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ¬´ÂèäËå≤‰∫åÊúàÊúâÂ§ßÈõ®¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–≥ Âèä –∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ Êúâ.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">j√≠ zƒ´ √®r yu√® y«íu d√† y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–ö–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Å—è—Ü—É –±—É–¥—É—Ç —Å–∏–ª—å–Ω—ã–µ –¥–æ–∂–¥–∏", correct: true },
      { text: "–í–æ –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç –¥–æ–∂–¥—è", correct: false },
      { text: "–°–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–¥—É—Ç –¥–æ–∂–¥–∏", correct: false },
      { text: "–î–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<br>
          ‚Ä¢ <strong>Âèä j√≠</strong> ‚Äî ¬´–∫ –º–æ–º–µ–Ω—Ç—É...¬ª<br>
          ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–±—É–¥–µ—Ç (–∏–º–µ—Ç—å—Å—è)¬ª<br>
          ‚Ä¢ <strong>Ëå≤ zƒ´</strong> ‚Äî ¬´—ç—Ç–æ—Ç¬ª<br>
          ‚Ä¢ <strong>Â§ßÈõ® d√† y«î</strong> ‚Äî ¬´—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å¬ª
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Âèä –∏ Êúâ.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

=== üìÑ task9.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>–ó–∞–¥–∞–Ω–∏–µ: ÈªçÂπ¥ÊúâË∂≥Èõ®</title>
</head>
<body>
  <h2>–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã ¬´ÈªçÂπ¥ÊúâË∂≥Èõ®¬ª?</h2>
  <p><strong>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ Êúâ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–∂–∞—è.</strong></p>
  <div class="pinyin-container">
    <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
    <div class="pinyin-text">sh«î ni√°n y«íu z√∫ y«î</div>
  </div>
  <div id="answers"></div>
  <button onclick="check('answers', 'result', options)">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <script>
    const options = [
      { text: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è", correct: true },
      { text: "–£—Ä–æ–∂–∞–π —Ä–∏—Å–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ–∂–¥—è", correct: false },
      { text: "–ù–∞ –ø–æ–ª–µ –ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –∑–∞—Å—É—Ö–∞", correct: false },
      { text: "–£—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞ –Ω–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–∏–º", correct: false }
    ];

    function shuffle(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderOptions() {
      const shuffled = shuffle(options);
      const container = document.getElementById("answers");
      container.innerHTML = "";
      shuffled.forEach((opt, index) => {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.type = "radio";
        input.name = "q";
        input.value = opt.correct ? "1" : "0_" + index;
        input.dataset.correct = opt.correct.toString();
        label.appendChild(input);
        label.appendChild(document.createTextNode(opt.text));
        container.appendChild(label);
      });
    }

    function check(containerId, resultId, optionsArray) {
      const selected = document.querySelector('input[name="q"]:checked');
      const resultEl = document.getElementById(resultId);
      if (!selected) {
        resultEl.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.";
        return;
      }
      if (selected.dataset.correct === "true") {
        resultEl.innerHTML = `
          ‚úÖ <strong>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</strong><br>
          –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:<br>
          ‚Ä¢ <strong>Êúâ y«íu</strong> ‚Äî ¬´–∏–º–µ—Ç—å, –±—É–¥–µ—Ç¬ª (–ø—Ä–µ–¥–∏–∫–∞—Ç–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è)<br>
          ‚Ä¢ <strong>ÈªçÂπ¥</strong> ‚Äî ¬´—É—Ä–æ–∂–∞–π –ø—Ä–æ—Å–∞¬ª<br>
          ‚Ä¢ <strong>Ë∂≥Èõ®</strong> ‚Äî ¬´–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∂–¥—è¬ª<br>
          –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å —É—Ä–æ–∂–∞–π ‚Äî –Ω–µ —Å—É–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—è, –∞ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        `;
        sendResult(true);
      } else {
        resultEl.textContent = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ Êúâ –∏ Èªç.";
        sendResult(false);
      }
    }

    function sendResult(success) {
      window.parent.postMessage({ type: "TASK_RESULT", success }, "*");
    }

    window.onload = renderOptions;
  </script>
</body>
</html>
<script>window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");</script>

