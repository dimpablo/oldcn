<!DOCTYPE html>
<html lang="ru">
<head>
    <link rel="stylesheet" href="../../tasks.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–£—Ä–æ–∫ 6: –ò–Ω–≤–µ—Ä—Å–∏—è</title>
</head>
<body>
<h2>–ó–∞–¥–∞–Ω–∏–µ 5: –ò–Ω–≤–µ—Ä—Å–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
<div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞ –Ω–µ –¥–∞—Ä—É–µ—Ç –ª–∏ –Ω–∞–º –ø–æ–º–æ—â—å?</em></p>
</div>
<div class="toggle-hint" id="toggle-hint-btn">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</div>
<div class="hint-container" id="hint-container">
    <ul class="hint-list">
        <li>Â∏ù ‚Äî –ù–µ–±–µ—Å–Ω—ã–π –í–ª–∞–¥—ã–∫–∞</li>
        <li>‰∏ç ‚Äî –Ω–µ</li>
        <li>Êàë ‚Äî –Ω–∞–º (–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ)</li>
        <li>Âèó‰Ωë ‚Äî –¥–∞—Ä–æ–≤–∞—Ç—å –ø–æ–º–æ—â—å</li>
        <li>ÂÖ∂ ‚Äî –ª–∏ (–≤–æ–ø—Ä–æ—Å)</li>
        <li>‚ö†Ô∏è –ü—Ä–∏ ‰∏ç + –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è: ‰∏çÊàëÂèó‰Ωë</li>
    </ul>
</div>
<p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
<div id="char-pool"></div>
<p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
<div id="drop-area"></div>
<button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
<button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
<p id="result" class="message"></p>
<script>
    const expected = ['Â∏ù', '‰∏ç', 'Êàë', 'Âèó', '‰Ωë', 'ÂÖ∂'];
    const allChars = ['Â∏ù', '‰∏ç', 'Êàë', 'Âèó', '‰Ωë', 'ÂÖ∂', 'Êúâ', '‰∫°', 'Ë¥û'];
    let charPool, dropArea, resultEl;

    function init() {
        charPool = document.getElementById("char-pool");
        dropArea = document.getElementById("drop-area");
        resultEl = document.getElementById("result");
        renderChars();
    }

    function renderChars() {
        charPool.innerHTML = '';
        dropArea.innerHTML = '';
        allChars.forEach(char => {
            const box = document.createElement('div');
            box.className = 'char-box';
            box.textContent = char;
            box.onclick = () => addToDrop(box);
            charPool.appendChild(box);
        });
    }

    function addToDrop(box) {
        const clone = box.cloneNode(true);
        clone.onclick = () => { clone.remove(); charPool.appendChild(box); };
        dropArea.appendChild(clone);
    }

    document.getElementById("check-btn").addEventListener("click", () => {
        const current = Array.from(dropArea.children).map(c => c.textContent);
        if (arraysEqual(current, expected)) {
            resultEl.innerHTML = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br><strong>Â∏ù‰∏çÊàëÂèó‰ΩëÂÖ∂</strong> ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è ¬´Êàë¬ª –ø–µ—Ä–µ–¥ –≥–ª–∞–≥–æ–ª–æ–º –∏–∑-–∑–∞ ‰∏ç.";
            resultEl.className = "message success";
            sendResult(true);
        } else {
            resultEl.textContent = "‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
            resultEl.className = "message";
            sendResult(false);
        }
    });

    document.getElementById("reset-btn").addEventListener("click", init);

    function arraysEqual(a, b) {
        return a.length === b.length