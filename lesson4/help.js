// –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function () {
  // === –ù–ê–°–¢–†–û–ô–ö–ò ===
  const helpPath = '../help';
  const glyphs = ['‰∏ç', '‰∫°', 'ÂÖ∂', 'ÂèÄ', 'Âºó', 'Êõ∞', 'Ëã•', '‰∫é', 'ÂÖÅ', 'Âç†', 'ÂîØ', 'Âºú', 'Áéã', 'Ë≤û', 'Â•ö'];

  // === –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–≠–ö–†–ê–ù–ù–û–ì–û TEXTAREA –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===
  const textarea = document.createElement('textarea');
  textarea.id = 'glyph-debug-output';
  textarea.readOnly = true; // –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  textarea.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    border: none;
    margin: 0;
    padding: 16px;
    box-sizing: border-box;
    font-family: monospace;
    font-size: 14px;
    line-height: 1.5;
    color: #000;
    background: #fff;
    z-index: 99999;
    resize: none;
    outline: none;
    white-space: pre;
  `;
  textarea.placeholder = '–ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...';

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
  document.body.appendChild(textarea);

  // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
  document.body.style.visibility = 'hidden';

  // === –°–ë–û–† –ò–ù–§–û–†–ú–ê–¶–ò–ò (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–±) ===
  let log = '';

  log += 'üîç –ê–ù–ê–õ–ò–ó –ò–ï–†–û–ì–õ–ò–§–û–í ‚Äî –û–¢–õ–ê–î–ö–ê\n';
  log += '================================\n\n';

  log += `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${navigator.userAgent.includes('Mobile') ? 'Mobile' : 'Desktop'}\n`;
  log += `üåê URL: ${window.location.href}\n`;
  log += `üìÇ helpPath: ${helpPath}\n`;
  log += `üî§ –¶–µ–ª–µ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã: ${glyphs.join(', ')}\n\n`;

  log += 'üîç –ü–û–ò–°–ö –í –¢–ï–ö–°–¢–û–í–´–• –£–ó–õ–ê–•...\n';

  let totalFound = 0;
  let processedNodes = 0;

  // TreeWalker –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤
  const walker = document.createTreeWalker(
    document.body,
    NodeFilter.SHOW_TEXT,
    {
      acceptNode: function (node) {
        const parent = node.parentNode;
        const excluded = ['SCRIPT', 'STYLE', 'TEXTAREA', 'CODE', 'PRE'];
        if (excluded.includes(parent.tagName)) return NodeFilter.FILTER_REJECT;
        if (parent.hasAttribute?.('data-no-glyph-links')) return NodeFilter.FILTER_REJECT;
        return node.textContent.trim() ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
      }
    }
  );

  const nodesToReplace = [];
  let node;

  while ((node = walker.nextNode())) {
    const text = node.textContent;
    const matches = [...text].filter(char => glyphs.includes(char));
    
    if (matches.length > 0) {
      const parentTag = node.parentNode.tagName.toLowerCase();
      const computedStyle = window.getComputedStyle(node.parentNode);
      const fontSize = computedStyle.fontSize;
      const fontFamily = computedStyle.fontFamily;

      log += `üìÑ –í <${parentTag}> –Ω–∞–π–¥–µ–Ω–æ: ${matches.join(', ')}\n`;
      log += `   –®—Ä–∏—Ñ—Ç: ${fontSize}, ${fontFamily}\n`;
      log += `   –¢–µ–∫—Å—Ç: "${text.trim()}"\n\n`;

      totalFound += matches.length;
      processedNodes++;
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã (–±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –ø–æ–∫–∞)
    let fragment = document.createDocumentFragment();
    let lastIndex = 0;
    let modified = false;

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      if (glyphs.includes(char)) {
        if (i > lastIndex) {
          fragment.appendChild(document.createTextNode(text.slice(lastIndex, i)));
        }
        const link = document.createElement('a');
        link.href = `${helpPath}/${char}.html`;
        link.style.cssText = `
          background-color: #fdeced;
          padding: 0 2px;
          border-radius: 3px;
          text-decoration: none;
          display: inline-block;
          vertical-align: middle;
          font-size: inherit;
          line-height: inherit;
          font-family: inherit;
          color: inherit;
          text-size-adjust: none;
        `;
        link.appendChild(document.createTextNode(char));
        fragment.appendChild(link);
        lastIndex = i + 1;
        modified = true;
      }
    }

    if (modified) {
      if (lastIndex < text.length) {
        fragment.appendChild(document.createTextNode(text.slice(lastIndex)));
      }
      nodesToReplace.push({ node, fragment });
    }
  }

  log += `üìä –í–°–ï–ì–û: ${totalFound} –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –≤ ${processedNodes} —É–∑–ª–∞—Ö\n\n`;

  // === –¢–ê–ë–õ–ò–¶–ê #oracleTable ===
  const tableCells = document.querySelectorAll('#oracleTable td');
  log += `üîç –ü–†–û–í–ï–†–ö–ê #oracleTable: ${tableCells.length} —è—á–µ–µ–∫\n`;
  tableCells.forEach((td, i) => {
    const child = td.firstChild;
    if (child && child.nodeType === Node.TEXT_NODE) {
      const char = child.textContent.trim();
      if (glyphs.includes(char)) {
        const style = window.getComputedStyle(td);
        log += `üü© TD[${i}]: '${char}' ‚Üí —Å—Å—ã–ª–∫–∞\n`;
        log += `   –°—Ç–∏–ª–∏ TD: font-size=${style.fontSize}, padding=${style.padding}\n\n`;
      }
    }
  });

  // === .char-item ===
  const charItems = document.querySelectorAll('.char-item > span:first-child');
  log += `üîç –ü–†–û–í–ï–†–ö–ê .char-item: ${charItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n`;
  charItems.forEach((span, i) => {
    const first = span.firstChild;
    if (first && first.nodeType === Node.TEXT_NODE) {
      const char = first.textContent.trim();
      if (glyphs.includes(char)) {
        log += `üü¶ char-item[${i}]: '${char}' ‚Üí –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–æ–π\n`;
      }
    }
  });

  log += '\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Å—ã–ª–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.\n';
  log += 'üìå –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.\n';
  log += '‚è≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥...';

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ –≤ textarea
  textarea.value = log;

  // –ß–µ—Ä–µ–∑ 8 —Å–µ–∫ ‚Äî —É–±–∏—Ä–∞–µ–º textarea –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  setTimeout(() => {
    if (textarea.parentNode) {
      textarea.remove();
    }
    document.body.style.visibility = 'visible';

    // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ DOM
    nodesToReplace.forEach(({ node, fragment }) => {
      try {
        if (node.parentNode) {
          node.parentNode.replaceChild(fragment, node);
        }
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —É–∑–µ–ª', e);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    document.querySelectorAll('#oracleTable td').forEach(td => {
      const child = td.firstChild;
      if (child && child.nodeType === Node.TEXT_NODE) {
        const char = child.textContent.trim();
        if (glyphs.includes(char)) {
          td.innerHTML = '';
          const link = document.createElement('a');
          link.href = `${helpPath}/${char}.html`;
          link.style.cssText = `
            background-color: #fdeced;
            padding: 0 2px;
            border-radius: 3px;
            text-decoration: none;
            display: inline-block;
            vertical-align: middle;
            font-size: inherit;
            line-height: inherit;
            font-family: inherit;
            color: inherit;
          `;
          link.appendChild(document.createTextNode(char));
          td.appendChild(link);
          td.style.padding = '0';
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ .char-item
    document.querySelectorAll('.char-item > span:first-child').forEach(span => {
      const first = span.firstChild;
      if (first && first.nodeType === Node.TEXT_NODE) {
        const char = first.textContent.trim();
        if (glyphs.includes(char)) {
          const pinyin = span.querySelector('.inline-pinyin');
          span.innerHTML = '';
          const link = document.createElement('a');
          link.href = `${helpPath}/${char}.html`;
          link.style.cssText = `
            background-color: #fdeced;
            padding: 0 2px;
            border-radius: 3px;
            text-decoration: none;
            display: inline-block;
            vertical-align: middle;
            font-size: inherit;
            line-height: inherit;
            font-family: inherit;
            color: inherit;
          `;
          link.appendChild(document.createTextNode(char));
          span.appendChild(link);
          if (pinyin) span.appendChild(pinyin);
        }
      }
    });
  }, 8000);
});