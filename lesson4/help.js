// –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function () {
  // === –ù–ê–°–¢–†–û–ô–ö–ò ===
  const helpPath = '../help';
  const glyphs = ['‰∏ç', '‰∫°', 'ÂÖ∂', 'ÂèÄ', 'Âºó', 'Êõ∞', 'Ëã•', '‰∫é', 'ÂÖÅ', 'Âç†', 'ÂîØ', 'Âºú', 'Áéã', 'Ë≤û', 'Â•ö'];
  const debugDurationMs = 10000; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É 10 —Å–µ–∫—É–Ω–¥

  // === –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–≠–ö–†–ê–ù–ù–û–ì–û –û–ö–ù–ê –û–¢–õ–ê–î–ö–ò ===
  const debugModal = document.createElement('div');
  debugModal.id = 'glyph-debug-modal';
  debugModal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: white;
    color: #222;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: 14px;
    line-height: 1.5;
    z-index: 99999;
    padding: 16px;
    box-sizing: border-box;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
  `;

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  const header = document.createElement('h2');
  header.textContent = 'üîç –û—Ç–ª–∞–¥–∫–∞: –ò–µ—Ä–æ–≥–ª–∏—Ñ—ã –≤ —Ç–µ–∫—Å—Ç–µ';
  header.style.marginTop = '0';
  debugModal.appendChild(header);

  // –ë–ª–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤
  const log = document.createElement('div');
  log.style.cssText = `
    flex: 1;
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 12px;
    font-family: monospace;
    white-space: pre-wrap;
    overflow-y: auto;
    margin-bottom: 12px;
  `;
  debugModal.appendChild(log);

  // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
  const closeBtn = document.createElement('button');
  closeBtn.textContent = '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–∑–∞–∫—Ä—ã—Ç—å)';
  closeBtn.style.cssText = `
    padding: 12px;
    background: #4CAF50;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    cursor: pointer;
  `;
  closeBtn.addEventListener('click', () => {
    debugModal.remove();
    document.body.style.visibility = 'visible'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
  });
  debugModal.appendChild(closeBtn);

  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª–∫—É –≤ DOM
  document.body.appendChild(debugModal);

  // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏
  document.body.style.visibility = 'hidden';

  // === –°–ë–û–† –ò–ù–§–û–†–ú–ê–¶–ò–ò ===
  let debugLog = '';

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  debugLog += `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${navigator.userAgent.includes('Mobile') ? 'Mobile' : 'Desktop'}\n`;
  debugLog += `üåê URL: ${window.location.href}\n`;
  debugLog += `üìÇ helpPath: ${helpPath}\n`;
  debugLog += `üî§ –¶–µ–ª–µ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã: ${glyphs.join(', ')}\n\n`;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π
  function getStyleInfo(el, prop) {
    const value = window.getComputedStyle(el)[prop];
    return value || 'n/a';
  }

  // –°—á—ë—Ç—á–∏–∫–∏
  let totalFound = 0;
  let nodesProcessed = 0;

  // === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –£–ó–õ–û–í ===
  const walker = document.createTreeWalker(
    document.body,
    NodeFilter.SHOW_TEXT,
    {
      acceptNode: function (node) {
        const parent = node.parentNode;
        const excluded = ['SCRIPT', 'STYLE', 'TEXTAREA', 'CODE', 'PRE'];
        if (excluded.includes(parent.tagName)) return NodeFilter.FILTER_REJECT;
        if (parent.hasAttribute?.('data-no-glyph-links')) return NodeFilter.FILTER_REJECT;
        return node.textContent.trim() ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
      }
    }
  );

  const nodesToReplace = [];
  let node;

  debugLog += 'üîç –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–∞—Ö:\n';

  while ((node = walker.nextNode())) {
    const text = node.textContent;
    const matches = [...text].filter(char => glyphs.includes(char));
    if (matches.length > 0) {
      debugLog += `  üìÑ –ù–∞–π–¥–µ–Ω–æ –≤ —É–∑–ª–µ (${matches.join(',')}) ‚Üí –†–æ–¥–∏—Ç–µ–ª—å: <${node.parentNode.tagName.toLowerCase()}>`;
      const fontSize = getStyleInfo(node.parentNode, 'fontSize');
      const fontFamily = getStyleInfo(node.parentNode, 'fontFamily');
      debugLog += ` | –®—Ä–∏—Ñ—Ç: ${fontSize}, ${fontFamily}\n`;
      totalFound += matches.length;
      nodesProcessed++;
    }

    let fragment = document.createDocumentFragment();
    let lastIndex = 0;
    let modified = false;

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      if (glyphs.includes(char)) {
        if (i > lastIndex) {
          fragment.appendChild(document.createTextNode(text.slice(lastIndex, i)));
        }
        // –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É (—Å —Ç–µ–º–∏ –∂–µ —Å—Ç–∏–ª—è–º–∏, —á—Ç–æ –∏ –≤ –±–æ–µ–≤–æ–º —Å–∫—Ä–∏–ø—Ç–µ)
        const link = document.createElement('a');
        link.href = `${helpPath}/${char}.html`;
        link.style.cssText = `
          background-color: #fdeced;
          padding: 0 2px;
          border-radius: 3px;
          text-decoration: none;
          display: inline-block;
          vertical-align: middle;
          font-size: inherit;
          line-height: inherit;
          font-family: inherit;
          font-weight: inherit;
          color: inherit;
          text-size-adjust: none;
          -webkit-text-size-adjust: none;
        `;
        link.appendChild(document.createTextNode(char));
        fragment.appendChild(link);
        lastIndex = i + 1;
        modified = true;
      }
    }

    if (modified) {
      if (lastIndex < text.length) {
        fragment.appendChild(document.createTextNode(text.slice(lastIndex)));
      }
      nodesToReplace.push({ node, fragment });
    }
  }

  debugLog += `\nüìä –ù–∞–π–¥–µ–Ω–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤: ${totalFound} –≤ ${nodesProcessed} —É–∑–ª–∞—Ö\n\n`;

  // === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ê–ë–õ–ò–¶ ===
  const tableCells = document.querySelectorAll('#oracleTable td');
  debugLog += `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ #oracleTable: ${tableCells.length} —è—á–µ–µ–∫\n`;
  tableCells.forEach((td, i) => {
    const child = td.firstChild;
    if (child && child.nodeType === Node.TEXT_NODE) {
      const char = child.textContent.trim();
      if (glyphs.includes(char)) {
        debugLog += `  üü© TD[${i}]: '${char}' ‚Üí –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–æ–π\n`;
        td.innerHTML = '';
        const link = document.createElement('a');
        link.href = `${helpPath}/${char}.html`;
        link.style.cssText = `
          background-color: #fdeced;
          padding: 0 2px;
          border-radius: 3px;
          text-decoration: none;
          display: inline-block;
          vertical-align: middle;
          font-size: inherit;
          line-height: inherit;
          font-family: inherit;
          color: inherit;
        `;
        link.appendChild(document.createTextNode(char));
        td.appendChild(link);
        td.style.padding = '0';
      }
    }
  });

  // === –û–ë–†–ê–ë–û–¢–ö–ê .char-item ===
  const charItems = document.querySelectorAll('.char-item > span:first-child');
  debugLog += `\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .char-item: ${charItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n`;
  charItems.forEach((span, i) => {
    const first = span.firstChild;
    if (first && first.nodeType === Node.TEXT_NODE) {
      const char = first.textContent.trim();
      if (glyphs.includes(char)) {
        debugLog += `  üü¶ char-item[${i}]: '${char}' ‚Üí –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–æ–π\n`;
        const pinyin = span.querySelector('.inline-pinyin');
        span.innerHTML = '';
        const link = document.createElement('a');
        link.href = `${helpPath}/${char}.html`;
        link.style.cssText = `
          background-color: #fdeced;
          padding: 0 2px;
          border-radius: 3px;
          text-decoration: none;
          display: inline-block;
          vertical-align: middle;
          font-size: inherit;
          line-height: inherit;
          font-family: inherit;
          color: inherit;
        `;
        link.appendChild(document.createTextNode(char));
        span.appendChild(link);
        if (pinyin) span.appendChild(pinyin);
      }
    }
  });

  // === –ó–ê–í–ï–†–®–ï–ù–ò–ï ===
  debugLog += `\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã.\n`;
  debugLog += `‚è≥ –û–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.`;

  log.textContent = debugLog;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ DOM (—É–∂–µ –≤ —Ñ–æ–Ω–µ)
  nodesToReplace.forEach(({ node, fragment }) => {
    if (node.parentNode) {
      node.parentNode.replaceChild(fragment, node);
    }
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
  setTimeout(() => {
    if (debugModal.parentNode) {
      debugModal.remove();
      document.body.style.visibility = 'visible';
    }
  }, debugDurationMs);
});