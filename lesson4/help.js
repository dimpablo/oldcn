// –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function () {
  // === –ù–ê–°–¢–†–û–ô–ö–ò ===
  const helpPath = '../help';
  const glyphs = ['‰∏ç', '‰∫°', 'ÂÖ∂', 'ÂèÄ', 'Âºó', 'Êõ∞', 'Ëã•', '‰∫é', 'ÂÖÅ', 'Âç†', 'ÂîØ', 'Âºú', 'Áéã', 'Ë≤û', 'Â•ö'];

  // === –ü–û–õ–£–ß–ê–ï–ú –¢–ê–ë–õ–ò–¶–£ ===
  const table = document.getElementById('oracleTable');

  // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º placeholder
  const targetContainer = table || document.body;

  // === –°–û–ó–î–ê–Å–ú TEXTAREA –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===
  const textarea = document.createElement('textarea');
  textarea.id = 'glyph-debug-replacement';
  textarea.readOnly = true;
  textarea.style.cssText = `
    width: 100%;
    height: 80vh;
    min-height: 300px;
    border: 2px solid #ff69b4;
    border-radius: 8px;
    padding: 16px;
    margin: 10px 0;
    box-sizing: border-box;
    font-family: monospace;
    font-size: 14px;
    line-height: 1.5;
    color: #000;
    background: #fff0f5;
    resize: vertical;
    white-space: pre;
    outline: none;
  `;
  textarea.placeholder = '–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–¥–µ—Å—å...';

  // === –°–ë–û–† –î–ê–ù–ù–´–• ===
  let log = '';

  log += 'üîç –û–¢–õ–ê–î–ö–ê: –ó–ê–ú–ï–ù–ê #oracleTable –ù–ê –õ–û–ì\n';
  log += '====================================\n\n';

  log += `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${navigator.userAgent.includes('Mobile') ? 'Mobile' : 'Desktop'}\n`;
  log += `üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${window.location.href}\n`;
  log += `üìÇ –ü—É—Ç—å –∫ /help/: ${helpPath}\n`;
  log += `üî§ –¶–µ–ª–µ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã: ${glyphs.join(', ')}\n\n`;

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
  if (table) {
    log += `‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: #oracleTable\n`;
    log += `   –°—Ç—Ä–æ–∫: ${table.rows?.length || 'n/a'}, –Ø—á–µ–µ–∫: ${table.querySelectorAll('td').length}\n\n';
  } else {
    log += `‚ùå #oracleTable –ù–ï –Ω–∞–π–¥–µ–Ω–∞. –õ–æ–≥ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ <body>.\n\n`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ —Å—Ç–∏–ª–µ–π
  const testDiv = document.createElement('div');
  testDiv.textContent = '–¢–µ—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏';
  document.body.appendChild(testDiv);
  log += `üëÅ‚Äçüó® –¢–µ—Å—Ç: —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–Ω—ã? ‚Üí ${testDiv.offsetParent !== null ? '–î–∞' : '–ù–µ—Ç'}\n`;
  document.body.removeChild(testDiv);

  // === –°–ë–û–† –¢–ï–ö–°–¢–û–í–´–• –£–ó–õ–û–í ===
  log += 'üîç –ü–û–ò–°–ö –ò–ï–†–û–ì–õ–ò–§–û–í –í –¢–ï–ö–°–¢–ï...\n';
  const walker = document.createTreeWalker(
    document.body,
    NodeFilter.SHOW_TEXT,
    {
      acceptNode: function (node) {
        const parent = node.parentNode;
        const excluded = ['SCRIPT', 'STYLE', 'TEXTAREA', 'CODE', 'PRE'];
        if (excluded.includes(parent.tagName)) return NodeFilter.FILTER_REJECT;
        if (parent.hasAttribute?.('data-no-glyph-links')) return NodeFilter.FILTER_REJECT;
        return node.textContent.trim() ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
      }
    }
  );

  let totalFound = 0;
  let contextCounter = 0;

  let node;
  while ((node = walker.nextNode())) {
    const text = node.textContent;
    const matches = [...text].filter(char => glyphs.includes(char));
    if (matches.length > 0) {
      contextCounter++;
      const parent = node.parentNode;
      const parentStyle = window.getComputedStyle(parent);
      log += `üìÑ #${contextCounter} –í <${parent.tagName.toLowerCase()}> (—à—Ä–∏—Ñ—Ç: ${parentStyle.fontSize}, ${parentStyle.fontFamily})\n`;
      log += `   üéØ –ù–∞–π–¥–µ–Ω–æ: ${matches.join(', ')}\n`;
      log += `   üìú –ö–æ–Ω—Ç–µ–∫—Å—Ç: "${text.trim()}"\n\n`;
      totalFound += matches.length;
    }
  }

  log += `üìä –ò–¢–û–ì–û: ${totalFound} –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –≤ ${contextCounter} –º–µ—Å—Ç–∞—Ö.\n\n`;

  // === –ü–†–û–í–ï–†–ö–ê –Ø–ß–ï–ï–ö –¢–ê–ë–õ–ò–¶–´ (–µ—Å–ª–∏ –±—ã–ª–∞) ===
  if (table) {
    const tds = table.querySelectorAll('td');
    log += `üîç –ê–ù–ê–õ–ò–ó –Ø–ß–ï–ï–ö #oracleTable: ${tds.length} —à—Ç.\n`;
    tds.forEach((td, i) => {
      const text = td.textContent.trim();
      const child = td.firstChild;
      if (child && child.nodeType === Node.TEXT_NODE && text.length === 1 && glyphs.includes(text)) {
        const style = window.getComputedStyle(td);
        log += `üü© TD[${i}]: '${text}' ‚Üí –ø–æ–¥—Ö–æ–¥–∏—Ç\n`;
        log += `   üìè font-size: ${style.fontSize}, padding: ${style.padding}, display: ${style.display}\n`;
      } else if (text.length > 0) {
        log += `‚¨ú TD[${i}]: "${text}" ‚Üí –Ω–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–ª–∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ\n`;
      }
    });
    log += '\n';
  }

  // === –ü–†–û–í–ï–†–ö–ê .char-item ===
  const charItems = document.querySelectorAll('.char-item > span:first-child');
  log += `üîç .char-item —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${charItems.length}\n`;
  charItems.forEach((span, i) => {
    const text = span.textContent.trim();
    if (text.length === 1 && glyphs.includes(text)) {
      log += `üü¶ char-item[${i}]: '${text}' ‚Üí –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–æ–π\n`;
    } else {
      log += `‚¨ú char-item[${i}]: "${text}" ‚Üí –Ω–µ—Ç\n`;
    }
  });

  // === –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–£ –û –®–†–ò–§–¢–ê–• –î–õ–Ø –ü–†–û–í–ï–†–ö–ò ===
  log += `\nüîç –¢–ï–°–¢ –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø –®–†–ò–§–¢–ê (–Ω–∞ –ø—Ä–∏–º–µ—Ä–µ body)\n`;
  const bodyStyle = window.getComputedStyle(document.body);
  log += `üìè font-size body: ${bodyStyle.fontSize}\n`;
  log += `üî§ font-family body: ${bodyStyle.fontFamily}\n`;

  // === –§–ò–ù–ê–õ ===
  log += `\n‚úÖ –≠—Ç–æ—Ç –ª–æ–≥ –∑–∞–º–µ–Ω–∏–ª —Ç–∞–±–ª–∏—Ü—É.\n`;
  log += `üìå –ù–∞–∂–º–∏ –∏ —É–¥–µ—Ä–∂–∏ ‚Üí "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë" ‚Üí "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å".\n`;
  log += `üí° –î–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∫–∞–∂—É—Ç—Å—è –º–µ–ª–∫–∏–º–∏.`;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
  textarea.value = log;

  // === –ó–ê–ú–ï–ù–Ø–ï–ú –¢–ê–ë–õ–ò–¶–£ –ò–õ–ò –í–°–¢–ê–í–õ–Ø–ï–ú –í BODY ===
  if (table) {
    table.replaceWith(textarea);
  } else {
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const firstContent = document.body.firstElementChild;
    if (firstContent) {
      document.body.insertBefore(textarea, firstContent);
    } else {
      document.body.appendChild(textarea);
    }
  }

  // === –í–ê–ñ–ù–û: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å DOM (—Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫–∏, –∫–∞–∫ –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ) ===
  // (–¢—ã –º–æ–∂–µ—à—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–≥)
  processGlyphs();
  
  function processGlyphs() {
    // TreeWalker ‚Äî –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤
    const walker2 = document.createTreeWalker(
      document.body,
      NodeFilter.SHOW_TEXT,
      {
        acceptNode: function (node) {
          const parent = node.parentNode;
          const excluded = ['SCRIPT', 'STYLE', 'TEXTAREA', 'CODE', 'PRE'];
          if (excluded.includes(parent.tagName)) return NodeFilter.FILTER_REJECT;
          if (parent === textarea || parent.closest('#glyph-debug-replacement')) return NodeFilter.FILTER_REJECT;
          if (parent.hasAttribute?.('data-no-glyph-links')) return NodeFilter.FILTER_REJECT;
          return node.textContent.trim() ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
        }
      }
    );

    const nodesToReplace = [];
    let n;
    while (n = walker2.nextNode()) {
      const text = n.textContent;
      let fragment = document.createDocumentFragment();
      let lastIndex = 0;
      let modified = false;

      for (let i = 0; i < text.length; i++) {
        const char = text[i];
        if (glyphs.includes(char)) {
          if (i > lastIndex) {
            fragment.appendChild(document.createTextNode(text.slice(lastIndex, i)));
          }
          const link = document.createElement('a');
          link.href = `${helpPath}/${char}.html`;
          link.style.cssText = `
            background-color: #fdeced;
            padding: 0 2px;
            border-radius: 3px;
            text-decoration: none;
            display: inline-block;
            vertical-align: middle;
            font-size: inherit;
            line-height: inherit;
            font-family: inherit;
            color: inherit;
          `;
          link.appendChild(document.createTextNode(char));
          fragment.appendChild(link);
          lastIndex = i + 1;
          modified = true;
        }
      }

      if (modified) {
        if (lastIndex < text.length) {
          fragment.appendChild(document.createTextNode(text.slice(lastIndex)));
        }
        nodesToReplace.push({ node: n, fragment });
      }
    }

    nodesToReplace.forEach(({ node, fragment }) => {
      if (node.parentNode) node.parentNode.replaceChild(fragment, node);
    });
  }
});