=== üìÑ task22.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 8px;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }
    h2 {
      margin: 0 0 8px 0;
      font-size: 16px;
      text-align: center;
      font-weight: bold;
    }
    p.intro {
      text-align: center;
      font-size: 14px;
      margin: 4px 0 12px 0;
      color: #555;
    }
    /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
    .match-container {
      display: flex;
      gap: 10px;
      max-width: 100%;
      margin-bottom: 12px;
    }
    .column {
      flex: 1;
      min-width: 140px;
    }
    .column h3 {
      font-size: 14px;
      text-align: center;
      margin: 6px 0;
      color: #333;
      background: #eee;
      padding: 4px;
      border-radius: 4px;
    }
    .word-item, .def-item {
      padding: 6px 8px;
      margin: 4px 0;
      background: #f8f8f8;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
      text-align: center;
      font-size: 14px;
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .word-item.selected {
      background: #e0f0ff;
      border-color: #0066cc;
      box-shadow: 0 0 0 2px #0066cc;
    }
    .def-item.selected {
      background: #e0f0ff;
      border-color: #0066cc;
      box-shadow: 0 0 0 2px #0066cc;
    }
    .matched {
      background: #e8f5e9 !important;
      border-color: #28a745 !important;
      color: #27ae60;
      font-weight: bold;
      opacity: 0.9;
      cursor: default;
      box-shadow: none;
    }
    button {
      display: block;
      width: 100%;
      padding: 6px 10px;
      margin: 12px 0 0 0;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:active {
      background: #0055aa;
    }
    #result {
      margin: 10px 0 0 0;
      padding: 8px;
      font-size: 14px;
      text-align: center;
      border-radius: 4px;
    }
    .success {
      background: #e8f5e9;
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–ó–Ω–∞—á–µ–Ω–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Ëá™", meaning: "–ü—Ä–µ–¥–ª–æ–≥: –Ω–∞—á–∏–Ω–∞—è —Å, –æ—Ç (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞)" },
      { char: "Ëá≥", meaning: "–ü—Ä–µ–¥–ª–æ–≥: –¥–æ, –ø–æ (–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é...)" },
      { char: "‰ªä", meaning: "–°–µ–≥–æ–¥–Ω—è, –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è" },
      { char: "Êó¨", meaning: "–î–µ–∫–∞–¥–∞ (10-–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥)" },
      { char: "Ê±Ç", meaning: "–ü—Ä–æ—Å–∏—Ç—å, –º–æ–ª–∏—Ç—å (–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏)" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task18.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 8px;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }
    h2 {
      margin: 0 0 8px 0;
      font-size: 16px;
      text-align: center;
      font-weight: bold;
    }
    .instruction {
      text-align: center;
      font-size: 14px;
      margin: 4px 0 12px 0;
      color: #555;
    }
    #pairs-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 10px;
      margin-bottom: 15px;
    }
    .pair {
      border: 1px solid #ddd;
      border-radius: 6px;
      padding: 10px;
      background: #f9f9f9;
    }
    .char {
      font-size: 24px;
      text-align: center;
      margin-bottom: 8px;
      font-weight: bold;
    }
    select {
      width: 100%;
      padding: 6px;
      font-size: 14px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      display: block;
      width: 100%;
      padding: 8px;
      margin: 10px 0;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .message {
      text-align: center;
      padding: 8px;
      margin: 10px 0;
      border-radius: 4px;
      font-size: 14px;
    }
    .success {
      background: #e8f5e9;
      color: #27ae60;
    }
    .error {
      background: #ffebee;
      color: #e74c3c;
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>
  <p class="instruction">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –£—Ä–æ–∫–∞ 4</p>
  <div id="pairs-container">
    <!-- –ü–∞—Ä—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
  </div>
  <button onclick="check()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –£—Ä–æ–∫–∞ 4 —Å –∫—Ä–∞—Ç–∫–∏–º–∏, —Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const wordBank = [
      { char: "Ëá™", correct: "–Ω–∞—á–∏–Ω–∞—è —Å, –æ—Ç (–ø—Ä–µ–¥–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–∏)" },
      { char: "Ëá≥", correct: "–¥–æ, –ø–æ (–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Ëá™...Ëá≥‰∫é...)" },
      { char: "Êó¨", correct: "–¥–µ–∫–∞–¥–∞ (10-–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥)" },
      { char: "Ê±Ç", correct: "–º–æ–ª–∏—Ç—å, –ø—Ä–æ—Å–∏—Ç—å (–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏)" },
      { char: "Ë≥Ω", correct: "–∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ –≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å" }
    ];

    const container = document.getElementById("pairs-container");

    // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
    wordBank.forEach(item => {
      const options = [...new Set([item.correct, ...wordBank.filter(w => w.char !== item.char).map(w => w.correct)].sort(() => 0.5 - Math.random()).slice(0, 3))];
      options.push(item.correct);
      options.sort(() => 0.5 - Math.random());

      const pairDiv = document.createElement("div");
      pairDiv.className = "pair";
      pairDiv.innerHTML = `
        <div class="char">${item.char}</div>
        <select id="select-${item.char}">
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
          ${options.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
        </select>
      `;
      container.appendChild(pairDiv);
    });

    function check() {
      const resultEl = document.getElementById("result");
      let correctCount = 0;
      let allFilled = true;

      wordBank.forEach(item => {
        const select = document.getElementById(`select-${item.char}`);
        if (!select || !select.value) allFilled = false;
        if (select?.value === item.correct) correctCount++;
      });

      if (!allFilled) {
        resultEl.textContent = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ.";
        resultEl.className = "message error";
        sendResult(false, "–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
        return;
      }

      if (correctCount === wordBank.length) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ! –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–ª—é—á–µ–≤—É—é –ª–µ–∫—Å–∏–∫—É –£—Ä–æ–∫–∞ 4.";
        resultEl.className = "message success";
        sendResult(true);
      } else {
        const hint = "–ü–æ–¥—Å–∫–∞–∑–∫–∞: Ëá™ ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å, Ëá≥ ‚Äî –¥–æ, Êó¨ ‚Äî –¥–µ–∫–∞–¥–∞.";
        resultEl.textContent = "‚ùå " + hint;
        resultEl.className = "message error";
        sendResult(false, `–û—à–∏–±–æ–∫: ${wordBank.length - correctCount}`);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }
  </script>
</body>
</html>

=== üìÑ task27.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      padding: 15px;
      max-width: 600px;
      margin: 0 auto;
      background-color: #f5f5f5;
      color: #333;
    }
    h2 {
      text-align: center;
      color: #2c3e50;
      margin-bottom: 20px;
    }
    .grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 12px;
      margin-bottom: 15px;
    }
    .cell {
      background: white;
      border-radius: 8px;
      padding: 15px 10px;
      text-align: center;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      cursor: pointer;
      transition: all 0.2s;
    }
    .cell:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    .status {
      display: inline-block;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: #ddd;
      color: white;
      margin-left: 5px;
      line-height: 20px;
      font-weight: bold;
    }
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      z-index: 100;
      justify-content: center;
      align-items: center;
    }
    .modal-content {
      background: white;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      padding: 20px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    .modal-header {
      font-weight: bold;
      font-size: 1.2em;
      margin-bottom: 15px;
      color: #2c3e50;
      text-align: center;
    }
    .pinyin-container {
      margin-bottom: 15px;
    }
    .pinyin-toggle {
      background: #e0e0e0;
      border: none;
      padding: 5px 10px;
      border-radius: 15px;
      cursor: pointer;
      width: 100%;
      transition: background 0.2s;
    }
    .pinyin-toggle.expanded {
      background: #c0c0c0;
    }
    .pinyin-text {
      margin-top: 10px;
      padding: 8px;
      background: #f9f9f9;
      border-radius: 5px;
      text-align: center;
      display: none;
    }
    .pinyin-text.expanded {
      display: block;
    }
    .options {
      display: grid;
      grid-template-columns: 1fr;
      gap: 10px;
      margin-bottom: 20px;
    }
    .options label {
      display: flex;
      align-items: center;
      padding: 8px;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.2s;
    }
    .options label:hover {
      background: #f0f0f0;
    }
    .options input {
      margin-right: 10px;
    }
    button {
      background: #3498db;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1em;
      width: 100%;
      transition: background 0.2s;
    }
    button:hover {
      background: #2980b9;
    }
    #result {
      text-align: center;
      font-weight: bold;
      margin-top: 15px;
      min-height: 24px;
    }
  </style>
</head>
<body>

  <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</h2>

  <div class="grid">
    <div class="cell" onclick="openModal('q1')">
      <strong>Ëá™‰ªä</strong>
      <span class="status" id="status-q1">?</span>
    </div>
    <div class="cell" onclick="openModal('q2')">
      <strong>Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</strong>
      <span class="status" id="status-q2">?</span>
    </div>
    <div class="cell" onclick="openModal('q3')">
      <strong>Ëá™‰∏äÁî≤</strong>
      <span class="status" id="status-q3">?</span>
    </div>
    <div class="cell" onclick="openModal('q4')">
      <strong>Êó¨Èõ®</strong>
      <span class="status" id="status-q4">?</span>
    </div>
  </div>

  <button onclick="checkAll()" style="width:100%; margin-top:12px;">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
  <p id="result"></p>

  <!-- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ -->
  <div id="modal-q1" class="modal">
    <div class="modal-content">
      <div class="modal-header">Ëá™‰ªä</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">z√¨ jƒ´n</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q1" value="–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è">–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è</label>
        <label><input type="radio" name="q1" value="–¥–æ —Å–µ–≥–æ–¥–Ω—è">–¥–æ —Å–µ–≥–æ–¥–Ω—è</label>
        <label><input type="radio" name="q1" value="–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è">–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è</label>
        <label><input type="radio" name="q1" value="–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è">–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è</label>
      </div>
      <button onclick="closeModal('q1')">OK</button>
    </div>
  </div>

  <div id="modal-q2" class="modal">
    <div class="modal-content">
      <div class="modal-header">Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">z√¨ jƒ´n zh√¨ y√∫ ji«é ch√©n</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q2" value="–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω">–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω</label>
        <label><input type="radio" name="q2" value="—Å–µ–≥–æ–¥–Ω—è –∏ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">—Å–µ–≥–æ–¥–Ω—è –∏ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
        <label><input type="radio" name="q2" value="–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω">–ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω</label>
        <label><input type="radio" name="q2" value="—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
      </div>
      <button onclick="closeModal('q2')">OK</button>
    </div>
  </div>

  <div id="modal-q3" class="modal">
    <div class="modal-content">
      <div class="modal-header">Ëá™‰∏äÁî≤</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">z√¨ sh√†ng ji«é</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q3" value="–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
        <label><input type="radio" name="q3" value="–ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
        <label><input type="radio" name="q3" value="–¥–æ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–¥–æ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
        <label><input type="radio" name="q3" value="–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è">–í–µ—Ä—Ö–Ω–∏–π –¶–∑—è</label>
      </div>
      <button onclick="closeModal('q3')">OK</button>
    </div>
  </div>

  <div id="modal-q4" class="modal">
    <div class="modal-content">
      <div class="modal-header">Êó¨Èõ®</div>
      <div class="pinyin-container">
        <button class="pinyin-toggle" onclick="this.nextElementSibling.classList.toggle('expanded'); this.classList.toggle('expanded')">–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω—å–∏–Ω—å</button>
        <div class="pinyin-text">x√∫n y«î</div>
      </div>
      <div class="options">
        <label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã">–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã</label>
        <label><input type="radio" name="q4" value="–¥–æ–∂–¥—å —Å–µ–≥–æ–¥–Ω—è">–¥–æ–∂–¥—å —Å–µ–≥–æ–¥–Ω—è</label>
        <label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –≤ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω">–¥–æ–∂–¥—å –≤ –¥–µ–Ω—å —Ü–∑—è-—á–µ–Ω</label>
        <label><input type="radio" name="q4" value="–¥–æ–∂–¥—å –ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è">–¥–æ–∂–¥—å –ø–æ—Å–ª–µ –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è</label>
      </div>
      <button onclick="closeModal('q4')">OK</button>
    </div>
  </div>

  <script>
    const correctAnswers = {
      q1: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è",
      q2: "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω",
      q3: "–Ω–∞—á–∏–Ω–∞—è —Å –í–µ—Ä—Ö–Ω–µ–≥–æ –¶–∑—è",
      q4: "–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã"
    };

    let userAnswers = { q1: null, q2: null, q3: null, q4: null };

    function openModal(id) {
      document.getElementById(`modal-${id}`).style.display = "flex";
    }

    function closeModal(id) {
      const selected = document.querySelector(`input[name="${id}"]:checked`);
      if (selected) {
        userAnswers[id] = selected.value;
        document.getElementById(`status-${id}`).textContent = "‚úì";
        document.getElementById(`status-${id}`).style.color = "green";
      }
      document.getElementById(`modal-${id}`).style.display = "none";
    }

    function checkAll() {
      const resultEl = document.getElementById("result");
      const allAnswered = Object.values(userAnswers).every(ans => ans !== null);

      if (!allAnswered) {
        resultEl.textContent = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ.";
        return;
      }

      let correctCount = 0;
      for (const id in correctAnswers) {
        if (userAnswers[id] === correctAnswers[id]) correctCount++;
      }

      if (correctCount === 4) {
        resultEl.textContent = "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ!";
        sendResult(true);
      } else {
        const wrong = 4 - correctCount;
        resultEl.textContent = `‚ùå ${wrong} –æ—à–∏–±–∫–∏.`;
        sendResult(false, `–û—à–∏–±–∫–∏: ${wrong}/4`);
      }
    }

    function sendResult(success, message) {
      window.parent.postMessage({ type: "TASK_RESULT", success, message }, "*");
    }

    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task28.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</title>
  <style>
    /* –ú–∏–Ω–∏–º–∞–ª–∏–∑–º */
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body { font-family: Arial, sans-serif; line-height: 1.4; font-size: 13px; color: #2c3e50; background: #fff; padding: 8px; }
    h2 { font-size: 15px; margin-bottom: 5px; text-align: center; font-weight: bold; }
    .instructions { font-size: 12px; padding: 8px; background: #f5f5f5; border: 1px solid #ddd; border-radius: 4px; margin-bottom: 10px; }
    .instructions p { margin: 3px 0; }
    .task-container { margin-bottom: 15px; }
    .task-title { font-size: 13px; font-weight: bold; margin: 5px 0; }
    .oracle-text { font-size: 18px; font-weight: bold; text-align: center; margin: 5px 0; color: #111; }
    .word-pool, .drop-area { min-height: 30px; padding: 6px; margin: 6px 0; display: flex; flex-wrap: wrap; gap: 4px; border: 1px solid #ccc; border-radius: 4px; background: #f9f9f9; font-size: 13px; justify-content: center; }
    .drop-area { border-color: #3498db; background: #eef7ff; }
    .drop-area::before { content: '[–ø—É—Å—Ç–æ]'; color: #999; font-style: italic; }
    .drop-area.has-words::before { content: none; }
    .word-box { background: white; border: 1px solid #aaa; padding: 4px 8px; font-size: 13px; cursor: pointer; user-select: none; white-space: nowrap; }
    .word-box:hover { background: #e0e0e0; }
    .controls { text-align: center; margin: 10px 0; }
    button { padding: 6px 10px; margin: 0 6px; font-size: 13px; background: #0066cc; color: white; border: none; border-radius: 4px; cursor: pointer; }
    button:active { background: #0055aa; }
    #result { margin: 10px 0; padding: 8px; font-size: 13px; text-align: center; border-radius: 4px; display: none; }
    .success { background: #e8f5e9; color: #27ae60; }
    .error { background: #ffebee; color: #e74c3c; }
  </style>
</head>
<body>

  <h2>–°–æ–±–µ—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h2>

  <div class="instructions">
    <p><strong>–ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Å–ª–æ–≤–∞–º</strong>, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.</p>
    <p>–§–æ–∫—É—Å –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –£—Ä–æ–∫–∞ 4.</p>
    <p>üí° <em>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é Ëá™...Ëá≥‰∫é...</em></p>
  </div>

  <div class="task-container">
    <div class="task-title">1. Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
    <div class="oracle-text">Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞</div>
    <div id="word-pool1" class="word-pool"></div>
    <div id="drop-area1" class="drop-area"></div>
  </div>

  <div class="task-container">
    <div class="task-title">2. Êó¨Èõ®</div>
    <div class="oracle-text">Êó¨Èõ®</div>
    <div id="word-pool2" class="word-pool"></div>
    <div id="drop-area2" class="drop-area"></div>
  </div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result"></p>

  <script>
    // –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const expected1 = [
      ['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω'],
      ['–æ—Ç', '—Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ', '–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω'],
      ['—Å', '—Å–µ–≥–æ–¥–Ω—è', '–ø–æ', '–¥–µ–Ω—å', '—Ü–∑—è-—á–µ–Ω']
    ];

    const expected2 = [
      ['–¥–æ–∂–¥—å', '–±—É–¥–µ—Ç', '–∏–¥—Ç–∏', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ–∫–∞–¥—ã'],
      ['–¥–æ–∂–¥—å', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ—Å—è—Ç–∏', '–¥–Ω–µ–π'],
      ['–¥–æ–∂–¥—å', '–Ω–∞', '–ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏', '–¥–µ–∫–∞–¥—ã']
    ];

    const words1 = ['–Ω–∞—á–∏–Ω–∞—è', '—Å', '—Å–µ–≥–æ–¥–Ω—è', '–∏', '–¥–æ', '–¥–Ω—è', '—Ü–∑—è-—á–µ–Ω', '–≤', '—ç—Ç–æ—Ç', '–ø–µ—Ä–∏–æ–¥', '–≤—Ä–µ–º–µ–Ω–∏', '–≤', '–ø—Ä–µ–¥–µ–ª–∞—Ö'];
    const words2 = ['–¥–æ–∂–¥—å', '–±—É–¥–µ—Ç', '–∏–¥—Ç–∏', '–≤', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ–∫–∞–¥—ã', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '—É—Ç—Ä–æ–º', '–≤–µ—á–µ—Ä–æ–º', '–≤', '–¥–µ–∫–∞–¥—É'];

    const wordPool1 = document.getElementById('word-pool1');
    const wordPool2 = document.getElementById('word-pool2');
    const dropArea1 = document.getElementById('drop-area1');
    const dropArea2 = document.getElementById('drop-area2');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
    function shuffleArray(array) {
      const arr = [...array];
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    // –°–æ–∑–¥–∞—ë–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤
    function createWordElements(words, pool, dropArea) {
      const shuffledWords = shuffleArray(words);
      return shuffledWords.map(word => {
        const box = document.createElement('div');
        box.className = 'word-box';
        box.textContent = word;

        box.onclick = () => {
          box.remove();
          dropArea.appendChild(box);
          updatePlaceholder(dropArea);
        };

        return box;
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å [–ø—É—Å—Ç–æ]
    function updatePlaceholder(dropArea) {
      const hasWords = Array.from(dropArea.children).some(el => el.classList.contains('word-box'));
      dropArea.classList.toggle('has-words', hasWords);
    }

    let wordElements1 = [];
    let wordElements2 = [];

    function init() {
      wordPool1.innerHTML = '';
      wordPool2.innerHTML = '';
      dropArea1.innerHTML = '';
      dropArea2.innerHTML = '';
      resultEl.style.display = 'none';

      wordElements1 = createWordElements(words1, wordPool1, dropArea1);
      wordElements2 = createWordElements(words2, wordPool2, dropArea2);

      wordElements1.forEach(el => wordPool1.appendChild(el));
      wordElements2.forEach(el => wordPool2.appendChild(el));

      updatePlaceholder(dropArea1);
      updatePlaceholder(dropArea2);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –≤ drop-area: –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø—É–ª
    dropArea1.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool1.appendChild(wordBox);
        updatePlaceholder(dropArea1);
      }
    });

    dropArea2.addEventListener('click', (e) => {
      if (e.target.classList.contains('word-box')) {
        const wordBox = e.target;
        wordBox.remove();
        wordPool2.appendChild(wordBox);
        updatePlaceholder(dropArea2);
      }
    });

    function getWords(dropArea) {
      return Array.from(dropArea.children)
        .filter(el => el.classList.contains('word-box'))
        .map(el => el.textContent.trim());
    }

    checkBtn.addEventListener('click', () => {
      const current1 = getWords(dropArea1);
      const current2 = getWords(dropArea2);

      const isCorrect1 = expected1.some(option => arraysEqual(current1, option));
      const isCorrect2 = expected2.some(option => arraysEqual(current2, option));

      if (isCorrect1 && isCorrect2) {
        resultEl.innerHTML = `‚úÖ <b>–ò–¥–µ–∞–ª—å–Ω–æ!</b> –í—ã —É—Å–≤–æ–∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "Ëá™...Ëá≥‰∫é..." –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è.`;
        resultEl.className = 'message success';
        resultEl.style.display = 'block';
        sendResult(true);
      } else {
        let message = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤:';
        if (!isCorrect1) message += '<br>‚Ä¢ "Ëá™‰ªäËá≥‰∫éÁî≤Ëæ∞" = "–Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ –¥–Ω—è —Ü–∑—è-—á–µ–Ω"';
        if (!isCorrect2) message += '<br>‚Ä¢ "Êó¨Èõ®" = "–¥–æ–∂–¥—å –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ–∫–∞–¥—ã"';
        
        resultEl.innerHTML = message;
        resultEl.className = 'message error';
        resultEl.style.display = 'block';
        sendResult(false, message);
      }
    });

    resetBtn.addEventListener('click', init);

    function arraysEqual(a, b) {
      if (a.length !== b.length) return false;
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task17.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 8px;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }
    h2 {
      margin: 0 0 8px 0;
      font-size: 16px;
      text-align: center;
      font-weight: bold;
    }
    p.intro {
      text-align: center;
      font-size: 14px;
      margin: 4px 0 12px 0;
      color: #555;
    }
    /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
    .match-container {
      display: flex;
      gap: 10px;
      max-width: 100%;
      margin-bottom: 12px;
    }
    .column {
      flex: 1;
      min-width: 140px;
    }
    .column h3 {
      font-size: 14px;
      text-align: center;
      margin: 6px 0;
      color: #333;
      background: #eee;
      padding: 4px;
      border-radius: 4px;
    }
    .word-item, .def-item {
      padding: 6px 8px;
      margin: 4px 0;
      background: #f8f8f8;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
      text-align: center;
      font-size: 14px;
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .word-item.selected {
      background: #e0f0ff;
      border-color: #0066cc;
      box-shadow: 0 0 0 2px #0066cc;
    }
    .def-item.selected {
      background: #e0f0ff;
      border-color: #0066cc;
      box-shadow: 0 0 0 2px #0066cc;
    }
    .matched {
      background: #e8f5e9 !important;
      border-color: #28a745 !important;
      color: #27ae60;
      font-weight: bold;
      opacity: 0.9;
      cursor: default;
      box-shadow: none;
    }
    button {
      display: block;
      width: 100%;
      padding: 6px 10px;
      margin: 12px 0 0 0;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:active {
      background: #0055aa;
    }
    #result {
      margin: 10px 0 0 0;
      padding: 8px;
      font-size: 14px;
      text-align: center;
      border-radius: 4px;
    }
    .success {
      background: #e8f5e9;
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "Ëá™", meaning: "z√¨" },
      { char: "Ëá≥", meaning: "zh√¨" },
      { char: "‰ªä", meaning: "jƒ´n" },
      { char: "Áî≤", meaning: "ji«é" },
      { char: "Ëæ∞", meaning: "ch√©n" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task19.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 8px;
      font-size: 14px;
      line-height: 1.4;
      background: #fff;
      color: #333;
    }
    h2 {
      margin: 0 0 8px 0;
      font-size: 16px;
      text-align: center;
      font-weight: bold;
    }
    p.intro {
      text-align: center;
      font-size: 14px;
      margin: 4px 0 12px 0;
      color: #555;
    }
    /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä—è–¥–æ–º */
    .match-container {
      display: flex;
      gap: 10px;
      max-width: 100%;
      margin-bottom: 12px;
    }
    .column {
      flex: 1;
      min-width: 140px;
    }
    .column h3 {
      font-size: 14px;
      text-align: center;
      margin: 6px 0;
      color: #333;
      background: #eee;
      padding: 4px;
      border-radius: 4px;
    }
    .word-item, .def-item {
      padding: 6px 8px;
      margin: 4px 0;
      background: #f8f8f8;
      border: 1px solid #ccc;
      border-radius: 4px;
      cursor: pointer;
      text-align: center;
      font-size: 14px;
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .word-item.selected {
      background: #e0f0ff;
      border-color: #0066cc;
      box-shadow: 0 0 0 2px #0066cc;
    }
    .def-item.selected {
      background: #e0f0ff;
      border-color: #0066cc;
      box-shadow: 0 0 0 2px #0066cc;
    }
    .matched {
      background: #e8f5e9 !important;
      border-color: #28a745 !important;
      color: #27ae60;
      font-weight: bold;
      opacity: 0.9;
      cursor: default;
      box-shadow: none;
    }
    button {
      display: block;
      width: 100%;
      padding: 6px 10px;
      margin: 12px 0 0 0;
      font-size: 14px;
      background: #0066cc;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:active {
      background: #0055aa;
    }
    #result {
      margin: 10px 0 0 0;
      padding: 8px;
      font-size: 14px;
      text-align: center;
      border-radius: 4px;
    }
    .success {
      background: #e8f5e9;
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é</h2>
  <p class="intro">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–ª–µ–≤–∞, –∑–∞—Ç–µ–º ‚Äî –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ø—Ä–∞–≤–∞</p>
  <div class="match-container">
    <div class="column">
      <h3>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã</h3>
      <div id="words"></div>
    </div>
    <div class="column">
      <h3>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h3>
      <div id="defs"></div>
    </div>
  </div>
  <button onclick="reset()">–°–±—Ä–æ—Å–∏—Ç—å</button>
  <p id="result"></p>
  <script>
    // –°–ª–æ–≤–∞—Ä—å –£—Ä–æ–∫–∞ 4 ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ª–µ–∫—Å–µ–º—ã
    const pairs = [
      { char: "‰∫é", meaning: "y√∫" },
      { char: "ÂïÜ", meaning: "shƒÅng" },
      { char: "ÁÉñ", meaning: "zƒÅi" },
      { char: "Âü∫", meaning: "jƒ´" },
      { char: "Âºó", meaning: "f√∫" }
    ];
    let selectedWord = null;
    let matchedPairs = 0;

    function shuffle(arr) {
      return [...arr].sort(() => Math.random() - 0.5);
    }

    function init() {
      const wordList = document.getElementById("words");
      const defList = document.getElementById("defs");
      wordList.innerHTML = "";
      defList.innerHTML = "";
      const shuffledChars = shuffle(pairs);
      const shuffledMeanings = shuffle(pairs.map(p => p.meaning));

      // –°–æ–∑–¥–∞—ë–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã (—Å–ª–µ–≤–∞)
      shuffledChars.forEach(item => {
        const el = document.createElement("div");
        el.className = "word-item";
        el.dataset.char = item.char;
        el.textContent = item.char;
        el.onclick = () => selectWord(el);
        wordList.appendChild(el);
      });

      // –°–æ–∑–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞)
      shuffledMeanings.forEach(meaning => {
        const el = document.createElement("div");
        el.className = "def-item";
        el.dataset.meaning = meaning;
        el.textContent = meaning;
        el.onclick = () => selectDefinition(el);
        defList.appendChild(el);
      });
    }

    function selectWord(el) {
      if (el.classList.contains("matched")) return;
      document.querySelectorAll(".word-item.selected").forEach(e => e.classList.remove("selected"));
      selectedWord = null;

      el.classList.add("selected");
      selectedWord = el;
    }

    function selectDefinition(el) {
      if (el.classList.contains("matched") || !selectedWord) return;

      el.classList.add("selected");
      const selectedMeaning = el.dataset.meaning;
      const selectedChar = selectedWord.dataset.char;

      // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
      const correctPair = pairs.find(p => p.char === selectedChar);
      if (correctPair && correctPair.meaning === selectedMeaning) {
        // –í–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        selectedWord.classList.add("matched");
        el.classList.add("matched");
        selectedWord.onclick = null;
        el.onclick = null;
        selectedWord = null;
        matchedPairs++;

        if (matchedPairs === 5) {
          const resultEl = document.getElementById("result");
          resultEl.textContent = "‚úÖ –í—Å–µ –ø–∞—Ä—ã –≤–µ—Ä–Ω—ã!";
          resultEl.className = "success";
          sendResult(true);
        }
      } else {
        // –û—à–∏–±–∫–∞
        document.getElementById("result").textContent = "‚ùå –û—à–∏–±–∫–∞.";
        setTimeout(() => {
          document.getElementById("result").textContent = "";
        }, 1500);
        selectedWord.classList.remove("selected");
        el.classList.remove("selected");
        selectedWord = null;
      }
    }

    function reset() {
      matchedPairs = 0;
      document.getElementById("result").textContent = "";
      document.getElementById("result").className = "";
      init();
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–í—Å–µ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞")
      }, "*");
    }

    window.onload = init;
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>