=== üìÑ task1.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ó–∞–¥–∞–Ω–∏–µ 1: –†–∏—Å–æ–≤–∞–Ω–∏–µ</title>
  <script src="https://cdn.jsdelivr.net/npm/hanzi-writer@3.5/dist/hanzi-writer.min.js"></script>
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      font-family: 'Segoe UI', Arial, sans-serif;
      overflow: hidden;
    }

    #splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #f0f4ff;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      flex-direction: column;
      text-align: center;
      color: #333;
    }

    #splash-screen h1 {
      font-size: 3.5rem;
      font-weight: bold;
      color: #2c55d9;
      text-shadow: 2px 2px 8px rgba(0,0,0,0.1);
      margin: 0;
      animation: fadeIn 0.5s ease-in;
    }

    #splash-screen p {
      font-size: 1.5rem;
      color: #555;
      margin-top: 20px;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.9); }
      to { opacity: 1; transform: scale(1); }
    }

    #character-target-div {
      display: none;
      margin: 40px auto;
      width: 300px;
      height: 300px;
    }

    /* === –ú–µ—Ä—Ü–∞—é—â–∏–π overlay === */
    #feedback-overlay {
      pointer-events: none;
      position: fixed;
      inset: 0;
      opacity: 0;
      transition: opacity 0s;
      z-index: 9999;
    }

    @keyframes flash {
      0% { opacity: 0; }
      50% { opacity: 0.7; }
      100% { opacity: 0; }
    }

    #feedback-overlay.success {
      background: green;
    }

    #feedback-overlay.error {
      background: red;
    }

    #feedback-overlay.animate {
      opacity: 0.7;
      animation: flash 0.8s ease-out;
    }
  </style>
</head>
<body>

<!-- –ó–∞—Å—Ç–∞–≤–∫–∞ -->
<div id="splash-screen">
  <h1>–ù–∞—Ä–∏—Å—É–π –∑–¥–µ—Å—å</h1>
  <p>–ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —É—Ä–æ–∫–∞!</p>
</div>

<!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è HanziWriter -->
<div id="character-target-div"></div>

<!-- Overlay –¥–ª—è –º–µ—Ä—Ü–∞–Ω–∏—è -->
<div id="feedback-overlay"></div>

<script>
  // ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  function sendResult(success, message) {
    window.parent.postMessage({
      type: "TASK_RESULT",
      success: !!success,
      message: message || (success ? "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "–û—à–∏–±–∫–∞")
    }, "*");
  }

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  function flashScreen(color) {
    const overlay = document.getElementById('feedback-overlay');
    overlay.className = ''; // —Å–±—Ä–æ—Å
    overlay.classList.add(color === 'success' ? 'success' : 'error');
    overlay.classList.add('animate');

    // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      overlay.classList.remove('animate');
    }, 800);
  }

  window.onload = function() {
    const splashScreen = document.getElementById('splash-screen');
    const characterDiv = document.getElementById('character-target-div');

    setTimeout(() => {
      splashScreen.style.display = 'none';
      characterDiv.style.display = 'block';

      const char = window.location.hash.slice(1);

      if (!char) {
        console.warn("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ –≤ —Ö—ç—à–µ");
        sendResult(false, "–ù–µ —É–∫–∞–∑–∞–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ");
        return;
      }

      const writer = HanziWriter.create('character-target-div', char, {
        width: 300,
        height: 300,
        showCharacter: false,
        showOutline: false,
        showHintAfterMisses: 1,
        highlightOnComplete: false,
        padding: 5
      });

      // –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
      writer.quiz({
        leniency: 2.0,

        onCorrectStroke: function(strokeData) {
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ö–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          // flashScreen('success'); // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–∏–≥–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à—Ç—Ä–∏—Ö
        },

        onMistake: function(strokeData) {
          console.log("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à—Ç—Ä–∏—Ö–µ", strokeData.strokeNum);
          flashScreen('error'); // üî¥ –ö—Ä–∞—Å–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        },

        onComplete: function(summaryData) {
          console.log("üéØ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:", summaryData);
          flashScreen('success'); // üü¢ –ó–µ–ª—ë–Ω–æ–µ –º–µ—Ä—Ü–∞–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
          sendResult(true, "–ò–µ—Ä–æ–≥–ª–∏—Ñ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –≤–µ—Ä–Ω–æ");
        }
      });
    }, 1000);
  };
</script>

<!-- –°–∏–≥–Ω–∞–ª—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É -->
<script>
  window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  window.parent.postMessage({ type: "DO_HANZI", valid: true }, "*");
</script>

</body>
</html>

=== üìÑ task2.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–°–µ–≥–æ–¥–Ω—è –ø–ª–µ–º—è –ì—É–Ω –ø—Ä–∏—Å–ª–∞–ª–æ –±–µ–ª—ã—Ö –ª–æ—à–∞–¥–µ–π –≤ –í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>‰ªä ‚Äî —Å–µ–≥–æ–¥–Ω—è</li>
      <li>Â∑•Êñπ ‚Äî –ø–ª–µ–º—è –ì—É–Ω</li>
      <li>Êù• ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å</li>
      <li>ÁôΩÈ©¨ ‚Äî –±–µ–ª—ã–µ –ª–æ—à–∞–¥–∏</li>
      <li>‰∫é ‚Äî –≤ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)</li>
      <li>Â§ßÈÇëÂïÜ ‚Äî –í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['‰ªä', 'Â∑•', 'Êñπ', 'Êù•', 'ÁôΩ', 'È©¨', '‰∫é', 'Â§ß', 'ÈÇë', 'ÂïÜ'];

    const allChars = [
      '‰ªä', 'Â∑•', 'Êñπ', 'Êù•', 'ÁôΩ', 'È©¨', '‰∫é', 'Â§ß', 'ÈÇë', 'ÂïÜ',
      'Êàë', 'Âèó', 'Á®ª', 'Âπ¥', '‰∏ç', 'Âºó', 'Êò•', 'Áéã', 'Âçú', 'Ë≤û',
      'Èõ®', 'ÂÖ∂', '‰∫â', 'Âêâ', 'Áä¨', 'Â≤Å', 'ÂÖ•', 'Âëä', 'Âãø', '‰∏ä'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>‰ªäÂ∑•ÊñπÊù•ÁôΩÈ©¨‰∫éÂ§ßÈÇëÂïÜ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task3.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ú—ã –≤—Å—Ç—É–ø–∏–º –≤ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–º –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Áîü‰∫åÊúà ‚Äî –≤ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–º –≤—Ç–æ—Ä–æ–º –º–µ—Å—è—Ü–µ</li>
      <li>Êàë ‚Äî –º—ã</li>
      <li>ÂÖ• ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å</li>
      <li>‰∫é ‚Äî –≤ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)</li>
      <li>ÂïÜ ‚Äî –≥–æ—Ä–æ–¥ (–í–µ–ª–∏–∫–∏–π –≥–æ—Ä–æ–¥ –®–∞–Ω)</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Áîü', '‰∫å', 'Êúà', 'Êàë', 'ÂÖ•', '‰∫é', 'ÂïÜ'];

    const allChars = [
      'Áîü', '‰∫å', 'Êúà', 'Êàë', 'ÂÖ•', '‰∫é', 'ÂïÜ',
      '‰ªä', 'Êù•', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë',
      'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'Èõ®', 'Áéã', 'Âç†', 'Êõ∞',
      'Âëä', 'Âãø', 'Ê±Ç', 'ÂÖ≠', '‰∏É', '‰πù', 'Â∫ö', 'ÂØÖ'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>Áîü‰∫åÊúàÊàëÂÖ•‰∫éÂïÜ';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task4.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–ù–µ —Å–æ–æ–±—â–∞–π –ø—Ä–∞–≤–∏—Ç–µ–ª—é –æ –¥–æ–∂–¥–µ!</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Âãø ‚Äî –Ω–µ (–∑–∞–ø—Ä–µ—Ç)</li>
      <li>Âëä ‚Äî —Å–æ–æ–±—â–∞—Ç—å</li>
      <li>Èõ® ‚Äî –¥–æ–∂–¥—å</li>
      <li>‰∫é ‚Äî –æ, –ø—Ä–∞–≤–∏—Ç–µ–ª—é (–ø—Ä–µ–¥–ª–æ–≥ –¥–ª—è –∞–¥—Ä–µ—Å–∞—Ç–∞)</li>
      <li>Áéã ‚Äî –ø—Ä–∞–≤–∏—Ç–µ–ª—å</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Âãø', 'Âëä', 'Èõ®', '‰∫é', 'Áéã'];

    const allChars = [
      'Âãø', 'Âëä', 'Èõ®', '‰∫é', 'Áéã',
      '‰ªä', 'Êù•', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë', 'ÂïÜ',
      'Êàë', 'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'Ê±Ç', 'ÂÖ≠', 'Êúà', 'ÂÖ•',
      'Áîü', '‰∏É', '‰πù', 'Êó•', 'Áøå', '‰∏≠', '‰∏Å', 'Êàä', '‰∏ä'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÂãøÂëäÈõ®‰∫éÁéã';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

=== üìÑ task5.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <title>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.4;
      font-size: 13px;
      background: #fff;
      color: #2c3e50;
    }

    h2 {
      font-size: 15px;
      margin-bottom: 6px;
    }

    .instructions {
      background: #f0f0f0;
      padding: 5px;
      border-radius: 4px;
      margin-bottom: 6px;
    }

    .instructions em {
      font-style: italic;
      font-size: 12px;
    }

    .toggle-hint {
      font-size: 12px;
      color: #3498db;
      text-decoration: underline;
      cursor: pointer;
      margin: 4px 0;
      display: inline-block;
    }

    .hint-container {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease;
    }

    .hint-container.open {
      max-height: 200px;
    }

    .hint-list {
      list-style: none;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      padding: 6px;
      margin: 4px 0;
      font-size: 12px;
      color: #7f8c8d;
    }

    .hint-list li::before {
      content: "üîπ ";
    }

    .hint-list li {
      margin: 2px 0;
    }

    p {
      font-size: 12px;
      margin: 4px 0;
    }

    #drop-area {
      min-height: 36px;
      border: 1px dashed #3498db;
      border-radius: 4px;
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      padding: 3px;
      margin: 6px 0;
      font-size: 16px;
      align-items: center;
    }

    #char-pool {
      display: flex;
      flex-wrap: wrap;
      gap: 3px;
      margin: 6px 0;
      padding: 3px;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 36px;
      background: #f9f9f9;
    }

    .char-box {
      width: 28px;
      height: 28px;
      background: white;
      border: 1px solid #ccc;
      border-radius: 3px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      user-select: none;
    }

    .controls {
      margin-top: 6px;
      display: flex;
      gap: 6px;
    }

    button {
      padding: 5px 9px;
      font-size: 12px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    button:hover {
      background: #2980b9;
    }

    .message {
      margin-top: 5px;
      font-size: 12px;
      font-weight: bold;
    }

    .success {
      color: #27ae60;
    }
  </style>
</head>
<body>
  <h2>–°–æ–±–µ—Ä–∏ —Ñ—Ä–∞–∑—É</h2>

  <div class="instructions">
    <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É:</strong></p>
    <p><em>–Ø –ø–æ–ø—Ä–æ—Å–∏–ª —á—É–º–∏–∑—ã —É –≥–∞–¥–∞—Ç–µ–ª—è. –ì–∞–¥–∞—Ç–µ–ª—å –ø—Ä–∏—à–ª–µ—Ç —á—É–º–∏–∑—É –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É.</em></p>
  </div>

  <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ -->
  <div class="toggle-hint" id="toggle-hint-btn">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏</div>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
  <div class="hint-container" id="hint-container">
    <ul class="hint-list">
      <li>Êàë ‚Äî —è</li>
      <li>Ê±Ç ‚Äî –ø—Ä–æ—Å–∏—Ç—å</li>
      <li>‰∫é ‚Äî —É (–∞–¥—Ä–µ—Å–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è)</li>
      <li>Âçú ‚Äî –≥–∞–¥–∞—Ç–µ–ª—å</li>
      <li>Êù• ‚Äî –ø—Ä–∏—à–ª–µ—Ç (–∫–∞—É–∑–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)</li>
      <li>Èªç ‚Äî —á—É–º–∏–∑–∞</li>
      <li>Êù•Â≤Å ‚Äî –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É</li>
    </ul>
  </div>

  <p><strong>–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã:</strong></p>
  <div id="char-pool"></div>

  <p><strong>–°–æ–±–µ—Ä–∏—Ç–µ –∑–¥–µ—Å—å:</strong></p>
  <div id="drop-area"></div>

  <div class="controls">
    <button id="check-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
    <button id="reset-btn">–°–±—Ä–æ—Å–∏—Ç—å</button>
  </div>

  <p id="result" class="message"></p>

  <script>
    const expected = ['Êàë', 'Ê±Ç', 'Èªç', '‰∫é', 'Âçú', '‰æÜ', 'Ê≠≤', 'Âçú', '‰æÜ', 'Èªç'];

    const allChars = [
      'Êàë', 'Ê±Ç', 'Èªç', '‰∫é', 'Âçú', '‰æÜ', 'Ê≠≤', 'Âçú', '‰æÜ', 'Èªç',
      '‰ªä', 'ÁôΩ', 'È©¨', 'Â∑•', 'Êñπ', 'Â§ß', 'ÈÇë', 'ÂïÜ', 'ÂÖ•', 'Áéã',
      'Âãø', 'Âëä', 'Èõ®', 'Âèó', 'Âπ¥', '‰∏ç', 'ÂÖ∂', 'ÂÖ≠', 'Êúà', 'Áîü'
    ].sort(() => Math.random() - 0.5);

    const toggleBtn = document.getElementById('toggle-hint-btn');
    const hintContainer = document.getElementById('hint-container');
    const charPool = document.getElementById('char-pool');
    const dropArea = document.getElementById('drop-area');
    const checkBtn = document.getElementById('check-btn');
    const resetBtn = document.getElementById('reset-btn');
    const resultEl = document.getElementById('result');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    toggleBtn.addEventListener('click', () => {
      const isOpen = hintContainer.classList.contains('open');
      hintContainer.classList.toggle('open');
      toggleBtn.textContent = isOpen ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏' : '–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    });

    function moveToDropArea(box) {
      const clone = box.cloneNode(true);
      clone.draggable = false;
      clone.style.cursor = 'default';
      clone.onclick = null;

      box.remove();
      dropArea.appendChild(clone);
    }

    function initCharPool() {
      charPool.innerHTML = '';
      dropArea.innerHTML = '';
      resultEl.textContent = '';

      allChars.forEach(char => {
        const box = document.createElement('div');
        box.className = 'char-box';
        box.textContent = char;

        box.addEventListener('click', () => moveToDropArea(box));
        charPool.appendChild(box);
      });
    }

    checkBtn.addEventListener('click', () => {
      const current = Array.from(dropArea.children).map(el => el.textContent);
      if (arraysEqual(current, expected)) {
        resultEl.innerHTML = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!<br>ÊàëÊ±ÇÈªç‰∫éÂçú„ÄÇ‰æÜÊ≠≤Âçú‰æÜÈªç';
        resultEl.className = 'message success';
        sendResult(true);
      } else {
        resultEl.textContent = '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
        resultEl.className = 'message';
        sendResult(false, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫');
      }
    });

    resetBtn.addEventListener('click', initCharPool);

    function arraysEqual(a, b) {
      return a.length === b.length && a.every((v, i) => v === b[i]);
    }

    function sendResult(success, message) {
      window.parent.postMessage({
        type: "TASK_RESULT",
        success: !!success,
        message: message || (success ? "–§—Ä–∞–∑–∞ —Å–æ–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ" : "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
      }, "*");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initCharPool();

    // –°–∏–≥–Ω–∞–ª, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    window.parent.postMessage({ type: "TASK_EXISTS", valid: true }, "*");
  </script>
</body>
</html>

